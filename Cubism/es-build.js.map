{
  "version": 3,
  "sources": ["src/Datatypes/TransformMatrix2D.ts", "src/State.ts", "src/CubismPart.ts", "src/Constants/EventKeys.ts", "src/CanvasDrawer.ts", "src/Global/Inter/CubismEventSystem.ts", "src/Datatypes/Point.ts", "src/Datatypes/PointerPoint.ts", "src/Global/Outer/CubismOuterGlobal.ts", "src/CubismInitializer.ts", "src/CubismElementManger.ts", "src/Cubism.ts", "src/Debug/DebugConsole.ts", "src/Constants/SizeKeys.ts", "src/Elements/CubismElement.ts", "src/Elements/CubismParentElement.ts", "src/Elements/PointerHanderParentElement.ts", "src/Constants/Colors.ts", "src/Physics/Physics2D/PhysicalPoint2D.ts", "src/Elements/Fancy/RecursiveRect.ts", "src/Elements/Fancy/ChangingRainbowBackground.ts", "src/Demo/StaticDemo.ts", "src/Demo/DemoDecorators.ts", "src/Demo/Demo.ts"],
  "sourcesContent": ["/**\n * A class representing a 2D transformation matrix.\n */\nimport {Point2D} from \"./Point\";\n\nexport class TransformMatrix2D {\n    arr: number[][] = [];\n\n    /**\n     * Creates a new 2D transform matrix.\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\n     * @param m12 Vertical skewing.\n     * @param m21 Horizontal skewing.\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\n     * @param dx  Horizontal translation (moving).\n     * @param dy Vertical translation (moving).\n     */\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\n        this.arr = [\n            [m11, m12, dx],\n            [m21, m22, dy],\n            [0, 0, 1]\n        ];\n    }\n    get m11(): number {\n        return this.arr[0][0];\n    }\n\n    set m11(value: number) {\n        this.arr[0][0] = value;\n    }\n\n    get m12(): number {\n        return this.arr[0][1];\n    }\n\n    set m12(value: number) {\n        this.arr[0][1] = value;\n    }\n\n    get m21(): number {\n        return this.arr[1][0];\n    }\n\n    set m21(value: number) {\n        this.arr[1][0] = value;\n    }\n\n    get m22(): number {\n        return this.arr[1][1];\n    }\n\n    set m22(value: number) {\n        this.arr[1][1] = value;\n    }\n\n    get dx(): number {\n        return this.arr[0][2];\n    }\n\n    set dx(value: number) {\n        this.arr[0][2] = value;\n    }\n\n    get dy(): number {\n        return this.arr[1][2];\n    }\n\n    set dy(value: number) {\n        this.arr[1][2] = value;\n    }\n\n\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\n    }\n\n    get(x: number, y: number): number {\n        return this.arr[x][y];\n    }\n\n    set(x: number, y: number, value: number) {\n        // console.log(`Setting ${x}, ${y} to ${value}`);\n        this.arr[x][y] = value;\n    }\n\n    static identity(): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\n    }\n\n    static zero(): TransformMatrix2D {\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\n    }\n\n    static translation(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\n    }\n\n    static translationFromPoint(point: Point2D): TransformMatrix2D {\n        return TransformMatrix2D.translation(point.x, point.y);\n    }\n\n    static rotation(angle: number): TransformMatrix2D {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\n    }\n\n    static scale(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\n    }\n    static scaleFromPoint(point: Point2D): TransformMatrix2D {\n        return TransformMatrix2D.scale(point.x, point.y);\n    }\n\n    clone(): TransformMatrix2D {\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\n    }\n\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\n        let newMatrix = TransformMatrix2D.zero();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let dotProduct = 0;\n                for (let k = 0; k < 3; k++) {\n                    dotProduct += this.get(i, k) * other.get(k, j);\n                }\n                newMatrix.set(i, j, dotProduct);\n            }\n        }\n        return newMatrix;\n    }\n\n    translate(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.translation(x, y));\n    }\n\n    rotate(angle: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.rotation(angle));\n    }\n\n    scale(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.scale(x, y));\n    }\n\n    toString(): string {\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\n    }\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {TransformMatrix2D} from \"./Datatypes/TransformMatrix2D\";\n\n/**\n * The state of the canvas\n */\nexport class CubismCanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n    }\n\n    private translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\n\n    set translate(offset: Point2D) {\n        let translateMatrix = this.translateMatrix.translate(offset.x, offset.y);\n        this.translates.push(translateMatrix);\n        this.setCtxTransform(translateMatrix);\n    }\n\n    setCtxTransform(t: TransformMatrix2D) {\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\n    }\n\n    restoreTranslate() {\n        // console.log(`Restoring translate ${this.translates.length}`);\n        let lastTranslate = this.popTranslate();\n        this.setCtxTransform(lastTranslate);\n    }\n\n    get translateMatrix(): TransformMatrix2D {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate(): TransformMatrix2D {\n        if (this.translates.length > 1) {\n            // console.log(\"pop translate\");\n            return this.translates.pop() as TransformMatrix2D;\n        }\n        return this.translates[0];\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "import IHasCubism from \"./Interface/IGlobalHandler\";\nimport {Cubism} from \"./Cubism\";\n\nexport default class CubismPart implements IHasCubism {\n    _cubism: Cubism | null = null;\n    get cubism(): Cubism {\n        return this.getCubism();\n    }\n    /**\n     * It seems like setter has some problems with overriding\n     * @param cubism\n     */\n    set cubism(cubism: Cubism) {\n        this.setCubism(cubism);\n    }\n\n    /**\n     * Called by setter\n     * @param cubism\n     */\n    setCubism(cubism: Cubism) {\n        this._cubism = cubism;\n    }\n\n    /**\n     * Called by getter\n     */\n    getCubism(): Cubism {\n        if (this._cubism === null) {\n            throw new Error(`Cubism is not set for ${this.className}`);\n        }\n        return this._cubism as Cubism;\n    }\n\n    get className(): string {\n        return this.constructor.name;\n    }\n\n    toString(): string {\n        return `${this.className}(${(this._cubism ===null) ? this._cubism : \"NO CUBISM\"})`;\n    }\n}", "\nexport class EventKeys {\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly GLOBAL_ON_POINTER_CHANGE = \"redraw\";\n\n    public static readonly FPS_UPDATE = \"FPS_EVENT\";\n\n    public static readonly ON_POINTER_EVENT = \"onPointerEvent\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n    public static readonly ON_ENTER = \"onEnter\";\n    public static readonly ON_LEAVE = \"onLeave\";\n\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {CubismCanvasState} from \"./State\";\nimport CubismPart from \"./CubismPart\";\nimport {Cubism} from \"./Cubism\";\nimport {EventKeys} from \"./Constants/EventKeys\";\n\n/**\n * Adaptor class for the canvas\n * with the ability to draw on it\n * and handle events\n */\nexport class CanvasDrawer extends CubismPart {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    get eventSystem() {\n        return this.cubism.eventSystem;\n    }\n\n    state: CubismCanvasState; // the state of the canvas\n\n    /**\n     * Constructor of the CanvasDrawer\n     * @param canvas the canvas to draw on\n     */\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.state = new CubismCanvasState(canvas, this.ctx);\n    }\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n\n        this.registerFrameUpdate();\n    }\n    get width() {\n        return this.canvas.width;\n    }\n\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    /**\n     * Register the frame update event\n     * @private\n     */\n    private registerFrameUpdate() {\n        // console.log(\"Registering frame update\");\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    /**\n     * Things to do on every frame update\n     * @private\n     */\n    private frameUpdate() {\n        // console.log(\"Frame update\");\n        if (this.state.needsRedraw) {\n            this.triggerRedraw();\n            // console.log(\"Redrawing\");\n            this.state.needsRedraw = false;\n        }\n    }\n\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Set the fill style(color) of the canvas\n     * @param style the style to set\n     */\n    setFillStyle(style: string) {\n        this.ctx.fillStyle = style;\n    }\n\n    /**\n     * Set the stroke style(color) of the canvas\n     * @param style the style to set\n     */\n    setStrokeStyle(style: string) {\n        this.ctx.strokeStyle = style;\n    }\n\n    /**\n     * Set the line width of the canvas\n     * @param width\n     */\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n    }\n\n    /**\n     * Translate the canvas\n     * @param offset\n     */\n    translate(offset: Point2D) {\n        this.state.translate = offset;\n    }\n\n    /**\n     * Restore translation and rotation to previous state\n     */\n    restoreTranslate() {\n\n        this.state.restoreTranslate();\n    }\n\n    /**\n     * Draw text on the canvas\n     * @param text the text to draw\n     * @param x the x position of the text\n     * @param y the y position of the text\n     */\n    fillText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    /**\n     * Draw a line with two Point2Ds\n     * @param begin the beginning of the line\n     * @param end the end of the line\n     */\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    /**\n     * Draw a line with four numbers\n     * @param beginX the x position of the beginning of the line\n     * @param beginY the y position of the beginning of the line\n     * @param endX the x position of the end of the line\n     * @param endY the y position of the end of the line\n     */\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRectWithPoints(p1: Point2D, p2: Point2D | null = null) {\n        if (p2 === null) {\n            this.drawRect(0, 0, p1.x, p1.y);\n        } else {\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\n        }\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    /**\n     * Draw an HTML Canvas Path on the canvas\n     * @param path\n     */\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    /**\n     * Close the drawing path\n     */\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    /**\n     * Set the need redraw flag\n     * @param redraw\n     */\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    /**\n     * Trigger a redraw event\n     * Seems more responsive than setRedraw()\n     */\n    triggerRedraw() {\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\n    }\n}\n", "import IHasCubism from \"../../Interface/IGlobalHandler\";\nimport CubismPart from \"../../CubismPart\";\nimport IEventManger from \"../../Interface/IEventManger\";\n\n/**\n * System that handles the registration and trigger of global events\n */\nexport class CubismEventSystem extends CubismPart implements IEventManger {\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n        }\n        return this._globalEventListeners[event];\n    }\n\n    registerEvent(eventKey: string, callback: Function): void {\n        this.getEvent(eventKey).push(callback);\n    }\n\n    triggerEvent(eventKey: string, ...args: any[]): void {\n        this.getEvent(eventKey).forEach((callback) => {\n            callback(...args);\n        });\n    }\n\n    unregisterEvent(eventKey: string, callback: Function): void {\n        this._globalEventListeners[eventKey].splice(this._globalEventListeners[eventKey].indexOf(callback), 1);\n    }\n\n    removeEvent(event: string) {\n        this._globalEventListeners[event] = [];\n    }\n\n    removeAllEvents() {\n        for (const event in this._globalEventListeners) {\n            this.removeEvent(event);\n        }\n        this._globalEventListeners = {};\n    }\n}", "/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n\n    get x() {\n        return this.arr[0];\n    }\n\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n\n    get y() {\n        return this.arr[1];\n    }\n\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n\n    setXY(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    set(point: Point2D) {\n        this.x = point.x;\n        this.y = point.y;\n        return this;\n    }\n\n\n    /**\n     * Offset the point by the given amount.\n     * @param offset\n     */\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n        return this;\n    }\n\n    /**\n     * Offset the point by the negative given amount.\n     * @param offset\n     */\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n        return this;\n    }\n\n    add(other: Point2D): Point2D {\n        return this.clone().offset(other);\n    }\n\n    sub(other: Point2D): Point2D {\n        return this.clone().nOffset(other);\n    }\n\n    subXY(x: number, y: number): Point2D {\n        return this.sub(new Point2D(x, y));\n    }\n\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "import {Point2D} from \"./Point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n\n    get pressed(): boolean {\n        return this.pressure > 0;\n    }\n}", "import {CubismEventSystem} from \"../Inter/CubismEventSystem\";\nimport {Cubism} from \"../../Cubism\";\n\n/**\n * The global manager for Cubism outside the canvas\n * This is a singleton class\n */\nexport class CubismOuterGlobal {\n    private static _instance: CubismOuterGlobal;\n\n    private constructor() {\n    }\n\n    public static get instance(): CubismOuterGlobal {\n        if (!CubismOuterGlobal._instance) {\n            CubismOuterGlobal._instance = new CubismOuterGlobal();\n        }\n        return CubismOuterGlobal._instance;\n    }\n\n    private _cubismInstances: { [key: string]: Cubism } = {};\n\n    public static getCubismInstance(key: string): Cubism {\n        return CubismOuterGlobal.instance._cubismInstances[key];\n    }\n\n    public static registerCubismInstance(key: string, app: Cubism) {\n        if (CubismOuterGlobal.instance._cubismInstances[key] === undefined) {\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n        } else {\n            console.log(\"Replacing cubism instance with key \" + key);\n            this.getCubismInstance(key).destroy();\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n            // throw new Error(\"Cubism app with key [\" + key + \"] already exists\");\n        }\n    }\n}", "\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\nimport IGlobalHandler from \"./Interface/IGlobalHandler\";\nimport IHasCubism from \"./Interface/IGlobalHandler\";\nimport CubismPart from \"./CubismPart\";\nimport {triggerAsyncId} from \"async_hooks\";\nimport {EventKeys} from \"./Constants/EventKeys\";\n\nexport default class CubismInitializer extends CubismPart {\n    get eventSystem(): CubismEventSystem {\n        return this.cubism.eventSystem;\n    }\n\n    initializeFixedUpdate(timeInterval: number = 1000 / 60) {\n        setInterval(this.doFixUpdate.bind(this), timeInterval);\n\n        return this;\n    }\n\n    doFixUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FIX_UPDATE);\n    }\n\n    public initializeFrameUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n        return this;\n    }\n\n    public initializeFPSCounter() {\n\n\n        this.eventSystem.registerEvent(EventKeys.FPS_UPDATE, this.doFPSUpdate.bind(this));\n        setInterval(this.triggerFPSUpdate.bind(this), 1000);\n\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.incrementFPS.bind(this));\n        return this;\n    }\n\n    triggerFPSUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FPS_UPDATE, this.fps);\n        this.resetFPSCounter();\n    }\n\n    doFPSUpdate(fps: number) {\n        // console.log(\"FPS: \" + fps);\n    }\n\n    fps: number = 0;\n\n    resetFPSCounter() {\n        this.fps = 0;\n    }\n\n    incrementFPS() {\n        this.fps++;\n    }\n\n    getFPS() {\n        return this.fps;\n    }\n\n    doFrameUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n    }\n    public initializeAlwaysRedraw() {\n\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.triggerRedraw.bind(this));\n        return this;\n    }\n    triggerRedraw() {\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\n    }\n}\n", "import {CubismElement} from \"./Elements/CubismElement\";\n\nexport default class CubismElementManger{\n\n    private _elementsWithId: { [key: string]: CubismElement } = {};\n\n    private _elementsWithClass: { [key: string]: CubismElement[] } = {};\n\n    public registerElementId(id: string, element: CubismElement) {\n        console.log(\"registering element with id \" + id);\n        if (this._elementsWithId[id] === undefined) {\n            this._elementsWithId[id] = element;\n        } else {\n            throw new Error(\"Element with that id already exists\");\n        }\n    }\n\n    public getElementById(id: string): CubismElement {\n        return this._elementsWithId[id];\n    }\n\n    public removeElementWithId(id: string) {\n        delete this._elementsWithId[id];\n    }\n\n    public registerElementClass(className: string, element: CubismElement) {\n        if (this._elementsWithClass[className] === undefined) {\n            this._elementsWithClass[className] = [];\n        }\n        this._elementsWithClass[className].push(element);\n    }\n\n    public getElementsByClass(className: string): CubismElement[] {\n        return this._elementsWithClass[className];\n    }\n\n    public removeElementWithClass(className: string, element: CubismElement) {\n        this._elementsWithClass[className].splice(this._elementsWithClass[className].indexOf(element), 1);\n    }\n\n    public removeClass(className: string) {\n        delete this._elementsWithClass[className];\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\nimport {EventKeys} from \"./Constants/EventKeys\";\nimport {Point2D} from \"./Datatypes/Point\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\nimport {CubismOuterGlobal} from \"./Global/Outer/CubismOuterGlobal\";\nimport CubismPart from \"./CubismPart\";\nimport CubismInitializer from \"./CubismInitializer\";\nimport CubismElementManger from \"./CubismElementManger\";\nimport {CubismElement} from \"./Elements/CubismElement\";\n\n/**\n * Entry point of the application\n * Initializes different parts of the application\n */\nexport class Cubism extends CubismElementManger {\n    _root: CubismElement | null = null;\n    readonly canvas: HTMLCanvasElement;\n    readonly cubismId: string;\n    readonly canvasDrawer: CanvasDrawer;\n    readonly eventSystem: CubismEventSystem;\n\n    _initializer: CubismInitializer;\n    get initializer() {\n        return this._initializer;\n    }\n\n    get rootElement(): CubismElement {\n        if (this._root === null) {\n            throw new Error(\"Root is not set\");\n        }\n        return this._root;\n    }\n\n    set rootElement(root) {\n\n        this.initParts(root);\n        this._root = root;\n    }\n\n\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.eventSystem = new CubismEventSystem();\n        this.canvasDrawer = new CanvasDrawer(canvas);\n        this._initializer = new CubismInitializer();\n\n        this.initParts(this.canvasDrawer, this.eventSystem, this.initializer);\n        this.registerRedraw();\n        this.registerGlobalPointerEvents();\n\n\n        if (canvas.id === null || canvas.id === undefined || canvas.id === \"\") {\n            throw new Error(\"Canvas must have an id\");\n        }\n        this.cubismId = canvas.id;\n\n        CubismOuterGlobal.registerCubismInstance(this.cubismId, this);\n    }\n\n\n    /**\n     * Register pointer events\n     */\n    registerGlobalPointerEvents() {\n        // on move\n        this.canvas.onpointermove = (e) => {\n            // console.log(\"onpointermove\");\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n        // on down\n        this.canvas.onpointerdown = (e) => {\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n        // on up\n        this.canvas.onpointerup = (e) => {\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n    }\n\n    registerRootElementPointerEvents() {\n\n        this.eventSystem.registerEvent(EventKeys.ON_POINTER_EVENT, (point: PointerPoint) => {\n            // console.log(`Pointer event [${point}]`);\n            this.rootElement.triggerEvent(EventKeys.ON_POINTER_EVENT, point);\n        });\n\n    }\n\n    registerRedraw() {\n        this.eventSystem.registerEvent(EventKeys.REDRAW, this.redraw.bind(this));\n    }\n\n    // registerOnMove() {\n    //     this.eventSystem.registerEvent(EventKeys.ON_MOVE, this.registerOnMove.bind(this));\n    // }\n\n    /**\n     * Create a new Cubism object from a canvas object\n     * @param canvas the canvas to draw on\n     */\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    /**\n     * Create a new Cubism object from a canvas id\n     * @param id the id of the canvas\n     */\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: CubismElement) {\n        this.rootElement = root;\n        this.initRootElement();\n        this.initializer.initializeFrameUpdate();\n\n        this.registerRootElementPointerEvents();\n        this.canvasDrawer.setRedraw(true);\n    }\n\n    private initRootElement() {\n        console.log(\"init root element\");\n        this.rootElement.resize(\n            new Point2D(this.canvas.width, this.canvas.height)\n        );\n    }\n\n    /**\n     * Redraw the whole canvas from the root element\n     */\n    redraw() {\n        this.canvasDrawer.clear();\n        if (this.rootElement) {\n            this.rootElement.draw();\n        }\n    }\n\n    initParts(...parts: CubismPart[]) {\n        parts.forEach(part => {\n                part.cubism = this;\n                console.log(`Initializing cubism part [${part}]`);\n            }\n        );\n    }\n\n    destroy() {\n        console.log(`Destroying [${this}]`);\n        this.eventSystem.removeAllEvents();\n\n        this.canvasDrawer.clear();\n    }\n\n    toString() {\n        return `Cubism [${this.cubismId}]`;\n    }\n}\n\n", "import { Point2D } from \"../Datatypes/Point\";\nimport {CubismOuterGlobal} from \"../Global/Outer/CubismOuterGlobal\";\n\nexport function initConsole() {\n    let w = window as any;\n    w.test = () => {\n        console.log('test');\n    }\n    w.cubismGlobal = CubismOuterGlobal.instance;\n}\n", "export default class SizeKeys {\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}", "import {Point2D} from \"../Datatypes/Point\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {Cubism} from \"../Cubism\";\nimport {CubismEventSystem} from \"../Global/Inter/CubismEventSystem\";\nimport SizeKeys from \"../Constants/SizeKeys\";\n\n/**\n * Base class for all elements that can be rendered on the canvas\n * With size, position, and global events\n */\nexport class CubismElement extends CubismEventSystem implements IDrawable {\n    _position: Point2D;\n    _size: Point2D;\n    _absSize: Point2D; // Absolute size is the size of the element\n\n\n    elementId: string | null = null;\n    needsResize: boolean = true;\n\n    constructor(elementId: string | null = null) {\n        super();\n        this._position = new Point2D(0, 0);\n        this._size = new Point2D(SizeKeys.MATCH_PARENT, SizeKeys.MATCH_PARENT);\n        this._absSize = new Point2D(0, 0);\n        // Optional id\n        this.elementId = elementId;\n    }\n\n    /**\n     * Set id for this element so that it can be accessed by the id\n     * @param id\n     */\n    setId(id: string): this {\n        this.elementId = id;\n        if (this._cubism) {\n            this._cubism.registerElementId(id, this);\n        }\n        return this;\n    }\n\n    /**\n     * Set cubism instance for this element\n     * @param cubism\n     */\n    setCubism(cubism: Cubism): void {\n        super.setCubism(cubism);\n        if (this.elementId !== null) {\n            this.setId(this.elementId);\n        }\n    }\n\n    /**\n     * Set position of this element relative to parent\n     * @param pos\n     */\n    set position(pos: Point2D) {\n        this._position = pos;\n        this.c.setRedraw(true);\n    }\n\n    /**\n     * Get position of this element relative to parent\n     */\n    get position(): Point2D {\n        return this._position;\n    }\n\n    /**\n     * Get a size description of this element\n     * Not necessarily the size of the element\n     */\n    get size(): Point2D {\n        return this._size;\n    }\n\n    /**\n     * Set size of this element\n     *\n     * @param size size description\n     */\n    set size(size: Point2D) {\n        this.setSizeFromXY(size.x, size.y);\n    }\n\n    setSizeFromXY(x: number, y: number): this {\n        this.size.x = x;\n        this.size.y = y;\n        this.needsResize = true;\n        return this;\n    }\n\n    /**\n     * Get the actual size of this element\n     */\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    /**\n     * Set the actual size of this element\n     * @param size\n     */\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c.setRedraw(true);\n    }\n\n    // /**\n    //  * Initialize this element\n    //  * @param parentSize\n    //  */\n    // initElement(parentSize: Point2D): void {\n    //     console.log(`Init element ${this}`);\n    //     // this.resize(parentSize);\n    // }\n\n    get height(): number {\n        return this.size.y;\n    }\n\n    set height(y: number) {\n        this.setSizeFromXY(this.width, y);\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.setSizeFromXY(x, this.height);\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setWidth(width: number) {\n        this.width = width;\n        this.needsResize = true;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D): this {\n        this.position = pos;\n        return this;\n    }\n\n    setPosFromXY(x: number, y: number): this {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n\n    /**\n     * Resize this element to targetSize size\n     * and mark it as resized\n     * @param targetSize\n     */\n    resize(targetSize: Point2D) {\n        this.resizeFromXY(targetSize.x, targetSize.y);\n    }\n\n    /**\n     * Resize this element to targetSize size\n     * and mark it as resized\n     * @param x width\n     * @param y height\n     */\n    resizeFromXY(x: number, y: number): void {\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n    /**\n     * Get canvas drawer\n     */\n    get c(): CanvasDrawer {\n        if (!this.cubism) {\n            console.log(this.cubism)\n            throw new Error(`Cubism instance not set for ${this}`);\n        }\n        return this.cubism.canvasDrawer;\n    }\n\n    /**\n     * Render this element\n     */\n    draw(): void {\n        // console.log(`Drawing ${this}`);\n    }\n\n    /**\n     * Get a string representation of this element\n     */\n    toString(): string {\n        return `[${this.elementId ? this.elementId : \"NO ID\"}]: ${this.className} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n}\n", "/**\n * An Element with children\n */\nimport {CubismElement} from \"./CubismElement\";\nimport {Cubism} from \"../Cubism\";\nimport {Point2D} from \"../Datatypes/Point\";\nimport SizeKeys from \"../Constants/SizeKeys\";\n\nexport default class CubismParentElement extends CubismElement {\n    children: CubismElement[];\n\n    constructor(elementId: string | null = null, ...children: CubismElement[]) {\n        super(elementId);\n        this.children = [];\n        this.addChildren(...children);\n    }\n\n    /**\n     * Called by initElement.\n     * Therefore, no need to overload initElement\n     * @param targetSize\n     */\n    resize(targetSize: Point2D) {\n        super.resize(targetSize);\n        this.updateChildrenShape()\n    }\n\n    /**\n     * Updates the children's shape\n     */\n    updateChildrenShape() {\n        this.updateChildrenSize();\n        this.updateChildrenPosition();\n    }\n\n    /**\n     * Updates the children's position\n     */\n    updateChildrenPosition() {\n\n    }\n\n    /**\n     * Updates the children's size according to the layout\n     */\n    updateChildrenSize() {\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === SizeKeys.MATCH_PARENT) {\n                x = this.absWidth;\n            }\n            if (y === SizeKeys.MATCH_PARENT) {\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.resize(new Point2D(x, y));\n        }\n    }\n\n    /**\n     * Adds children to the element\n     * @param children\n     */\n    addChildren(...children: CubismElement[]): this {\n        for (let child of children) {\n            this.children.push(child);\n            if (this._cubism) {\n                child.setCubism(this.cubism);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Removes a child from the element\n     * @param child\n     */\n    removeChild(child: CubismElement): void {\n        let index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    }\n\n    /**\n     * Removes given children from the element\n     * @param children\n     */\n    removeChildren(children: CubismElement[]): void {\n        for (let child of children) {\n            this.removeChild(child);\n        }\n    }\n\n    /**\n     * Draws current element and its children\n     */\n    draw() {\n        super.draw();\n        this.drawChildren();\n    }\n\n    /**\n     * Draws the children\n     */\n    drawChildren() {\n        this.c.translate(this.position);\n        for (let child of this.children) {\n            child.draw();\n        }\n        this.c.restoreTranslate();\n    }\n\n    /**\n     * Sets the cubism instance for the element and its children\n     * @param cubism\n     */\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n        this.setChildrenCubism(cubism);\n    }\n\n    /**\n     * Sets the cubism instance for the children\n     * @param cubism\n     */\n    setChildrenCubism(cubism: Cubism) {\n        for (let child of this.children) {\n            child.setCubism(cubism);\n        }\n    }\n}\n", "import CubismParentElement from \"./CubismParentElement\";\nimport {Point2D} from \"../Datatypes/Point\";\nimport {EventKeys} from \"../Constants/EventKeys\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {CubismElement} from \"./CubismElement\";\n\nexport default class PointerHandlerParentElement extends CubismParentElement {\n    _dragPoint: PointerPoint | null = null;\n    _pointerWasInRange: boolean = false;\n    _hovered: boolean = false;\n    _pressed: boolean = false;\n\n    get pressed(): boolean {\n        return this._pressed;\n    }\n\n    set pressed(value: boolean) {\n        this._pressed = value;\n    }\n\n    get hovered(): boolean {\n        return this._hovered;\n    }\n\n    set hovered(value: boolean) {\n        this._hovered = value;\n    }\n\n    constructor(id: string | null = null, ...children: CubismElement[]) {\n        super(id, ...children);\n        this.registerEvent(EventKeys.ON_POINTER_EVENT, this.onPointerEvent.bind(this));\n    }\n\n    onDown(point: PointerPoint) {\n        // console.log(\"onDown\");\n    }\n\n    onUp(point: PointerPoint) {\n        // console.log(\"onUp\");\n    }\n\n    onLeave(point: PointerPoint) {\n        // console.log(\"onLeave\");\n\n    }\n\n    onEnter(point: PointerPoint) {\n        // console.log(\"onEnter\");\n    }\n\n    onMove(point: PointerPoint) {\n        // console.log(\"onMove\");\n    }\n\n    onParentMove(point: PointerPoint) {\n\n    }\n\n\n    onPointerEvent(point: PointerPoint) {\n        this.triggerThisPointerEvent(point);\n        this.triggerChildrenPointerEvent(point.sub(this.position));\n    }\n\n    triggerThisPointerEvent(point: PointerPoint) {\n        this.onParentMove(point);\n        /**\n         * If the pointer is in range of the element\n         */\n        if (this.pointerInRange(point)) {\n            if (!this._pointerWasInRange) {\n                this.onEnter(point);\n            }\n            this._pointerWasInRange = true;\n            this.onMove(point);\n\n            if (!point.pressed) {\n                this.hovered = true;\n            }\n\n            if (point.pressed && !this.pressed) {\n                this.onDown(point);\n                this._dragPoint = point;\n                this.pressed = true;\n            }\n            if (!point.pressed && this.pressed) {\n                this.onUp(point);\n                this._dragPoint = null;\n                this.pressed = false;\n            }\n        }\n        /**\n         * Not in range\n         */\n        else {\n            this.hovered = false;\n            if (this._pointerWasInRange) {\n                this.onLeave(point);\n                this._pointerWasInRange = false;\n            }\n        }\n    }\n\n    triggerChildrenPointerEvent(point: PointerPoint) {\n        if (this.pointerInRange(point)) {\n            let childrenPointerPoint = point.sub(this.position);\n            for (let child of this.children) {\n                child.triggerEvent(EventKeys.ON_POINTER_EVENT, childrenPointerPoint);\n            }\n        }\n    }\n\n    /**\n     * Checks if the pointer is in range of the element\n     * @param point The pointer point\n     */\n    pointerInRange(point: Point2D): boolean {\n        if (point.x >= this.position.x && point.x <= this.absWidth + this.position.x) {\n            if (point.y >= this.position.y && point.y <= this.absHeight + this.position.y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "export class Colors {\n    public static readonly black = \"#000000\";\n    public static readonly white = \"#ffffff\";\n    public static readonly pureRed = \"#ff0000\";\n    public static readonly pureGreen = \"#00ff00\";\n    public static readonly pureBlue = \"#0000ff\";\n    public static readonly pureYellow = \"#ffff00\";\n    public static readonly pureCyan = \"#00ffff\";\n    public static readonly pureMagenta = \"#ff00ff\";\n    public static readonly orange = \"#ff8000\";\n    public static readonly purple = \"#8000ff\";\n    public static readonly pink = \"#ff0080\";\n    public static readonly brown = \"#804000\";\n    public static readonly grey100 = \"#efefef\";\n    public static readonly grey200 = \"#a0a0a0\";\n    public static readonly grey300 = \"#808080\";\n    public static readonly grey400 = \"#606060\";\n    public static readonly grey500 = \"#404040\";\n    public static readonly grey600 = \"#202020\";\n    public static readonly grey700 = \"#000000\";\n    public static readonly blue100 = \"#a6d5ff\";\n    public static readonly blue200 = \"#7ec0ff\";\n    public static readonly blue300 = \"#57abff\";\n    public static readonly blue400 = \"#2e96ff\";\n    public static readonly blue500 = \"#0080ff\";\n    public static readonly blue600 = \"#0060cc\";\n    public static readonly blue700 = \"#004099\";\n    public static readonly green100 = \"#a6ffcc\";\n    public static readonly green200 = \"#7effa6\";\n    public static readonly green300 = \"#57ff80\";\n    public static readonly green400 = \"#2eff5a\";\n    public static readonly green500 = \"#00ff00\";\n    public static readonly green600 = \"#00cc00\";\n    public static readonly green700 = \"#009900\";\n    public static readonly red100 = \"#ffcccc\";\n    public static readonly red200 = \"#ff9999\";\n    public static readonly red300 = \"#ff6666\";\n    public static readonly red400 = \"#ff3333\";\n    public static readonly red500 = \"#ff0000\";\n    public static readonly red600 = \"#cc0000\";\n    public static readonly red700 = \"#990000\";\n    public static readonly yellow100 = \"#ffffcc\";\n    public static readonly yellow200 = \"#ffff99\";\n    public static readonly yellow300 = \"#ffff66\";\n    public static readonly yellow400 = \"#ffff33\";\n    public static readonly yellow500 = \"#ffff00\";\n    public static readonly yellow600 = \"#cccc00\";\n    public static readonly yellow700 = \"#999900\";\n    public static readonly cyan100 = \"#ccffff\";\n    public static readonly cyan200 = \"#99ffff\";\n    public static readonly cyan300 = \"#66ffff\";\n    public static readonly cyan400 = \"#33ffff\";\n    public static readonly cyan500 = \"#00ffff\";\n    public static readonly cyan600 = \"#00cccc\";\n    public static readonly cyan700 = \"#009999\";\n    public static readonly magenta100 = \"#ffccff\";\n    public static readonly magenta200 = \"#ff99ff\";\n    public static readonly magenta300 = \"#ff66ff\";\n    public static readonly magenta400 = \"#ff33ff\";\n    public static readonly magenta500 = \"#ff00ff\";\n    public static readonly magenta600 = \"#cc00cc\";\n    public static readonly magenta700 = \"#990099\";\n    public static readonly orange100 = \"#ffcc99\";\n    public static readonly orange200 = \"#ff9966\";\n    public static readonly orange300 = \"#ff9933\";\n    public static readonly orange400 = \"#ff9900\";\n    public static readonly orange500 = \"#ff8000\";\n    public static readonly orange600 = \"#cc6600\";\n    public static readonly orange700 = \"#994c00\";\n    public static readonly purple100 = \"#cc99ff\";\n    public static readonly purple200 = \"#9966ff\";\n    public static readonly purple300 = \"#9933ff\";\n    public static readonly purple400 = \"#9900ff\";\n    public static readonly purple500 = \"#8000ff\";\n    public static readonly purple600 = \"#6600cc\";\n    public static readonly purple700 = \"#4c0099\";\n    public static readonly pink100 = \"#ff99cc\";\n    public static readonly pink200 = \"#ff6699\";\n    public static readonly pink300 = \"#ff3399\";\n    public static readonly pink400 = \"#ff0099\";\n    public static readonly pink500 = \"#ff0080\";\n    public static readonly pink600 = \"#cc0066\";\n    public static readonly pink700 = \"#99004c\";\n    public static readonly brown100 = \"#cc9966\";\n    public static readonly brown200 = \"#996633\";\n    public static readonly brown300 = \"#994c00\";\n    public static readonly brown400 = \"#993300\";\n    public static readonly brown500 = \"#804000\";\n    public static readonly brown600 = \"#663300\";\n    public static readonly brown700 = \"#4c2600\";\n\n    public static readonly lightGray = \"#c0c0c0\";\n    public static readonly darkGray = \"#404040\";\n    public static readonly lightRed = \"#ff8080\";\n    public static readonly lightGreen = \"#80ff80\";\n    public static readonly lightBlue = \"#8080ff\";\n    public static readonly lightYellow = \"#ffff80\";\n    public static readonly lightCyan = \"#80ffff\";\n    public static readonly lightMagenta = \"#ff80ff\";\n    public static readonly darkRed = \"#800000\";\n    public static readonly darkGreen = \"#008000\";\n    public static readonly darkBlue = \"#000080\";\n    public static readonly darkYellow = \"#808000\";\n    public static readonly darkCyan = \"#008080\";\n    public static readonly darkMagenta = \"#800080\";\n    public static readonly transparent = \"rgba(0,0,0,0)\";\n    public static readonly transparentBlack = \"rgba(0,0,0,0.5)\";\n    public static readonly transparentWhite = \"rgba(255,255,255,0.5)\";\n    public static readonly transparentRed = \"rgba(255,0,0,0.5)\";\n    public static readonly transparentGreen = \"rgba(0,255,0,0.5)\";\n    public static readonly transparentBlue = \"rgba(0,0,255,0.5)\";\n    public static readonly transparentYellow = \"rgba(255,255,0,0.5)\";\n    public static readonly transparentCyan = \"rgba(0,255,255,0.5)\";\n    public static readonly transparentMagenta = \"rgba(255,0,255,0.5)\";\n    public static readonly transparentOrange = \"rgba(255,128,0,0.5)\";\n    public static readonly transparentPurple = \"rgba(128,0,255,0.5)\";\n    public static readonly transparentPink = \"rgba(255,0,128,0.5)\";\n}", "import {Point2D} from \"../../Datatypes/Point\";\n\nexport default class PhysicalPoint2D extends Point2D {\n    velocity: Point2D = new Point2D(0, 0);\n    // acceleration: Point2D = new Point2D(0, 0);\n    resistance: number = 0;\n    velocityScale: number = 0;\n\n    setVelocity(velocity: Point2D) {\n        this.velocity = velocity;\n        return this;\n    }\n\n    setResistance(resistance: number) {\n        this.resistance = resistance;\n        return this;\n    }\n\n    impulse(impulse: Point2D) {\n        this.velocity.offset(impulse);\n        this.velocityScale = 1;\n        return this;\n    }\n\n    update() {\n        if (this.velocityScale > 0) {\n            this.velocity = this.velocity.scale(this.velocityScale);\n            this.velocityScale -= this.resistance;\n        }\n        if (this.velocityScale < 0) {\n            this.velocityScale = 0;\n        }\n        if (this.velocityScale == 0) {\n            this.velocity.setXY(0, 0)\n        }\n        this.offset(this.velocity);\n    }\n\n}\n", "import PointerHandlerParentElement from \"../PointerHanderParentElement\";\nimport {Colors} from \"../../Constants/Colors\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Point2D} from \"../../Datatypes/Point\";\nimport {CubismElement} from \"../CubismElement\";\nimport PhysicalPoint2D from \"../../Physics/Physics2D/PhysicalPoint2D\";\n\nexport default class RecursiveRect extends PointerHandlerParentElement {\n    lastPoint: PointerPoint | null = null;\n    relativePosition: Point2D = new Point2D(200, 200);\n\n    frameCount: number = 0;\n\n    _position: PhysicalPoint2D = new PhysicalPoint2D(0, 0).setResistance(0.001);\n    get position(): PhysicalPoint2D {\n        if (this._cubism) {\n            this.c.setRedraw(true);\n        }\n\n        return this._position;\n    }\n\n    set position(point: PhysicalPoint2D) {\n        if (this._cubism) {\n            this.c.setRedraw(true);\n        }\n        // this.c.setRedraw(true);\n        this._position = point;\n    }\n\n    recursionCount: number = 0;\n    wiggleStrength: number = 0.1;\n\n    setRecursionCount(recursionCount: number) {\n        this.recursionCount = recursionCount;\n        return this;\n    }\n\n    wiggle() {\n        if (this.frameCount % 120 == 0) {\n            let range = this.wiggleStrength * Math.random();\n            this.position.impulse(new Point2D(range * (Math.random() - 0.5), range * (Math.random() - 0.5)));\n        }\n    }\n\n    setWiggleStrength(strength: number) {\n        this.wiggleStrength = strength;\n        return this;\n    }\n\n    setRelativePosition(point: Point2D) {\n        this.relativePosition = point;\n        return this;\n    }\n\n    draw() {\n        this.frameCount++;\n        this.c.translate(this.position);\n\n        this.position.update();\n        if (!this.pressed) {\n            this.wiggle();\n        }\n        if (this.pressed) {\n            this.frameCount = 0;\n        }\n\n        // this.wiggle();\n        this.c.setFillStyle(Colors.green100);\n        this.c.setStrokeWidth(2);\n        this.c.setStrokeStyle(Colors.green700);\n        let relaPos = this.position.sub(this.relativePosition);\n        let relaSpeed = 0.2;\n        let relaSize = 10;\n        this.c.drawRect(0, 0, this.width, this.height);\n        for (let i = 1; i < this.recursionCount + 1; i++) {\n            let relaSpeedI = relaSpeed * i;\n            let relaSizeI = relaSize * i;\n            this.c.translate(relaPos.scale(relaSpeedI));\n            this.c.drawRect(relaSizeI, relaSizeI, this.width - relaSizeI, this.height - relaSizeI);\n            this.c.restoreTranslate();\n        }\n        this.c.restoreTranslate();\n    }\n\n    onMove(point: PointerPoint) {\n        if (point.pressure > 0) {\n            if (!this.lastPoint) {\n                this.lastPoint = point.sub(this.position);\n            }\n            this.position.set(point.sub(this.lastPoint));\n        } else {\n            this.lastPoint = null;\n        }\n    }\n}\n", "import PointerHandlerParentElement from \"../PointerHanderParentElement\";\nimport {CubismElement} from \"../CubismElement\";\nimport {Colors} from \"../../Constants/Colors\";\nimport {EventKeys} from \"../../Constants/Constants\";\nimport {Cubism} from \"../../Cubism\";\n\nexport class ChangingRainbowBackground extends CubismElement{\n    frameCount: number = 0;\n\n    saturation:number = 70;\n    lightness: number = 90;\n    changingSpeed: number = 0.2;\n\n    setSaturation(s: number) {\n        if (s > 100) {\n            s = 100;\n        }\n        this.saturation = s;\n        return this;\n    }\n    setChangingSpeed(speed: number) {\n        this.changingSpeed = speed;\n        return this;\n    }\n    setLightness(l: number) {\n        if (l > 100) {\n            l = 100;\n        }\n        this.lightness = l;\n        return this;\n    }\n    draw() {\n        this.frameCount++;\n        this.c.translate(this.position);\n        let currHue = this.frameCount * this.changingSpeed % 360;\n        let currColor = `hsl(${currHue}, ${this.saturation}%, ${this.lightness}%)`;\n\n        this.c.setFillStyle(currColor);\n        this.c.setStrokeWidth(0);\n        this.c.setStrokeStyle(currColor);\n        this.c.drawRect(0, 0, this.absWidth, this.absHeight);\n        // super.draw();\n        this.c.restoreTranslate();\n    }\n}\n", "import {CubismOuterGlobal} from \"../Global/Outer/CubismOuterGlobal\";\n\nexport class StaticDemo {\n    private static _instance: StaticDemo;\n\n    private _demoFunctions: { [key: string]: DemoFunction } = {};\n\n    selector: HTMLSelectElement = document.getElementById(\"selector\") as HTMLSelectElement;\n    codeText: HTMLTextAreaElement = document.getElementById(\"codeText\") as HTMLTextAreaElement;\n\n    controlDiv: HTMLDivElement = document.getElementById(\"controlDiv\") as HTMLDivElement;\n\n    currDemoFunction: DemoFunction | null = null;\n\n    hotReloadCheckbox: HTMLInputElement | null = null;\n    updateButton: HTMLButtonElement | null = null;\n\n    // currentDemoName: string | null = null;\n\n    private constructor() {\n        this.initSelector();\n        this.initCodeText();\n        this.resetControlsDiv();\n    }\n\n    initControlDiv() {\n        this.initHotReload();\n        this.initUpdateButton();\n    }\n\n    resetControlsDiv() {\n        this.controlDiv.innerHTML = \"\";\n        this.initControlDiv();\n    }\n\n    initHotReload() {\n        let hotReload = document.createElement(\"input\");\n        hotReload.type = \"checkbox\";\n        hotReload.id = \"hotReloadCheckbox\";\n        hotReload.checked = true;\n        this.hotReloadCheckbox = hotReload;\n\n        let hotReloadLabel = document.createElement(\"label\");\n        hotReloadLabel.htmlFor = \"hotReloadCheckbox\";\n        hotReloadLabel.innerHTML = \"Hot Reload\";\n        hotReloadLabel.style.marginRight = \"10px\";\n\n        this.controlDiv.appendChild(hotReload);\n        this.controlDiv.appendChild(hotReloadLabel);\n    }\n\n    initCodeText() {\n        this.codeText.onchange = this.onCodeTextChange.bind(this);\n        this.codeText.oninput = this.onCodeTextInput.bind(this);\n    }\n\n    initUpdateButton() {\n        let updateButton = document.createElement(\"button\");\n        updateButton.innerHTML = \"Reload\";\n        updateButton.onclick = this.updateButtonOnClick.bind(this);\n        this.updateButton = updateButton;\n        this.controlDiv.appendChild(updateButton);\n    }\n\n    updateButtonOnClick() {\n        // this.updateCubism();\n        this.updateCurrDemoFunction();\n    }\n\n    updateCurrDemoFunction() {\n        console.log(\"updateCurrDemoFunction\");\n        CubismOuterGlobal.getCubismInstance(\"mainCanvas\").destroy();\n        let currName = this.selector.value;\n        this._demoFunctions[currName].setFunctionThroughFormattedString(this.codeText.value);\n        this.setCurrentDemoCode(this.selector.value);\n        this.resetControlsDiv();\n    }\n\n\n    onCodeTextInput() {\n        // console.log(\"code text input\");\n        if (this.hotReloadCheckbox && this.hotReloadCheckbox.checked) {\n            this.updateCurrDemoFunction();\n        }\n    }\n\n    onCodeTextChange() {\n    }\n\n\n    initSelector() {\n        this.selector.onchange = this.onSelectorChange.bind(this);\n        this.selector.onload = this.onSelectorChange.bind(this);\n    }\n\n    setCurrentDemoCode(name: string) {\n        this.codeText.value = this._demoFunctions[name].toString();\n        this.selector.value = name;\n\n        this.currDemoFunction = this._demoFunctions[name];\n\n        this.runCurrentDemo();\n    }\n\n    runCurrentDemo() {\n        if (this.currDemoFunction) {\n            this.currDemoFunction.run();\n        }\n    }\n\n    /**\n     * Add a demo function to the dict of demo functions\n     * @param name\n     * @param func\n     */\n    addDemoFunction(name: string, func: Function) {\n        let option = document.createElement(\"option\");\n        option.text = name;\n        this.selector.add(option);\n\n        this._demoFunctions[name] = new DemoFunction(func);\n        this.setCurrentDemoCode(name);\n    }\n\n\n    onSelectorChange() {\n        let selected = this.selector.options[this.selector.selectedIndex].text;\n        console.log(`selected: ${selected}`);\n        this.setCurrentDemoCode(selected);\n        this.updateCurrDemoFunction();\n    }\n\n    createFunctionFromString(s: string) {\n        return new Function(s) as () => void;\n    }\n\n    static get i() {\n        if (!StaticDemo._instance) {\n            StaticDemo._instance = new StaticDemo();\n        }\n        return StaticDemo._instance;\n    }\n}\n\nclass DemoFunction {\n    func: Function;\n    funcName: string;\n\n\n    constructor(func: Function) {\n        this.func = func;\n        this.funcName = func.name;\n    }\n\n    toString() {\n        return this.functionToFormattedString(this.funcName, this.func);\n    }\n\n    functionToFormattedString(funcName: string, func: Function) {\n        let s = func.toString();\n\n\n        // Remove the first and last line\n        s = s.substring(s.indexOf(\"{\") + 1, s.lastIndexOf(\"}\"));\n        // Add a new line after each object\n        s = s.replace(/;/g, \";\\n\");\n\n        // Remove empty line at the beginning\n        s = s.replace(/^\\s*\\n/gm, \"\");\n        // Remove empty line at the end\n        s = s.replace(/\\n\\s*$/gm, \"\");\n\n        let leadingSpacesCount = 0;\n        if (s.length > 0) {\n            while (s[leadingSpacesCount] === \" \") {\n                leadingSpacesCount++;\n            }\n        }\n\n        // // Remove leading spaces\n        let p = `^ {${leadingSpacesCount}}`;\n        s = s.replace(new RegExp(p, \"gm\"), \"\");\n\n        let lines = s.split(\"\\n\");\n\n        let newString = \"\";\n        for (let i = 0; i < lines.length; i++) {\n            let line = lines[i];\n            if (i == 0) {\n                newString += line;\n            } else {\n                let currLeadingSpacesCount = 0;\n                while (line[currLeadingSpacesCount] === \" \") {\n                    currLeadingSpacesCount++;\n                }\n\n                if (currLeadingSpacesCount ===0 && line.length > 0 && !(line[0] === \"}\" || line[0] === \")\")) {\n                    newString += `\\n`;\n                }\n\n                let spaces = new Array(currLeadingSpacesCount + 5).join(\" \");\n                // console.log(`spaces: [${spaces}]`);\n                // newString += \"\\n\" + line;\n                // Replace all spaces with 5 spaces\n\n                let lineToAppend = line.replace(/\\)\\./gm, `)\\n${spaces}.`);\n                newString += \"\\n\" + lineToAppend;\n            }\n        }\n\n        return newString;\n    }\n\n    setFunction(func: Function) {\n        this.func = func;\n    }\n\n    setFunctionThroughFormattedString(s: string) {\n        this.func = new Function(s);\n    }\n\n    toFunction(): Function {\n        return this.func;\n    }\n\n    run() {\n        this.func();\n    }\n}\n", "import {StaticDemo} from \"./StaticDemo\";\n\n/**\n * Decorator for demo functions\n * adds the function to the StaticDemo instance\n */\nexport function demoFunction() {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        let demo = StaticDemo.i;\n        let currFunction = target[propertyKey];\n        demo.addDemoFunction(propertyKey, currFunction);\n    };\n}\n", "import {Cubism} from \"../Cubism\";\nimport {initConsole} from \"../Debug/DebugConsole\";\nimport PointerHandlerParentElement from \"../Elements/PointerHanderParentElement\";\nimport RecursiveRect from \"../Elements/Fancy/RecursiveRect\";\nimport {ChangingRainbowBackground} from \"../Elements/Fancy/ChangingRainbowBackground\";\nimport {Point2D} from \"../Datatypes/Point\";\nimport {demoFunction} from \"./DemoDecorators\";\nimport {EventKeys} from \"../Constants/EventKeys\";\nimport SizeKeys from \"../Constants/SizeKeys\";\n\n\nconsole.log(\"loading Demo.ts\");\n\nclass DemoFunctions {\n    @demoFunction()\n    testFunction() {\n        console.log(\"demoFunction\");\n        console.log();\n    }\n\n    @demoFunction()\n    staticRecursiveRect() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new PointerHandlerParentElement(\n                null,\n                new ChangingRainbowBackground()\n                    .setSizeFromXY(SizeKeys\n                        .MATCH_PARENT, SizeKeys.MATCH_PARENT)\n                    .setLightness(70).setSaturation(80)\n                    .setChangingSpeed(0.1)\n                ,\n                new RecursiveRect()\n                    .setWiggleStrength(2)\n                    .setSizeFromXY(200, 200)\n                    .setPosFromXY(100, 100)\n                    .setRelativePosition(new Point2D(100, 100))\n                    .setRecursionCount(20)\n            )\n        )\n    }\n\n    @demoFunction()\n    animatedRecursiveRect() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new PointerHandlerParentElement(\n                null,\n                new ChangingRainbowBackground()\n                    .setSizeFromXY(SizeKeys.MATCH_PARENT, SizeKeys.MATCH_PARENT)\n                    .setLightness(70).setSaturation(80)\n                    .setChangingSpeed(0.1)\n                ,\n                new RecursiveRect()\n                    .setWiggleStrength(2)\n                    .setSizeFromXY(200, 200)\n                    .setPosFromXY(100, 100)\n                    .setRelativePosition(new Point2D(100, 100))\n                    .setRecursionCount(10)\n            ).setId(\"parent\")\n        )\n\n\n        app.eventSystem.registerEvent(EventKeys.FPS_UPDATE, (fps: number) => {\n            if (document.getElementById(\"fps\") === null) {\n                let fpsCounter = document.createElement(\"div\");\n                fpsCounter.id = \"fps\";\n                document.getElementById(\"controlDiv\")?.appendChild(fpsCounter);\n            }\n            document.getElementById(\"fps\")!.innerHTML = \"FPS: \" + fps;\n            //\n            // StaticDemo.i.controlDiv.appendChild(fpsCounter);\n            // fpsCounter.innerText = `FPS: ${fps}`;\n            console.log(fps);\n        });\n        app.initializer.initializeAlwaysRedraw(); // Redraw every frame, by default it only redraws when the elements change\n        app.initializer.initializeFPSCounter(); // Show FPS\n    }\n}\n\n\nfunction main() {\n    initConsole();\n}\n\nmain();\n"],
  "mappings": "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",
  "names": []
}
