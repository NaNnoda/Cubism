{
  "version": 3,
  "sources": ["src/Datatypes/TransformMatrix2D.ts", "src/State.ts", "src/Constants/Constants.ts", "src/CubismPart.ts", "src/CanvasDrawer.ts", "src/Global/Inter/CubismEventSystem.ts", "src/Datatypes/Point.ts", "src/Datatypes/PointerPoint.ts", "src/Global/Outer/CubismOuterGlobal.ts", "src/CubismInitializer.ts", "src/CubismElementManger.ts", "src/Cubism.ts", "src/Elements/CubismElement.ts", "src/Elements/InteractiveElement.ts", "src/Elements/PointerHandleableElement.ts", "src/Elements/Layouts/PointerHandleableLayout.ts", "src/Elements/Layouts/LinearLayout.ts", "src/Elements/Layouts/VerticalLayout.ts", "src/Theme/Colors.ts", "src/Theme/Theme.ts", "src/Elements/ThemedElement.ts", "src/Elements/ButtonElement.ts", "src/Elements/DraggableRect.ts", "src/Elements/Layouts/HorizontalLayout.ts", "src/CubismBuilder.ts", "src/Index.ts"],
  "sourcesContent": ["/**\n * A class representing a 2D transformation matrix.\n */\nexport class TransformMatrix2D {\n    arr: number[][] = [];\n\n    /**\n     * Creates a new 2D transform matrix.\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\n     * @param m12 Vertical skewing.\n     * @param m21 Horizontal skewing.\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\n     * @param dx  Horizontal translation (moving).\n     * @param dy Vertical translation (moving).\n     */\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\n        this.arr = [\n            [m11, m12, dx],\n            [m21, m22, dy],\n            [0, 0, 1]\n        ];\n    }\n\n    get m11(): number {\n        return this.arr[0][0];\n    }\n\n    set m11(value: number) {\n        this.arr[0][0] = value;\n    }\n\n    get m12(): number {\n        return this.arr[0][1];\n    }\n\n    set m12(value: number) {\n        this.arr[0][1] = value;\n    }\n\n    get m21(): number {\n        return this.arr[1][0];\n    }\n\n    set m21(value: number) {\n        this.arr[1][0] = value;\n    }\n\n    get m22(): number {\n        return this.arr[1][1];\n    }\n\n    set m22(value: number) {\n        this.arr[1][1] = value;\n    }\n\n    get dx(): number {\n        return this.arr[0][2];\n    }\n\n    set dx(value: number) {\n        this.arr[0][2] = value;\n    }\n\n    get dy(): number {\n        return this.arr[1][2];\n    }\n\n    set dy(value: number) {\n        this.arr[1][2] = value;\n    }\n\n\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\n    }\n\n    get(x: number, y: number): number {\n        return this.arr[x][y];\n    }\n\n    set(x: number, y: number, value: number) {\n        // console.log(`Setting ${x}, ${y} to ${value}`);\n        this.arr[x][y] = value;\n    }\n\n    static identity(): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\n    }\n\n    static zero(): TransformMatrix2D {\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\n    }\n\n    static translation(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\n    }\n\n    static rotation(angle: number): TransformMatrix2D {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\n    }\n\n    static scale(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\n    }\n\n    clone(): TransformMatrix2D {\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\n    }\n\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\n        let newMatrix = TransformMatrix2D.zero();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let dotProduct = 0;\n                for (let k = 0; k < 3; k++) {\n                    dotProduct += this.get(i, k) * other.get(k, j);\n                }\n                newMatrix.set(i, j, dotProduct);\n            }\n        }\n        return newMatrix;\n    }\n\n    translate(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.translation(x, y));\n    }\n\n    rotate(angle: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.rotation(angle));\n    }\n\n    scale(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.scale(x, y));\n    }\n\n    toString(): string {\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\n    }\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {TransformMatrix2D} from \"./Datatypes/TransformMatrix2D\";\n\n/**\n * The state of the canvas\n */\nexport class CubismCanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n    }\n\n    private translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\n\n    set translate(offset: Point2D) {\n        let translateMatrix = this.translateMatrix.translate(offset.x, offset.y);\n        this.translates.push(translateMatrix);\n        this.setCtxTransform(translateMatrix);\n    }\n\n    setCtxTransform(t: TransformMatrix2D) {\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\n    }\n\n    restoreTranslate() {\n        let lastTranslate = this.popTranslate();\n        this.setCtxTransform(lastTranslate);\n    }\n\n    get translateMatrix(): TransformMatrix2D {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate(): TransformMatrix2D {\n        if (this.translates.length > 1) {\n            // console.log(\"pop translate\");\n            return this.translates.pop() as TransformMatrix2D;\n        }\n        return this.translates[0];\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "export class Values{\n\n}\nexport class LayoutValues{\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}\nexport class Orientation{\n    public static readonly HORIZONTAL = 1;\n    public static readonly VERTICAL = 0;\n}\nexport class Alignment{\n    public static readonly START = 0;\n    public static readonly END = 1;\n    public static readonly CENTER = 2;\n    public static readonly STRETCH = 3;\n}\nexport class Direction{\n    public static readonly LEFT = 0;\n    public static readonly RIGHT = 1;\n    public static readonly UP = 2;\n    public static readonly DOWN = 3;\n    public static readonly START = 4;\n    public static readonly END = 5;\n}\nexport class Axis{\n    public static readonly X = 0;\n    public static readonly Y = 1;\n}\nexport class PointerType{\n    public static readonly MOUSE = 0;\n    public static readonly TOUCH = 1;\n    public static readonly PEN = 2;\n}\nexport class GEventKeys{\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n    public static readonly ON_ENTER = \"onEnter\";\n    public static readonly ON_LEAVE = \"onLeave\";\n\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n}", "import IHasCubism from \"./Interface/IGlobalHandler\";\nimport {Cubism} from \"./Cubism\";\n\nexport default class CubismPart implements IHasCubism {\n    _cubism: Cubism | null = null;\n    get cubism(): Cubism {\n        return this.getCubism();\n    }\n    /**\n     * It seems like setter has some problems with overriding\n     * @param cubism\n     */\n    set cubism(cubism: Cubism) {\n        this.setCubism(cubism);\n    }\n\n    /**\n     * Called by setter\n     * @param cubism\n     */\n    setCubism(cubism: Cubism) {\n        this._cubism = cubism;\n    }\n\n    /**\n     * Called by getter\n     */\n    getCubism(): Cubism {\n        if (this._cubism === null) {\n            throw new Error(`Cubism is not set for ${this.className}`);\n        }\n        return this._cubism as Cubism;\n    }\n\n    get className(): string {\n        return this.constructor.name;\n    }\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {CubismCanvasState} from \"./State\";\nimport {GEventKeys} from \"./Constants/Constants\";\nimport CubismPart from \"./CubismPart\";\nimport {Cubism} from \"./Cubism\";\n\n/**\n * Adaptor class for the canvas\n * with the ability to draw on it\n * and handle events\n */\nexport class CanvasDrawer extends CubismPart {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    get eventSystem() {\n        return this.cubism.eventSystem;\n    }\n\n    state: CubismCanvasState; // the state of the canvas\n\n    /**\n     * Constructor of the CanvasDrawer\n     * @param canvas the canvas to draw on\n     */\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.state = new CubismCanvasState(canvas, this.ctx);\n    }\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n\n        this.registerFrameUpdate();\n    }\n    get width() {\n        return this.canvas.width;\n    }\n\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    /**\n     * Register the frame update event\n     * @private\n     */\n    private registerFrameUpdate() {\n        console.log(\"Registering frame update\");\n        this.eventSystem.registerGlobalEvent(GEventKeys.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    /**\n     * Things to do on every frame update\n     * @private\n     */\n    private frameUpdate() {\n        // console.log(\"Frame update\");\n        if (this.state.needsRedraw) {\n            this.triggerRedraw();\n            this.state.needsRedraw = false;\n        }\n    }\n\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Set the fill style(color) of the canvas\n     * @param style the style to set\n     */\n    setFillStyle(style: string) {\n        this.ctx.fillStyle = style;\n    }\n\n    /**\n     * Set the stroke style(color) of the canvas\n     * @param style the style to set\n     */\n    setStrokeStyle(style: string) {\n        this.ctx.strokeStyle = style;\n    }\n\n    /**\n     * Set the line width of the canvas\n     * @param width\n     */\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n    }\n\n    /**\n     * Translate the canvas\n     * @param offset\n     */\n    translate(offset: Point2D) {\n        this.state.translate = offset;\n    }\n\n    /**\n     * Restore translation and rotation to previous state\n     */\n    restoreTranslate() {\n        this.state.restoreTranslate();\n    }\n\n    /**\n     * Draw text on the canvas\n     * @param text the text to draw\n     * @param x the x position of the text\n     * @param y the y position of the text\n     */\n    fillText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    /**\n     * Draw a line with two Point2Ds\n     * @param begin the beginning of the line\n     * @param end the end of the line\n     */\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    /**\n     * Draw a line with four numbers\n     * @param beginX the x position of the beginning of the line\n     * @param beginY the y position of the beginning of the line\n     * @param endX the x position of the end of the line\n     * @param endY the y position of the end of the line\n     */\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRectWithPoints(p1: Point2D, p2: Point2D | null = null) {\n        if (p2 === null) {\n            this.drawRect(0, 0, p1.x, p1.y);\n        } else {\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\n        }\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    /**\n     * Draw an HTML Canvas Path on the canvas\n     * @param path\n     */\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    /**\n     * Close the drawing path\n     */\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    /**\n     * Set the need redraw flag\n     * @param redraw\n     */\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    /**\n     * Trigger a redraw event\n     * Seems more responsive than setRedraw()\n     */\n    triggerRedraw() {\n        this.eventSystem.triggerGlobalEvent(GEventKeys.REDRAW);\n    }\n}\n", "import IHasCubism from \"../../Interface/IGlobalHandler\";\nimport CubismPart from \"../../CubismPart\";\n\n/**\n * System that handles the registration and trigger of global events\n */\nexport class CubismEventSystem extends CubismPart{\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    registerGlobalEvent(event: string, callback: Function): void {\n        this.getEvent(event).push(callback);\n    }\n\n    unregisterGlobalEvent(event: string, callback: Function): void {\n        this._globalEventListeners[event].splice(this._globalEventListeners[event].indexOf(callback), 1);\n    }\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n        }\n        return this._globalEventListeners[event];\n    }\n\n    triggerGlobalEvent(event: string, ...args: any[]): void {\n        this.getEvent(event).forEach((callback) => {\n            callback(...args);\n        });\n    }\n}", "/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n\n    get x() {\n        return this.arr[0];\n    }\n\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n\n    get y() {\n        return this.arr[1];\n    }\n\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n\n\n    /**\n     * Offset the point by the given amount.\n     * @param offset\n     */\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n        return this;\n    }\n\n    /**\n     * Offset the point by the negative given amount.\n     * @param offset\n     */\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n        return this;\n    }\n\n    add(other: Point2D): Point2D {\n        return this.clone().offset(other);\n    }\n\n    sub(other: Point2D): Point2D {\n        return this.clone().nOffset(other);\n    }\n\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "import {Point2D} from \"./Point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n}", "import {CubismEventSystem} from \"../Inter/CubismEventSystem\";\nimport {Cubism} from \"../../Cubism\";\n\n/**\n * The global manager for Cubism outside the canvas\n * This is a singleton class\n */\nexport class CubismOuterGlobal {\n    private static _instance: CubismOuterGlobal;\n\n    private constructor() {\n    }\n\n    public static get instance(): CubismOuterGlobal {\n        if (!CubismOuterGlobal._instance) {\n            CubismOuterGlobal._instance = new CubismOuterGlobal();\n        }\n        return CubismOuterGlobal._instance;\n    }\n\n    private _cubismInstances: { [key: string]: Cubism } = {};\n\n    public static getCubismInstance(key: string): Cubism {\n        return CubismOuterGlobal.instance._cubismInstances[key];\n    }\n\n    public static registerCubismInstance(key: string, app: Cubism) {\n        if (CubismOuterGlobal.instance._cubismInstances[key] === undefined) {\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n        } else {\n            console.log(\"Replacing cubism instance with key \" + key);\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n            // throw new Error(\"Cubism app with key [\" + key + \"] already exists\");\n        }\n    }\n}", "import {GEventKeys} from \"./Constants/Constants\";\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\nimport IGlobalHandler from \"./Interface/IGlobalHandler\";\nimport IHasCubism from \"./Interface/IGlobalHandler\";\nimport CubismPart from \"./CubismPart\";\n\nexport default class CubismInitializer extends CubismPart {\n    get eventSystem(): CubismEventSystem {\n        return this.cubism.eventSystem;\n    }\n    initializeFixedUpdate(timeInterval: number = 1000 / 60) {\n        setInterval(this.doFixUpdate.bind(this), timeInterval);\n\n        return this;\n    }\n\n    doFixUpdate() {\n        this.eventSystem.triggerGlobalEvent(GEventKeys.FIX_UPDATE);\n    }\n\n    public initializeFrameUpdate() {\n        this.eventSystem.triggerGlobalEvent(GEventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n\n        return this;\n    }\n\n    doFrameUpdate() {\n        this.eventSystem.triggerGlobalEvent(GEventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n    }\n}", "import {CubismElement} from \"./Elements/CubismElement\";\n\nexport default class CubismElementManger{\n\n    private _elementsWithId: { [key: string]: CubismElement } = {};\n\n    private _elementsWithClass: { [key: string]: CubismElement[] } = {};\n\n    public registerElementId(id: string, element: CubismElement) {\n        console.log(\"registering element with id \" + id);\n        if (this._elementsWithId[id] === undefined) {\n            this._elementsWithId[id] = element;\n        } else {\n            throw new Error(\"Element with that id already exists\");\n        }\n    }\n\n    public getElementById(id: string): CubismElement {\n        return this._elementsWithId[id];\n    }\n\n    public removeElementWithId(id: string) {\n        delete this._elementsWithId[id];\n    }\n\n    public registerElementClass(className: string, element: CubismElement) {\n        if (this._elementsWithClass[className] === undefined) {\n            this._elementsWithClass[className] = [];\n        }\n        this._elementsWithClass[className].push(element);\n    }\n\n    public getElementsByClass(className: string): CubismElement[] {\n        return this._elementsWithClass[className];\n    }\n\n    public removeElementWithClass(className: string, element: CubismElement) {\n        this._elementsWithClass[className].splice(this._elementsWithClass[className].indexOf(element), 1);\n    }\n\n    public removeClass(className: string) {\n        delete this._elementsWithClass[className];\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\nimport {GEventKeys} from \"./Constants/Constants\";\nimport {Point2D} from \"./Datatypes/Point\";\nimport {PointerHandleableElement} from \"./Elements/PointerHandleableElement\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\nimport {CubismOuterGlobal} from \"./Global/Outer/CubismOuterGlobal\";\nimport IHasCubism from \"./Interface/IGlobalHandler\";\nimport CubismGlobalHandler from \"./CubismPart\";\nimport CubismPart from \"./CubismPart\";\nimport CubismInitializer from \"./CubismInitializer\";\nimport CubismElementManger from \"./CubismElementManger\";\n\n/**\n * Entry point of the application\n * Initializes different parts of the application\n */\nexport class Cubism extends CubismElementManger{\n    _root: PointerHandleableElement | null = null;\n    readonly canvas: HTMLCanvasElement;\n    readonly cubismId: string;\n    readonly canvasDrawer: CanvasDrawer;\n    readonly eventSystem: CubismEventSystem;\n\n    _initializer: CubismInitializer;\n    get initializer() {\n        return this._initializer;\n    }\n\n\n    get rootElement(): PointerHandleableElement {\n        if (this._root === null) {\n            throw new Error(\"Root is not set\");\n        }\n        return this._root;\n    }\n\n    set rootElement(root) {\n\n        this.initParts(root);\n        this._root = root;\n    }\n\n\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.eventSystem = new CubismEventSystem();\n        this.canvasDrawer = new CanvasDrawer(canvas);\n        this._initializer = new CubismInitializer();\n\n        this.initParts(this.canvasDrawer, this.eventSystem, this.initializer);\n        this.registerRedraw();\n        this.registerPointerEvents();\n\n\n        if (canvas.id === null || canvas.id === undefined || canvas.id === \"\") {\n            throw new Error(\"Canvas must have an id\");\n        }\n        this.cubismId = canvas.id;\n\n        CubismOuterGlobal.registerCubismInstance(this.cubismId, this);\n    }\n\n    initParts(...handlers: CubismPart[]) {\n        handlers.forEach(handler => {\n                handler.cubism = this;\n            console.log(\"Init \"+handler.constructor.name);\n            }\n        );\n    }\n\n    /**\n     * Register pointer events\n     */\n    registerPointerEvents() {\n        // on move\n        this.canvas.onpointermove = (e) => {\n            this.eventSystem.triggerGlobalEvent(GEventKeys.ON_MOVE, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.eventSystem.registerGlobalEvent(GEventKeys.ON_MOVE, (point: PointerPoint) => {\n            this.rootElement.triggerOnMove(point);\n        });\n        // on down\n        this.canvas.onpointerdown = (e) => {\n            this.eventSystem.triggerGlobalEvent(GEventKeys.ON_DOWN, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.eventSystem.registerGlobalEvent(GEventKeys.ON_DOWN, (point: PointerPoint) => {\n            this.rootElement.triggerOnDown(point);\n        });\n        // on up\n        this.canvas.onpointerup = (e) => {\n            this.eventSystem.triggerGlobalEvent(GEventKeys.ON_UP, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.eventSystem.registerGlobalEvent(GEventKeys.ON_UP, (point: PointerPoint) => {\n            this.rootElement.triggerOnUp(point);\n        });\n    }\n\n    registerRedraw() {\n        this.eventSystem.registerGlobalEvent(GEventKeys.REDRAW, this.redraw.bind(this));\n    }\n\n    registerOnMove() {\n        this.eventSystem.registerGlobalEvent(GEventKeys.ON_MOVE, this.registerOnMove.bind(this));\n    }\n\n    /**\n     * Create a new Cubism object from a canvas object\n     * @param canvas the canvas to draw on\n     */\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    /**\n     * Create a new Cubism object from a canvas id\n     * @param id the id of the canvas\n     */\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: PointerHandleableElement) {\n        this.rootElement = root;\n        this.initRootElement();\n        this.canvasDrawer.setRedraw(true);\n        this.initializer.initializeFrameUpdate();\n    }\n\n    private initRootElement() {\n        console.log(\"init root element\");\n        this.rootElement.initElement(\n            new Point2D(this.canvas.width, this.canvas.height)\n        );\n    }\n\n    /**\n     * Redraw the whole canvas from the root element\n     */\n    redraw() {\n        this.canvasDrawer.clear();\n        if (this.rootElement) {\n            this.rootElement.render();\n        }\n    }\n}\n\n", "import {Point2D} from \"../Datatypes/Point\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {LayoutValues} from \"../Constants/Constants\";\nimport CubismPart from \"../CubismPart\";\nimport {Cubism} from \"../Cubism\";\n\n/**\n * Base class for all elements that can be rendered on the canvas\n * With size, position, and global events\n */\nexport class CubismElement extends CubismPart implements IRenderable {\n    _position: Point2D;\n    _size: Point2D;\n    _absSize: Point2D; // Absolute size is the size of the element\n\n    get c(): CanvasDrawer {\n        if (!this.cubism) {\n            console.log(this.cubism)\n            throw new Error(\"Cubism is not set for \" + this);\n        }\n        return this.cubism.canvasDrawer;\n    }\n\n    elementId: string | null = null;\n    needsResize: boolean = true;\n\n    constructor(elementId: string | null = null) {\n        super();\n        this._position = new Point2D(0, 0);\n        this._size = new Point2D(LayoutValues.MATCH_PARENT, LayoutValues.MATCH_PARENT);\n        this._absSize = new Point2D(0, 0);\n        // Optional id\n        this.elementId = elementId;\n    }\n\n    // set needsResize(needsResize: boolean) {\n    //     this._needsResize = needsResize;\n    //     if (this._needsResize) {\n    //         this.c.setRedraw(true);\n    //     }\n    // }\n\n    setId(id: string): this {\n        this.elementId = id;\n        return this;\n    }\n\n    setCubism(cubism: Cubism): void {\n        super.setCubism(cubism);\n        if (this.elementId !== null) {\n            this.cubism.registerElementId(this.elementId, this);\n        }\n    }\n\n    set position(pos: Point2D) {\n        this._position = pos;\n        this.c.setRedraw(true);\n    }\n\n\n    get position(): Point2D {\n        return this._position;\n    }\n\n    get size(): Point2D {\n        return this._size;\n    }\n\n    set size(size: Point2D) {\n        this._size = size;\n        this.needsResize = true;\n    }\n\n\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c.setRedraw(true);\n    }\n\n    initElement(parentSize: Point2D): void {\n        this.updateShape(parentSize.x, parentSize.y);\n    }\n\n    updateShape(x: number, y: number): void {\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n\n    get height(): number {\n        return this.size.y;\n    }\n\n    set height(y: number) {\n        this.size.y = y;\n        this.needsResize = true;\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.size.x = x;\n        this.needsResize = true;\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setWidth(width: number) {\n        this.width = width;\n        this.needsResize = true;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D): this {\n        this.position = pos;\n        return this;\n    }\n\n    setPosFromXY(x: number, y: number): this {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n    render(): void {\n        if (this.c === null) {\n            throw new Error(\"Drawer is null\");\n        }\n    }\n\n    toString(): string {\n        return `${this.elementId ? this.elementId : \"NO ID\"}: ${this.className} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n}\n", "import {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nimport {CubismElement} from \"./CubismElement\";\n\nexport class InteractiveElement extends CubismElement {\n    private events: { [key: string]: Function[] } = {};\n\n    pushOn(event: string, ...callbacks: Function[]) {\n        if (this.events[event] === undefined) {\n            this.events[event] = [];\n        }\n        this.events[event].push(...callbacks);\n        return this\n    }\n\n    getOn(event: string): Function[] {\n        return this.events[event];\n    }\n\n    removeOn(event: string, callback: Function): void {\n        this.events[event].splice(this.events[event].indexOf(callback), 1);\n    }\n}", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {GEventKeys, Values} from \"../Constants/Constants\";\n\nexport class PointerHandleableElement extends InteractiveElement {\n    _pointerWasNotInRange: boolean = true;\n    _hovered: boolean = false;\n    _pressed: boolean = false;\n\n    get pressed(): boolean {\n        return this._pressed;\n    }\n\n    set pressed(value: boolean) {\n        this._pressed = value;\n    }\n\n    get hovered(): boolean {\n        return this._hovered;\n    }\n\n    set hovered(value: boolean) {\n        this._hovered = value;\n    }\n\n    constructor() {\n        super();\n        this.pushOnParentMove((point: PointerPoint) => {\n            this.onParentMove(point);\n        });\n        this.pushOnParentDown((point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(GEventKeys.ON_MOVE, (point: PointerPoint) => {\n            this.onMove(point);\n        });\n        this.pushOn(GEventKeys.ON_PARENT_DOWN, (point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(GEventKeys.ON_DOWN, (point: PointerPoint) => {\n            this.onDown(point);\n        });\n        this.pushOn(GEventKeys.ON_PARENT_UP, (point: PointerPoint) => {\n            this.onParentUp(point);\n        });\n        this.pushOn(GEventKeys.ON_UP, (point: PointerPoint) => {\n            this.onUp(point);\n        });\n        this.pushOn(GEventKeys.ON_ENTER, (point: PointerPoint) => {\n            this.onEnter(point);\n        });\n        this.pushOn(GEventKeys.ON_LEAVE, (point: PointerPoint) => {\n            this.onLeave(point);\n        });\n    }\n\n    public triggerOnParentDown(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentDown(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnDown(point);\n        }\n    }\n\n    public triggerOnParentUp(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentUp(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnUp(point);\n        }\n    }\n\n    public triggerOnUp(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onUp(point: PointerPoint): void {\n        this.pressed = false;\n    }\n\n    public triggerOnDown(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onDown(point: PointerPoint): void {\n        this.pressed = true;\n    }\n\n    public triggerOnMove(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onMove(point: PointerPoint): void {\n\n    }\n\n    public pushOnMove(...callbacks: Function[]) {\n        this.pushOn(GEventKeys.ON_MOVE, ...callbacks);\n        return this;\n    }\n    pushOnUp(...callbacks: Function[]) {\n        this.pushOn(GEventKeys.ON_UP, ...callbacks);\n        return this;\n    }\n\n    public removeOnMove(callback: Function): void {\n        this.removeOn(GEventKeys.ON_MOVE, callback);\n    }\n\n    public onParentMove(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnMove(point);\n        }\n        if (this.inRange(point) && this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = false;\n            this.triggerOnEnter(point);\n\n        }\n        if (!this.inRange(point) && !this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = true;\n            this.triggerOnLeave(point);\n        }\n    }\n\n    pushOnParentMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(GEventKeys.ON_PARENT_MOVE, ...callbacks);\n        return this;\n    }\n\n    triggerOnParentMove(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    inRange(point: PointerPoint): boolean {\n        return point.x >= this.position.x &&\n            point.x <= this.position.x + this.absWidth &&\n            point.y >= this.position.y &&\n            point.y <= this.position.y + this.absHeight;\n    }\n\n    public onEnter(point: PointerPoint): void {\n        this.hovered = true;\n    }\n\n    triggerOnEnter(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_ENTER);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    private pushOnParentDown(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(GEventKeys.ON_PARENT_DOWN, ...callbacks);\n        return this;\n    }\n\n    triggerOnLeave(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_LEAVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    onLeave(point: PointerPoint): void {\n        this.hovered = false;\n    }\n}", "import {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {LayoutValues} from \"../../Constants/Constants\";\nimport {PointerHandleableElement} from \"../PointerHandleableElement\";\nimport {Cubism} from \"../../Cubism\";\n\nexport class PointerHandleableLayout extends PointerHandleableElement {\n    private _children: PointerHandleableElement[] = [];\n\n    constructor(...children: PointerHandleableElement[]) {\n        super();\n        this._children.push(...children);\n    }\n\n    updateShape(x: number, y: number) {\n        super.updateShape(x, y);\n        this.updateChildrenShape()\n    }\n\n    updateChildrenShape() {\n        this.updateChildrenSize();\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenSize() {\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === LayoutValues.MATCH_PARENT) {\n                x = this.absWidth;\n            }\n            if (y === LayoutValues.MATCH_PARENT) {\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.updateShape(x, y);\n        }\n    }\n\n    updateChildrenPosition() {\n\n    }\n\n    get children(): PointerHandleableElement[] {\n        return this._children;\n    }\n\n    set children(children: PointerHandleableElement[]) {\n        this._children = children;\n    }\n\n    pushChildren(...children: PointerHandleableElement[]): PointerHandleableLayout {\n        for (let child of children) {\n            child.cubism = this.cubism;\n            this.children.push(child);\n        }\n        this.updateChildrenShape();\n        return this;\n    }\n\n    removeChild(child: PointerHandleableElement): void {\n        this.children.splice(this.children.indexOf(child), 1);\n    }\n\n    render() {\n        super.render();\n        this.c.translate(this.position);\n        for (let child of this.children) {\n            child.render();\n        }\n        this.c.restoreTranslate();\n    }\n\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n        for (let child of this.children) {\n            child.cubism = cubism;\n        }\n    }\n\n    triggerOnMove(point: PointerPoint): void {\n        super.triggerOnMove(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentMove(pointInChild);\n        }\n    }\n\n    triggerOnDown(point: PointerPoint): void {\n        super.triggerOnDown(point);\n        let pointInChild = new PointerPoint(point.x - this.position.x, point.y - this.position.y, point.pressure);\n        for (let child of this.children) {\n            child.triggerOnParentDown(pointInChild);\n        }\n    }\n\n    triggerOnUp(point: PointerPoint): void {\n        super.triggerOnUp(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentUp(pointInChild);\n        }\n    }\n}", "import {PointerHandleableLayout} from \"./PointerHandleableLayout\";\nexport abstract class LinearLayout extends PointerHandleableLayout {\n\n}", "import {LinearLayout} from \"./LinearLayout\";\nimport {Point2D} from \"../../Datatypes/Point\";\n\nexport class VerticalLayout extends LinearLayout {\n    updateChildrenPosition() {\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            y += child.height;\n        }\n    }\n}", "export class Colors {\n    public static readonly black = \"#000000\";\n    public static readonly white = \"#ffffff\";\n    public static readonly pureRed = \"#ff0000\";\n    public static readonly pureGreen = \"#00ff00\";\n    public static readonly pureBlue = \"#0000ff\";\n    public static readonly pureYellow = \"#ffff00\";\n    public static readonly pureCyan = \"#00ffff\";\n    public static readonly pureMagenta = \"#ff00ff\";\n    public static readonly orange = \"#ff8000\";\n    public static readonly purple = \"#8000ff\";\n    public static readonly pink = \"#ff0080\";\n    public static readonly brown = \"#804000\";\n    public static readonly grey100 = \"#efefef\";\n    public static readonly grey200 = \"#a0a0a0\";\n    public static readonly grey300 = \"#808080\";\n    public static readonly grey400 = \"#606060\";\n    public static readonly grey500 = \"#404040\";\n    public static readonly grey600 = \"#202020\";\n    public static readonly grey700 = \"#000000\";\n    public static readonly blue100 = \"#a6d5ff\";\n    public static readonly blue200 = \"#7ec0ff\";\n    public static readonly blue300 = \"#57abff\";\n    public static readonly blue400 = \"#2e96ff\";\n    public static readonly blue500 = \"#0080ff\";\n    public static readonly blue600 = \"#0060cc\";\n    public static readonly blue700 = \"#004099\";\n    public static readonly green100 = \"#a6ffcc\";\n    public static readonly green200 = \"#7effa6\";\n    public static readonly green300 = \"#57ff80\";\n    public static readonly green400 = \"#2eff5a\";\n    public static readonly green500 = \"#00ff00\";\n    public static readonly green600 = \"#00cc00\";\n    public static readonly green700 = \"#009900\";\n    public static readonly red100 = \"#ffcccc\";\n    public static readonly red200 = \"#ff9999\";\n    public static readonly red300 = \"#ff6666\";\n    public static readonly red400 = \"#ff3333\";\n    public static readonly red500 = \"#ff0000\";\n    public static readonly red600 = \"#cc0000\";\n    public static readonly red700 = \"#990000\";\n    public static readonly yellow100 = \"#ffffcc\";\n    public static readonly yellow200 = \"#ffff99\";\n    public static readonly yellow300 = \"#ffff66\";\n    public static readonly yellow400 = \"#ffff33\";\n    public static readonly yellow500 = \"#ffff00\";\n    public static readonly yellow600 = \"#cccc00\";\n    public static readonly yellow700 = \"#999900\";\n    public static readonly cyan100 = \"#ccffff\";\n    public static readonly cyan200 = \"#99ffff\";\n    public static readonly cyan300 = \"#66ffff\";\n    public static readonly cyan400 = \"#33ffff\";\n    public static readonly cyan500 = \"#00ffff\";\n    public static readonly cyan600 = \"#00cccc\";\n    public static readonly cyan700 = \"#009999\";\n    public static readonly magenta100 = \"#ffccff\";\n    public static readonly magenta200 = \"#ff99ff\";\n    public static readonly magenta300 = \"#ff66ff\";\n    public static readonly magenta400 = \"#ff33ff\";\n    public static readonly magenta500 = \"#ff00ff\";\n    public static readonly magenta600 = \"#cc00cc\";\n    public static readonly magenta700 = \"#990099\";\n    public static readonly orange100 = \"#ffcc99\";\n    public static readonly orange200 = \"#ff9966\";\n    public static readonly orange300 = \"#ff9933\";\n    public static readonly orange400 = \"#ff9900\";\n    public static readonly orange500 = \"#ff8000\";\n    public static readonly orange600 = \"#cc6600\";\n    public static readonly orange700 = \"#994c00\";\n    public static readonly purple100 = \"#cc99ff\";\n    public static readonly purple200 = \"#9966ff\";\n    public static readonly purple300 = \"#9933ff\";\n    public static readonly purple400 = \"#9900ff\";\n    public static readonly purple500 = \"#8000ff\";\n    public static readonly purple600 = \"#6600cc\";\n    public static readonly purple700 = \"#4c0099\";\n    public static readonly pink100 = \"#ff99cc\";\n    public static readonly pink200 = \"#ff6699\";\n    public static readonly pink300 = \"#ff3399\";\n    public static readonly pink400 = \"#ff0099\";\n    public static readonly pink500 = \"#ff0080\";\n    public static readonly pink600 = \"#cc0066\";\n    public static readonly pink700 = \"#99004c\";\n    public static readonly brown100 = \"#cc9966\";\n    public static readonly brown200 = \"#996633\";\n    public static readonly brown300 = \"#994c00\";\n    public static readonly brown400 = \"#993300\";\n    public static readonly brown500 = \"#804000\";\n    public static readonly brown600 = \"#663300\";\n    public static readonly brown700 = \"#4c2600\";\n\n    public static readonly lightGray = \"#c0c0c0\";\n    public static readonly darkGray = \"#404040\";\n    public static readonly lightRed = \"#ff8080\";\n    public static readonly lightGreen = \"#80ff80\";\n    public static readonly lightBlue = \"#8080ff\";\n    public static readonly lightYellow = \"#ffff80\";\n    public static readonly lightCyan = \"#80ffff\";\n    public static readonly lightMagenta = \"#ff80ff\";\n    public static readonly darkRed = \"#800000\";\n    public static readonly darkGreen = \"#008000\";\n    public static readonly darkBlue = \"#000080\";\n    public static readonly darkYellow = \"#808000\";\n    public static readonly darkCyan = \"#008080\";\n    public static readonly darkMagenta = \"#800080\";\n    public static readonly transparent = \"rgba(0,0,0,0)\";\n    public static readonly transparentBlack = \"rgba(0,0,0,0.5)\";\n    public static readonly transparentWhite = \"rgba(255,255,255,0.5)\";\n    public static readonly transparentRed = \"rgba(255,0,0,0.5)\";\n    public static readonly transparentGreen = \"rgba(0,255,0,0.5)\";\n    public static readonly transparentBlue = \"rgba(0,0,255,0.5)\";\n    public static readonly transparentYellow = \"rgba(255,255,0,0.5)\";\n    public static readonly transparentCyan = \"rgba(0,255,255,0.5)\";\n    public static readonly transparentMagenta = \"rgba(255,0,255,0.5)\";\n    public static readonly transparentOrange = \"rgba(255,128,0,0.5)\";\n    public static readonly transparentPurple = \"rgba(128,0,255,0.5)\";\n    public static readonly transparentPink = \"rgba(255,0,128,0.5)\";\n}", "import {Colors} from \"./Colors\";\n\nexport class CubismElementThemeRoot {\n    color: ColorTheme;\n    font: FontTheme;\n    constructor(color: ColorTheme = new ColorTheme(), font: FontTheme = new FontTheme()) {\n        this.color = color;\n        this.font = font;\n    }\n    setColorTheme(color: ColorTheme): CubismElementThemeRoot {\n        this.color = color;\n        return this;\n    }\n    setFontTheme(font: FontTheme): CubismElementThemeRoot {\n        this.font = font;\n        return this;\n    }\n}\n\nexport class ColorTheme {\n    primary: string = Colors.blue500;\n    setPrimary(color: string) {\n        this.primary = color;\n        return this;\n    }\n    secondary: string = Colors.blue700;\n    setSecondary(color: string) {\n        this.secondary = color;\n        return this;\n    }\n    background: string = Colors.white;\n    setBackground(color: string) {\n        this.background = color;\n        return this;\n    }\n    border: string = this.primary;\n    setBorder(color: string) {\n        this.border = color;\n        return this;\n    }\n\n    text: string = Colors.black;\n    setText(color: string) {\n        this.text = color;\n        return this;\n    }\n}\nexport class OnClickColorTheme extends ColorTheme {\n    background: string = Colors.grey200;\n}\nexport class OnHoverColorTheme extends ColorTheme {\n    background: string = Colors.grey100;\n}\n\n\nexport class FontTheme {\n    fontSizes: number = 14;\n    setFontSize(size: number) {\n        this.fontSizes = size;\n        return this;\n    }\n    fontFamily: string = \"Arial\";\n    setFontFamily(font: string) {\n        this.fontFamily = font;\n        return this;\n    }\n}", "import {CanvasDrawer} from \"../CanvasDrawer\";\nimport {PointerHandleableElement} from \"./PointerHandleableElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nimport {ColorTheme, CubismElementThemeRoot, FontTheme, OnClickColorTheme, OnHoverColorTheme} from \"../Theme/Theme\";\n\nexport class ThemedElement extends PointerHandleableElement {\n    _currTheme: CubismElementThemeRoot\n\n    defaultTheme: CubismElementThemeRoot\n    hoverTheme: CubismElementThemeRoot\n    pressedTheme: CubismElementThemeRoot\n\n    setFontTheme(theme: FontTheme): ThemedElement {\n        this.defaultTheme.font = theme;\n        this.hoverTheme.font = theme;\n        this.pressedTheme.font = theme;\n        return this;\n    }\n\n    get currTheme(): CubismElementThemeRoot {\n        return this._currTheme;\n    }\n\n    set currTheme(theme: CubismElementThemeRoot) {\n\n        this._currTheme = theme;\n    }\n\n    constructor() {\n        super();\n        this.defaultTheme = new CubismElementThemeRoot(\n            new ColorTheme()\n        );\n        this.hoverTheme = new CubismElementThemeRoot(\n            new OnHoverColorTheme()\n        );\n        this.pressedTheme = new CubismElementThemeRoot(\n            new OnClickColorTheme()\n        )\n        this._currTheme = this.defaultTheme;\n        this.currTheme = this.defaultTheme;\n    }\n\n    onMove(point: PointerPoint): void {\n        super.onMove(point);\n        this.c?.setRedraw(true);\n    }\n\n    onDown(point: PointerPoint): void {\n        super.onDown(point);\n        this.c?.setRedraw(true);\n    }\n\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        this.c?.setRedraw(true);\n    }\n\n    onEnter(point: PointerPoint) {\n        super.onEnter(point);\n        this.c?.setRedraw(true);\n    }\n\n    onLeave(point: PointerPoint) {\n        super.onLeave(point);\n        this.c?.setRedraw(true);\n    }\n\n\n    setDefaultTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.defaultTheme = theme;\n        return this;\n    }\n\n    setHoverTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.hoverTheme = theme;\n        return this;\n    }\n\n    setPressTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.pressedTheme = theme;\n        return this;\n    }\n\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.translate(this.position);\n\n        this.currTheme = this.defaultTheme;\n\n        if (this.hovered) {\n            this.currTheme = this.hoverTheme;\n        }\n\n        if (this.pressed) {\n            this.currTheme = this.pressedTheme;\n        }\n\n        c.setFillStyle(this.currTheme.color.background);\n        c.setStrokeStyle(this.currTheme.color.border);\n\n        c.drawRectWithPoints(this.absSize);\n        c.restoreTranslate();\n    }\n}", "import {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {ThemedElement} from \"./ThemedElement\";\nimport {FontTheme} from \"../Theme/Theme\";\nimport {GEventKeys} from \"../Constants/Constants\";\n\nexport class ButtonElement extends ThemedElement {\n    text: string;\n\n    constructor(text: string = \"Button\") {\n        super();\n        this.text = text;\n        this.setFontTheme(new FontTheme().setFontSize(30));\n    }\n\n    setText(text: string): ButtonElement {\n        this.text = text;\n        return this;\n    }\n\n    pushOnUp(...callbacks:Function[]): this {\n        for (let callback of callbacks) {\n            console.log(\"Pushing\", callback);\n            this.pushOn(GEventKeys.ON_UP, callback.bind(this));\n        }\n        // return super.pushOnUp(...callbacks);\n        return  this\n    }\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.setFillStyle(this.currTheme.color.text);\n        c.fillText(this.text, 10, 30);\n    }\n}", "import {ThemedElement} from \"./ThemedElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {Point2D} from \"../Datatypes/Point\";\n\nexport class DraggableRect extends ThemedElement {\n    private pointerRelativePosition: Point2D | null = null;\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.pointerRelativePosition = new Point2D(point.x - this.position.x, point.y - this.position.y);\n        // Log.logDebug(\"down on\", this.pointerRelativePosition);\n    }\n\n    onParentMove(point: PointerPoint) {\n        super.onParentMove(point);\n        if (this.pointerRelativePosition !== null) {\n            this.position = point.sub(this.pointerRelativePosition);\n            this.c?.triggerRedraw();\n        }\n    }\n\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        // Log.logDebug(\"up on\", this);\n        this.pointerRelativePosition = null;\n    }\n}", "import {LinearLayout} from \"./LinearLayout\";\nimport {Point2D} from \"../../Datatypes/Point\";\n\nexport class HorizontalLayout extends LinearLayout {\n    updateChildrenPosition() {\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            x += child.width;\n        }\n    }\n}", "import {Cubism} from \"./Cubism\";\nimport {VerticalLayout} from \"./Elements/Layouts/VerticalLayout\";\nimport {ColorTheme, CubismElementThemeRoot, FontTheme} from \"./Theme/Theme\";\nimport {Colors} from \"./Theme/Colors\";\nimport {ButtonElement} from \"./Elements/ButtonElement\";\nimport {CubismElement} from \"./Elements/CubismElement\";\nimport {PointerHandleableElement} from \"./Elements/PointerHandleableElement\";\nimport {DraggableRect} from \"./Elements/DraggableRect\";\nimport {HorizontalLayout} from \"./Elements/Layouts/HorizontalLayout\";\n\nexport class CubismBuilder{\n\n    toString(){\n        return \"CubismBuilder\";\n    }\n\n    get cubism(){\n        return Cubism;\n    }\n    get c(){\n        return this.cubism;\n    }\n    verticalLayout(...children: PointerHandleableElement[]){\n        return new VerticalLayout(...children);\n    }\n    horizontalLayout(...children: PointerHandleableElement[]){\n        return new HorizontalLayout(...children);\n    }\n    h(...children: PointerHandleableElement[]){\n        return this.horizontalLayout(...children);\n    }\n\n    v(...children: PointerHandleableElement[]){\n        return this.verticalLayout(...children);\n    }\n\n    get colorTheme(){\n        return new ColorTheme;\n    }\n    get fontTheme(){\n        return new FontTheme();\n    }\n    get theme(){\n        return new CubismElementThemeRoot();\n    }\n\n\n    get colors(){\n        return Colors;\n    }\n    get button(){\n        return new ButtonElement();\n    }\n    buttonWithText(text: string){\n        return new ButtonElement(text);\n    }\n\n    get draggableRect(){\n        return new DraggableRect();\n    }\n}", "import {CubismBuilder} from \"./CubismBuilder\";\nimport {Cubism} from \"./Cubism\";\nimport {VerticalLayout} from \"./Elements/Layouts/VerticalLayout\";\nimport {DraggableRect} from \"./Elements/DraggableRect\";\nimport {ButtonElement} from \"./Elements/ButtonElement\";\n\n\nconsole.log(\"loading Index.ts\");\n\n\nclass LiveDemo {\n    builder: CubismBuilder\n    codeText: HTMLTextAreaElement;\n\n    constructor() {\n        this.codeText = document.getElementById(\"codeText\") as HTMLTextAreaElement;\n        this.codeText.value = this.getFormattedFunctionString();\n        this.builder = new CubismBuilder();\n        this.userFunction = this.getUserFunction();\n    }\n\n    /**\n     * Placeholder for the user function\n     */\n    userFunction() {\n        // override this\n    }\n\n    main() {\n        let updateButton = document.getElementById(\"update\") as HTMLButtonElement;\n        updateButton.onclick = this.updateCubism.bind(this);\n        this.updateCubism();\n    }\n\n    updateCubism() {\n        console.log(\"update\");\n        this.updateUserFunction();\n        this.runUserFunction();\n    }\n\n    getFormattedFunctionString() {\n        let s = defaultInitCode.toString();\n        // Remove the first and last line\n        s = s.substring(s.indexOf(\"{\") + 1, s.lastIndexOf(\"}\"));\n        // Remove first 2 spaces\n        s = s.replace(/^ {2}/gm, \"\");\n        return s;\n    }\n\n    getUserFunction() {\n        let code = this.codeText.value;\n        // console.log(`code: ${code}`);\n        return new Function(code) as () => void;\n    }\n\n    updateUserFunction() {\n        this.userFunction = this.getUserFunction();\n    }\n\n    runUserFunction() {\n        this.userFunction();\n    }\n}\n\n/**\n * Default user function\n */\nfunction defaultInitCode() {\n    let app = Cubism.createFromId(\"mainCanvas\");\n    app.init(\n        new VerticalLayout(\n            new DraggableRect()\n                .setWidth(100)\n                .setHeight(50),\n            new DraggableRect()\n                .setWidth(100)\n                .setHeight(50),\n            new ButtonElement()\n                .setText(\"Button\")\n                .setHeight(50)\n                .setWidth(100)\n                .pushOnUp(() => {\n                    let v = app.getElementById(\"VerticalLayout\") as VerticalLayout\n                    v.pushChildren(\n                        new DraggableRect()\n                            .setWidth(50)\n                            .setHeight(50)\n                    )\n                })\n        ).setId(\"VerticalLayout\")\n    )\n}\n\nnew LiveDemo().main();"],
  "mappings": "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",
  "names": []
}
