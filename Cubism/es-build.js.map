{
  "version": 3,
  "sources": ["src/Datatypes/TransformMatrix2D.ts", "src/State.ts", "src/Constants/Constants.ts", "src/CubismPart.ts", "src/CanvasDrawer.ts", "src/Global/Inter/CubismEventSystem.ts", "src/Datatypes/Point.ts", "src/Datatypes/PointerPoint.ts", "src/Global/Outer/CubismOuterGlobal.ts", "src/CubismInitializer.ts", "src/CubismElementManger.ts", "src/Cubism.ts", "src/Debug/Console.ts", "src/Elements/CubismElement.ts", "src/Elements/CubismParentElement.ts", "src/Elements/PointerHanderParentElement.ts", "src/Theme/Colors.ts", "src/Physics/Physics2D/PhysicalPoint2D.ts", "src/Elements/Fancy/RecursiveRect.ts", "src/Elements/Fancy/ChangingRainbowBackground.ts", "src/Index.ts"],
  "sourcesContent": ["/**\r\n * A class representing a 2D transformation matrix.\r\n */\r\nimport {Point2D} from \"./Point\";\r\n\r\nexport class TransformMatrix2D {\r\n    arr: number[][] = [];\r\n\r\n    /**\r\n     * Creates a new 2D transform matrix.\r\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\r\n     * @param m12 Vertical skewing.\r\n     * @param m21 Horizontal skewing.\r\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\r\n     * @param dx  Horizontal translation (moving).\r\n     * @param dy Vertical translation (moving).\r\n     */\r\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\r\n        this.arr = [\r\n            [m11, m12, dx],\r\n            [m21, m22, dy],\r\n            [0, 0, 1]\r\n        ];\r\n    }\r\n    get m11(): number {\r\n        return this.arr[0][0];\r\n    }\r\n\r\n    set m11(value: number) {\r\n        this.arr[0][0] = value;\r\n    }\r\n\r\n    get m12(): number {\r\n        return this.arr[0][1];\r\n    }\r\n\r\n    set m12(value: number) {\r\n        this.arr[0][1] = value;\r\n    }\r\n\r\n    get m21(): number {\r\n        return this.arr[1][0];\r\n    }\r\n\r\n    set m21(value: number) {\r\n        this.arr[1][0] = value;\r\n    }\r\n\r\n    get m22(): number {\r\n        return this.arr[1][1];\r\n    }\r\n\r\n    set m22(value: number) {\r\n        this.arr[1][1] = value;\r\n    }\r\n\r\n    get dx(): number {\r\n        return this.arr[0][2];\r\n    }\r\n\r\n    set dx(value: number) {\r\n        this.arr[0][2] = value;\r\n    }\r\n\r\n    get dy(): number {\r\n        return this.arr[1][2];\r\n    }\r\n\r\n    set dy(value: number) {\r\n        this.arr[1][2] = value;\r\n    }\r\n\r\n\r\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\r\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\r\n    }\r\n\r\n    get(x: number, y: number): number {\r\n        return this.arr[x][y];\r\n    }\r\n\r\n    set(x: number, y: number, value: number) {\r\n        // console.log(`Setting ${x}, ${y} to ${value}`);\r\n        this.arr[x][y] = value;\r\n    }\r\n\r\n    static identity(): TransformMatrix2D {\r\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    static zero(): TransformMatrix2D {\r\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    static translation(x: number, y: number): TransformMatrix2D {\r\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    static translationFromPoint(point: Point2D): TransformMatrix2D {\r\n        return TransformMatrix2D.translation(point.x, point.y);\r\n    }\r\n\r\n    static rotation(angle: number): TransformMatrix2D {\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\r\n    }\r\n\r\n    static scale(x: number, y: number): TransformMatrix2D {\r\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\r\n    }\r\n    static scaleFromPoint(point: Point2D): TransformMatrix2D {\r\n        return TransformMatrix2D.scale(point.x, point.y);\r\n    }\r\n\r\n    clone(): TransformMatrix2D {\r\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\r\n    }\r\n\r\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\r\n        let newMatrix = TransformMatrix2D.zero();\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                let dotProduct = 0;\r\n                for (let k = 0; k < 3; k++) {\r\n                    dotProduct += this.get(i, k) * other.get(k, j);\r\n                }\r\n                newMatrix.set(i, j, dotProduct);\r\n            }\r\n        }\r\n        return newMatrix;\r\n    }\r\n\r\n    translate(x: number, y: number): TransformMatrix2D {\r\n        return this.multiply(TransformMatrix2D.translation(x, y));\r\n    }\r\n\r\n    rotate(angle: number): TransformMatrix2D {\r\n        return this.multiply(TransformMatrix2D.rotation(angle));\r\n    }\r\n\r\n    scale(x: number, y: number): TransformMatrix2D {\r\n        return this.multiply(TransformMatrix2D.scale(x, y));\r\n    }\r\n\r\n    toString(): string {\r\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\r\n    }\r\n}", "import {Point2D} from \"./Datatypes/Point\";\r\nimport {TransformMatrix2D} from \"./Datatypes/TransformMatrix2D\";\r\n\r\n/**\r\n * The state of the canvas\r\n */\r\nexport class CubismCanvasState {\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n        this.canvas = canvas;\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    private translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\r\n\r\n    set translate(offset: Point2D) {\r\n        let translateMatrix = this.translateMatrix.translate(offset.x, offset.y);\r\n        this.translates.push(translateMatrix);\r\n        this.setCtxTransform(translateMatrix);\r\n    }\r\n\r\n    setCtxTransform(t: TransformMatrix2D) {\r\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\r\n    }\r\n\r\n    restoreTranslate() {\r\n        // console.log(`Restoring translate ${this.translates.length}`);\r\n        let lastTranslate = this.popTranslate();\r\n        this.setCtxTransform(lastTranslate);\r\n    }\r\n\r\n    get translateMatrix(): TransformMatrix2D {\r\n        return this.translates[this.translates.length - 1];\r\n    }\r\n\r\n    popTranslate(): TransformMatrix2D {\r\n        if (this.translates.length > 1) {\r\n            // console.log(\"pop translate\");\r\n            return this.translates.pop() as TransformMatrix2D;\r\n        }\r\n        return this.translates[0];\r\n    }\r\n\r\n    _needsRedraw: boolean = true;\r\n    get needsRedraw() {\r\n        return this._needsRedraw;\r\n    }\r\n\r\n    set needsRedraw(value: boolean) {\r\n        this._needsRedraw = value;\r\n    }\r\n}\r\n", "export class Values{\r\n\r\n}\r\nexport class LayoutValues{\r\n    public static readonly DEFAULT_PADDING = 10;\r\n    public static readonly DEFAULT_MARGIN = 10;\r\n    public static readonly DEFAULT_BORDER = 1;\r\n\r\n    public static readonly MATCH_PARENT = -1;\r\n}\r\nexport class Orientation{\r\n    public static readonly HORIZONTAL = 1;\r\n    public static readonly VERTICAL = 0;\r\n}\r\nexport class Alignment{\r\n    public static readonly START = 0;\r\n    public static readonly END = 1;\r\n    public static readonly CENTER = 2;\r\n    public static readonly STRETCH = 3;\r\n}\r\nexport class Direction{\r\n    public static readonly LEFT = 0;\r\n    public static readonly RIGHT = 1;\r\n    public static readonly UP = 2;\r\n    public static readonly DOWN = 3;\r\n    public static readonly START = 4;\r\n    public static readonly END = 5;\r\n}\r\nexport class Axis{\r\n    public static readonly X = 0;\r\n    public static readonly Y = 1;\r\n}\r\nexport class PointerType{\r\n    public static readonly MOUSE = 0;\r\n    public static readonly TOUCH = 1;\r\n    public static readonly PEN = 2;\r\n}\r\nexport class EventKeys {\r\n    public static readonly ON_MOVE = \"onMove\";\r\n    public static readonly ON_DOWN = \"onDown\";\r\n    public static readonly ON_UP = \"onUp\";\r\n\r\n    public static readonly GLOBAL_ON_POINTER_CHANGE = \"redraw\";\r\n\r\n    public static readonly FPS_UPDATE = \"FPS_EVENT\";\r\n\r\n    public static readonly ON_POINTER_EVENT = \"onPointerEvent\";\r\n\r\n    public static readonly ON_CLICK = \"onClick\";\r\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\r\n    public static readonly ON_DRAG = \"onDrag\";\r\n    public static readonly ON_DRAG_START = \"onDragStart\";\r\n    public static readonly ON_DRAG_END = \"onDragEnd\";\r\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\r\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\r\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\r\n    public static readonly ON_DROP = \"onDrop\";\r\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\r\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\r\n    public static readonly ON_PARENT_UP = \"onParentUp\";\r\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\r\n    public static readonly ON_ENTER = \"onEnter\";\r\n    public static readonly ON_LEAVE = \"onLeave\";\r\n\r\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\r\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\r\n    public static readonly REDRAW = \"onRedraw\";\r\n\r\n    public static readonly POINTER_DOWN = \"onMouseDown\";\r\n    public static readonly POINTER_UP = \"onMouseUp\";\r\n    public static readonly POINTER_MOVE = \"onMouseMove\";\r\n}", "import IHasCubism from \"./Interface/IGlobalHandler\";\r\nimport {Cubism} from \"./Cubism\";\r\n\r\nexport default class CubismPart implements IHasCubism {\r\n    _cubism: Cubism | null = null;\r\n    get cubism(): Cubism {\r\n        return this.getCubism();\r\n    }\r\n    /**\r\n     * It seems like setter has some problems with overriding\r\n     * @param cubism\r\n     */\r\n    set cubism(cubism: Cubism) {\r\n        this.setCubism(cubism);\r\n    }\r\n\r\n    /**\r\n     * Called by setter\r\n     * @param cubism\r\n     */\r\n    setCubism(cubism: Cubism) {\r\n        this._cubism = cubism;\r\n    }\r\n\r\n    /**\r\n     * Called by getter\r\n     */\r\n    getCubism(): Cubism {\r\n        if (this._cubism === null) {\r\n            throw new Error(`Cubism is not set for ${this.className}`);\r\n        }\r\n        return this._cubism as Cubism;\r\n    }\r\n\r\n    get className(): string {\r\n        return this.constructor.name;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.className}(${(this._cubism ===null) ? this._cubism : \"NO CUBISM\"})`;\r\n    }\r\n}", "import {Point2D} from \"./Datatypes/Point\";\r\nimport {CubismCanvasState} from \"./State\";\r\nimport {EventKeys} from \"./Constants/Constants\";\r\nimport CubismPart from \"./CubismPart\";\r\nimport {Cubism} from \"./Cubism\";\r\n\r\n/**\r\n * Adaptor class for the canvas\r\n * with the ability to draw on it\r\n * and handle events\r\n */\r\nexport class CanvasDrawer extends CubismPart {\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    get eventSystem() {\r\n        return this.cubism.eventSystem;\r\n    }\r\n\r\n    state: CubismCanvasState; // the state of the canvas\r\n\r\n    /**\r\n     * Constructor of the CanvasDrawer\r\n     * @param canvas the canvas to draw on\r\n     */\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super();\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        this.state = new CubismCanvasState(canvas, this.ctx);\r\n    }\r\n    setCubism(cubism: Cubism) {\r\n        super.setCubism(cubism);\r\n\r\n        this.registerFrameUpdate();\r\n    }\r\n    get width() {\r\n        return this.canvas.width;\r\n    }\r\n\r\n    set width(width: number) {\r\n        this.canvas.width = width;\r\n    }\r\n\r\n    get height() {\r\n        return this.canvas.height;\r\n    }\r\n\r\n    set height(height: number) {\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    /**\r\n     * Register the frame update event\r\n     * @private\r\n     */\r\n    private registerFrameUpdate() {\r\n        // console.log(\"Registering frame update\");\r\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.frameUpdate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Things to do on every frame update\r\n     * @private\r\n     */\r\n    private frameUpdate() {\r\n        // console.log(\"Frame update\");\r\n        if (this.state.needsRedraw) {\r\n            this.triggerRedraw();\r\n            // console.log(\"Redrawing\");\r\n            this.state.needsRedraw = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the canvas\r\n     */\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    /**\r\n     * Set the fill style(color) of the canvas\r\n     * @param style the style to set\r\n     */\r\n    setFillStyle(style: string) {\r\n        this.ctx.fillStyle = style;\r\n    }\r\n\r\n    /**\r\n     * Set the stroke style(color) of the canvas\r\n     * @param style the style to set\r\n     */\r\n    setStrokeStyle(style: string) {\r\n        this.ctx.strokeStyle = style;\r\n    }\r\n\r\n    /**\r\n     * Set the line width of the canvas\r\n     * @param width\r\n     */\r\n    setStrokeWidth(width: number) {\r\n        this.ctx.lineWidth = width;\r\n    }\r\n\r\n    /**\r\n     * Translate the canvas\r\n     * @param offset\r\n     */\r\n    translate(offset: Point2D) {\r\n        this.state.translate = offset;\r\n    }\r\n\r\n    /**\r\n     * Restore translation and rotation to previous state\r\n     */\r\n    restoreTranslate() {\r\n\r\n        this.state.restoreTranslate();\r\n    }\r\n\r\n    /**\r\n     * Draw text on the canvas\r\n     * @param text the text to draw\r\n     * @param x the x position of the text\r\n     * @param y the y position of the text\r\n     */\r\n    fillText(text: string, x: number, y: number) {\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Draw a line with two Point2Ds\r\n     * @param begin the beginning of the line\r\n     * @param end the end of the line\r\n     */\r\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\r\n        this.drawLine(begin.x, begin.y, end.x, end.y);\r\n    }\r\n\r\n    /**\r\n     * Draw a line with four numbers\r\n     * @param beginX the x position of the beginning of the line\r\n     * @param beginY the y position of the beginning of the line\r\n     * @param endX the x position of the end of the line\r\n     * @param endY the y position of the end of the line\r\n     */\r\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(beginX, beginY);\r\n        this.ctx.lineTo(endX, endY);\r\n        this.closeDraw();\r\n    }\r\n\r\n    drawCircle(x: number, y: number, radius: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n        this.closeDraw();\r\n    }\r\n\r\n    drawShape(points: Point2D[]) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(points[0].x, points[0].y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            this.ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        this.closeDraw();\r\n    }\r\n\r\n    drawRectWithPoints(p1: Point2D, p2: Point2D | null = null) {\r\n        if (p2 === null) {\r\n            this.drawRect(0, 0, p1.x, p1.y);\r\n        } else {\r\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\r\n        }\r\n    }\r\n\r\n    drawRect(x: number, y: number, width: number, height: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(width, y);\r\n        this.ctx.lineTo(width, height);\r\n        this.ctx.lineTo(x, height);\r\n        this.closeDraw();\r\n    }\r\n\r\n    drawPathString(path: string) {\r\n        this.drawPath(new Path2D(path));\r\n    }\r\n\r\n    /**\r\n     * Draw an HTML Canvas Path on the canvas\r\n     * @param path\r\n     */\r\n    drawPath(path: Path2D) {\r\n        this.ctx.stroke(path);\r\n    }\r\n\r\n    /**\r\n     * Close the drawing path\r\n     */\r\n    closeDraw() {\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     * Set the need redraw flag\r\n     * @param redraw\r\n     */\r\n    setRedraw(redraw: boolean) {\r\n        this.state.needsRedraw = redraw;\r\n    }\r\n\r\n    /**\r\n     * Trigger a redraw event\r\n     * Seems more responsive than setRedraw()\r\n     */\r\n    triggerRedraw() {\r\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\r\n    }\r\n}\r\n", "import IHasCubism from \"../../Interface/IGlobalHandler\";\r\nimport CubismPart from \"../../CubismPart\";\r\nimport IEventManger from \"../../Interface/IEventManger\";\r\n\r\n/**\r\n * System that handles the registration and trigger of global events\r\n */\r\nexport class CubismEventSystem extends CubismPart implements IEventManger {\r\n    private _globalEventListeners: { [key: string]: Function[] } = {};\r\n\r\n    getEvent(event: string): Function[] {\r\n        if (this._globalEventListeners[event] === undefined) {\r\n            this._globalEventListeners[event] = [];\r\n            this._globalEventListeners[event].push(() => {\r\n                // Log.logDebug(`Event ${event} triggered`);\r\n            });\r\n        }\r\n        return this._globalEventListeners[event];\r\n    }\r\n\r\n    registerEvent(eventKey: string, callback: Function): void {\r\n        this.getEvent(eventKey).push(callback);\r\n    }\r\n\r\n    triggerEvent(eventKey: string, ...args: any[]): void {\r\n        this.getEvent(eventKey).forEach((callback) => {\r\n            callback(...args);\r\n        });\r\n    }\r\n\r\n    unregisterEvent(eventKey: string, callback: Function): void {\r\n        this._globalEventListeners[eventKey].splice(this._globalEventListeners[eventKey].indexOf(callback), 1);\r\n    }\r\n\r\n    removeEvent(event: string) {\r\n        this._globalEventListeners[event] = [];\r\n    }\r\n\r\n    removeAllEvents() {\r\n        for (const event in this._globalEventListeners) {\r\n            this.removeEvent(event);\r\n        }\r\n        this._globalEventListeners = {};\r\n    }\r\n}", "/**\r\n * A representation of a point in 2D space.\r\n */\r\nexport class Point2D {\r\n    arr: number[]\r\n\r\n    constructor(x: number, y: number) {\r\n        this.arr = [x, y];\r\n    }\r\n\r\n    get x() {\r\n        return this.arr[0];\r\n    }\r\n\r\n    set x(value: number) {\r\n        this.arr[0] = value;\r\n    }\r\n\r\n    get y() {\r\n        return this.arr[1];\r\n    }\r\n\r\n    set y(value: number) {\r\n        this.arr[1] = value;\r\n    }\r\n\r\n    clone(): Point2D {\r\n        return new Point2D(this.x, this.y);\r\n    }\r\n\r\n    setXY(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    set(point: Point2D) {\r\n        this.x = point.x;\r\n        this.y = point.y;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Offset the point by the given amount.\r\n     * @param offset\r\n     */\r\n    offset(offset: Point2D) {\r\n        this.x += offset.x;\r\n        this.y += offset.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Offset the point by the negative given amount.\r\n     * @param offset\r\n     */\r\n    nOffset(offset: Point2D) {\r\n        this.x -= offset.x;\r\n        this.y -= offset.y;\r\n        return this;\r\n    }\r\n\r\n    add(other: Point2D): Point2D {\r\n        return this.clone().offset(other);\r\n    }\r\n\r\n    sub(other: Point2D): Point2D {\r\n        return this.clone().nOffset(other);\r\n    }\r\n\r\n    subXY(x: number, y: number): Point2D {\r\n        return this.sub(new Point2D(x, y));\r\n    }\r\n\r\n    mul(other: Point2D): Point2D {\r\n        return new Point2D(this.x * other.x, this.y * other.y);\r\n    }\r\n\r\n    scale(n: number): Point2D {\r\n        return new Point2D(this.x * n, this.y * n);\r\n    }\r\n\r\n    toString() {\r\n        return `(${this.x}, ${this.y})`;\r\n    }\r\n}\r\n", "import {Point2D} from \"./Point\";\r\n\r\nexport class PointerPoint extends Point2D {\r\n\r\n    constructor(x: number, y: number, public pressure: number) {\r\n        super(x, y);\r\n    }\r\n\r\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\r\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\r\n    }\r\n\r\n    toString(): string {\r\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\r\n    }\r\n\r\n    sub(other: Point2D): PointerPoint {\r\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\r\n    }\r\n}", "import {CubismEventSystem} from \"../Inter/CubismEventSystem\";\r\nimport {Cubism} from \"../../Cubism\";\r\n\r\n/**\r\n * The global manager for Cubism outside the canvas\r\n * This is a singleton class\r\n */\r\nexport class CubismOuterGlobal {\r\n    private static _instance: CubismOuterGlobal;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public static get instance(): CubismOuterGlobal {\r\n        if (!CubismOuterGlobal._instance) {\r\n            CubismOuterGlobal._instance = new CubismOuterGlobal();\r\n        }\r\n        return CubismOuterGlobal._instance;\r\n    }\r\n\r\n    private _cubismInstances: { [key: string]: Cubism } = {};\r\n\r\n    public static getCubismInstance(key: string): Cubism {\r\n        return CubismOuterGlobal.instance._cubismInstances[key];\r\n    }\r\n\r\n    public static registerCubismInstance(key: string, app: Cubism) {\r\n        if (CubismOuterGlobal.instance._cubismInstances[key] === undefined) {\r\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\r\n        } else {\r\n            console.log(\"Replacing cubism instance with key \" + key);\r\n            this.getCubismInstance(key).destroy();\r\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\r\n            // throw new Error(\"Cubism app with key [\" + key + \"] already exists\");\r\n        }\r\n    }\r\n}", "import {EventKeys} from \"./Constants/Constants\";\r\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\r\nimport IGlobalHandler from \"./Interface/IGlobalHandler\";\r\nimport IHasCubism from \"./Interface/IGlobalHandler\";\r\nimport CubismPart from \"./CubismPart\";\r\nimport {triggerAsyncId} from \"async_hooks\";\r\n\r\nexport default class CubismInitializer extends CubismPart {\r\n    get eventSystem(): CubismEventSystem {\r\n        return this.cubism.eventSystem;\r\n    }\r\n\r\n    initializeFixedUpdate(timeInterval: number = 1000 / 60) {\r\n        setInterval(this.doFixUpdate.bind(this), timeInterval);\r\n\r\n        return this;\r\n    }\r\n\r\n    doFixUpdate() {\r\n        this.eventSystem.triggerEvent(EventKeys.FIX_UPDATE);\r\n    }\r\n\r\n    public initializeFrameUpdate() {\r\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\r\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\r\n        return this;\r\n    }\r\n\r\n    public initializeFPSCounter() {\r\n\r\n\r\n        this.eventSystem.registerEvent(EventKeys.FPS_UPDATE, this.doFPSUpdate.bind(this));\r\n        setInterval(this.triggerFPSUpdate.bind(this), 1000);\r\n\r\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.incrementFPS.bind(this));\r\n        return this;\r\n    }\r\n\r\n    triggerFPSUpdate() {\r\n        this.eventSystem.triggerEvent(EventKeys.FPS_UPDATE, this.fps);\r\n        this.resetFPSCounter();\r\n    }\r\n\r\n    doFPSUpdate(fps: number) {\r\n        // console.log(\"FPS: \" + fps);\r\n    }\r\n\r\n    fps: number = 0;\r\n\r\n    resetFPSCounter() {\r\n        this.fps = 0;\r\n    }\r\n\r\n    incrementFPS() {\r\n        this.fps++;\r\n    }\r\n\r\n    getFPS() {\r\n        return this.fps;\r\n    }\r\n\r\n    doFrameUpdate() {\r\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\r\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\r\n    }\r\n    public initializeAlwaysRedraw() {\r\n\r\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.triggerRedraw.bind(this));\r\n        return this;\r\n    }\r\n    triggerRedraw() {\r\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\r\n    }\r\n}\r\n", "import {CubismElement} from \"./Elements/CubismElement\";\r\n\r\nexport default class CubismElementManger{\r\n\r\n    private _elementsWithId: { [key: string]: CubismElement } = {};\r\n\r\n    private _elementsWithClass: { [key: string]: CubismElement[] } = {};\r\n\r\n    public registerElementId(id: string, element: CubismElement) {\r\n        console.log(\"registering element with id \" + id);\r\n        if (this._elementsWithId[id] === undefined) {\r\n            this._elementsWithId[id] = element;\r\n        } else {\r\n            throw new Error(\"Element with that id already exists\");\r\n        }\r\n    }\r\n\r\n    public getElementById(id: string): CubismElement {\r\n        return this._elementsWithId[id];\r\n    }\r\n\r\n    public removeElementWithId(id: string) {\r\n        delete this._elementsWithId[id];\r\n    }\r\n\r\n    public registerElementClass(className: string, element: CubismElement) {\r\n        if (this._elementsWithClass[className] === undefined) {\r\n            this._elementsWithClass[className] = [];\r\n        }\r\n        this._elementsWithClass[className].push(element);\r\n    }\r\n\r\n    public getElementsByClass(className: string): CubismElement[] {\r\n        return this._elementsWithClass[className];\r\n    }\r\n\r\n    public removeElementWithClass(className: string, element: CubismElement) {\r\n        this._elementsWithClass[className].splice(this._elementsWithClass[className].indexOf(element), 1);\r\n    }\r\n\r\n    public removeClass(className: string) {\r\n        delete this._elementsWithClass[className];\r\n    }\r\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\r\nimport {CubismEventSystem} from \"./Global/Inter/CubismEventSystem\";\r\nimport {EventKeys} from \"./Constants/Constants\";\r\nimport {Point2D} from \"./Datatypes/Point\";\r\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\r\nimport {CubismOuterGlobal} from \"./Global/Outer/CubismOuterGlobal\";\r\nimport CubismPart from \"./CubismPart\";\r\nimport CubismInitializer from \"./CubismInitializer\";\r\nimport CubismElementManger from \"./CubismElementManger\";\r\nimport {CubismElement} from \"./Elements/CubismElement\";\r\n\r\n/**\r\n * Entry point of the application\r\n * Initializes different parts of the application\r\n */\r\nexport class Cubism extends CubismElementManger {\r\n    _root: CubismElement | null = null;\r\n    readonly canvas: HTMLCanvasElement;\r\n    readonly cubismId: string;\r\n    readonly canvasDrawer: CanvasDrawer;\r\n    readonly eventSystem: CubismEventSystem;\r\n\r\n    _initializer: CubismInitializer;\r\n    get initializer() {\r\n        return this._initializer;\r\n    }\r\n\r\n    get rootElement(): CubismElement {\r\n        if (this._root === null) {\r\n            throw new Error(\"Root is not set\");\r\n        }\r\n        return this._root;\r\n    }\r\n\r\n    set rootElement(root) {\r\n\r\n        this.initParts(root);\r\n        this._root = root;\r\n    }\r\n\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super();\r\n        this.canvas = canvas;\r\n        this.eventSystem = new CubismEventSystem();\r\n        this.canvasDrawer = new CanvasDrawer(canvas);\r\n        this._initializer = new CubismInitializer();\r\n\r\n        this.initParts(this.canvasDrawer, this.eventSystem, this.initializer);\r\n        this.registerRedraw();\r\n        this.registerGlobalPointerEvents();\r\n\r\n\r\n        if (canvas.id === null || canvas.id === undefined || canvas.id === \"\") {\r\n            throw new Error(\"Canvas must have an id\");\r\n        }\r\n        this.cubismId = canvas.id;\r\n\r\n        CubismOuterGlobal.registerCubismInstance(this.cubismId, this);\r\n    }\r\n\r\n\r\n    /**\r\n     * Register pointer events\r\n     */\r\n    registerGlobalPointerEvents() {\r\n        // on move\r\n        this.canvas.onpointermove = (e) => {\r\n            // console.log(\"onpointermove\");\r\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\r\n        }\r\n        // on down\r\n        this.canvas.onpointerdown = (e) => {\r\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\r\n        }\r\n        // on up\r\n        this.canvas.onpointerup = (e) => {\r\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\r\n        }\r\n    }\r\n\r\n    registerRootElementPointerEvents() {\r\n\r\n        this.eventSystem.registerEvent(EventKeys.ON_POINTER_EVENT, (point: PointerPoint) => {\r\n            // console.log(`Pointer event [${point}]`);\r\n            this.rootElement.triggerEvent(EventKeys.ON_POINTER_EVENT, point);\r\n        });\r\n\r\n    }\r\n\r\n    registerRedraw() {\r\n        this.eventSystem.registerEvent(EventKeys.REDRAW, this.redraw.bind(this));\r\n    }\r\n\r\n    // registerOnMove() {\r\n    //     this.eventSystem.registerEvent(EventKeys.ON_MOVE, this.registerOnMove.bind(this));\r\n    // }\r\n\r\n    /**\r\n     * Create a new Cubism object from a canvas object\r\n     * @param canvas the canvas to draw on\r\n     */\r\n    static createFromCanvas(canvas: HTMLCanvasElement) {\r\n        return new Cubism(canvas);\r\n    }\r\n\r\n    /**\r\n     * Create a new Cubism object from a canvas id\r\n     * @param id the id of the canvas\r\n     */\r\n    static createFromId(id: string) {\r\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\r\n    }\r\n\r\n    init(root: CubismElement) {\r\n        this.rootElement = root;\r\n        this.initRootElement();\r\n        this.initializer.initializeFrameUpdate();\r\n\r\n        this.registerRootElementPointerEvents();\r\n        this.canvasDrawer.setRedraw(true);\r\n    }\r\n\r\n    private initRootElement() {\r\n        console.log(\"init root element\");\r\n        this.rootElement.resize(\r\n            new Point2D(this.canvas.width, this.canvas.height)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Redraw the whole canvas from the root element\r\n     */\r\n    redraw() {\r\n        this.canvasDrawer.clear();\r\n        if (this.rootElement) {\r\n            this.rootElement.draw();\r\n        }\r\n    }\r\n\r\n    initParts(...parts: CubismPart[]) {\r\n        parts.forEach(part => {\r\n                part.cubism = this;\r\n                console.log(`Initializing cubism part [${part}]`);\r\n            }\r\n        );\r\n    }\r\n\r\n    destroy() {\r\n        this.eventSystem.removeAllEvents();\r\n    }\r\n\r\n    toString() {\r\n        return `Cubism [${this.cubismId}]`;\r\n    }\r\n}\r\n\r\n", "import { Point2D } from \"../Datatypes/Point\";\r\nimport {CubismOuterGlobal} from \"../Global/Outer/CubismOuterGlobal\";\r\n\r\nexport function initConsole() {\r\n    let w = window as any;\r\n    w.test = () => {\r\n        console.log('test');\r\n    }\r\n    w.cubismGlobal = CubismOuterGlobal.instance;\r\n}\r\n", "import {Point2D} from \"../Datatypes/Point\";\r\nimport {CanvasDrawer} from \"../CanvasDrawer\";\r\nimport {LayoutValues} from \"../Constants/Constants\";\r\nimport {Cubism} from \"../Cubism\";\r\nimport {CubismEventSystem} from \"../Global/Inter/CubismEventSystem\";\r\n\r\n/**\r\n * Base class for all elements that can be rendered on the canvas\r\n * With size, position, and global events\r\n */\r\nexport class CubismElement extends CubismEventSystem implements IDrawable {\r\n    _position: Point2D;\r\n    _size: Point2D;\r\n    _absSize: Point2D; // Absolute size is the size of the element\r\n\r\n\r\n    elementId: string | null = null;\r\n    needsResize: boolean = true;\r\n\r\n    constructor(elementId: string | null = null) {\r\n        super();\r\n        this._position = new Point2D(0, 0);\r\n        this._size = new Point2D(LayoutValues.MATCH_PARENT, LayoutValues.MATCH_PARENT);\r\n        this._absSize = new Point2D(0, 0);\r\n        // Optional id\r\n        this.elementId = elementId;\r\n    }\r\n\r\n    /**\r\n     * Set id for this element so that it can be accessed by the id\r\n     * @param id\r\n     */\r\n    setId(id: string): this {\r\n        this.elementId = id;\r\n        if (this.cubism) {\r\n            this.cubism.registerElementId(id, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set cubism instance for this element\r\n     * @param cubism\r\n     */\r\n    setCubism(cubism: Cubism): void {\r\n        super.setCubism(cubism);\r\n        if (this.elementId !== null) {\r\n            this.setId(this.elementId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set position of this element relative to parent\r\n     * @param pos\r\n     */\r\n    set position(pos: Point2D) {\r\n        this._position = pos;\r\n        this.c.setRedraw(true);\r\n    }\r\n\r\n    /**\r\n     * Get position of this element relative to parent\r\n     */\r\n    get position(): Point2D {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * Get a size description of this element\r\n     * Not necessarily the size of the element\r\n     */\r\n    get size(): Point2D {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * Set size of this element\r\n     *\r\n     * @param size size description\r\n     */\r\n    set size(size: Point2D) {\r\n        this.setSizeFromXY(size.x, size.y);\r\n    }\r\n\r\n    setSizeFromXY(x: number, y: number): this {\r\n        this.size.x = x;\r\n        this.size.y = y;\r\n        this.needsResize = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the actual size of this element\r\n     */\r\n    get absSize(): Point2D {\r\n        return this._absSize;\r\n    }\r\n\r\n    /**\r\n     * Set the actual size of this element\r\n     * @param size\r\n     */\r\n    set absSize(size: Point2D) {\r\n        this._absSize = size;\r\n        this.c.setRedraw(true);\r\n    }\r\n\r\n    // /**\r\n    //  * Initialize this element\r\n    //  * @param parentSize\r\n    //  */\r\n    // initElement(parentSize: Point2D): void {\r\n    //     console.log(`Init element ${this}`);\r\n    //     // this.resize(parentSize);\r\n    // }\r\n\r\n    get height(): number {\r\n        return this.size.y;\r\n    }\r\n\r\n    set height(y: number) {\r\n        this.setSizeFromXY(this.width, y);\r\n    }\r\n\r\n    get width(): number {\r\n        return this.size.x;\r\n    }\r\n\r\n    set width(x: number) {\r\n        this.setSizeFromXY(x, this.height);\r\n    }\r\n\r\n    get absWidth(): number {\r\n        return this.absSize.x;\r\n    }\r\n\r\n    set absWidth(x: number) {\r\n        this.absSize.x = x;\r\n    }\r\n\r\n    get absHeight(): number {\r\n        return this.absSize.y;\r\n    }\r\n\r\n    set absHeight(y: number) {\r\n        this.absSize.y = y;\r\n    }\r\n\r\n    setWidth(width: number) {\r\n        this.width = width;\r\n        this.needsResize = true;\r\n        return this;\r\n    }\r\n\r\n    setHeight(height: number) {\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setPosFromPoint(pos: Point2D): this {\r\n        this.position = pos;\r\n        return this;\r\n    }\r\n\r\n    setPosFromXY(x: number, y: number): this {\r\n        this.position.x = x;\r\n        this.position.y = y;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Resize this element to targetSize size\r\n     * and mark it as resized\r\n     * @param targetSize\r\n     */\r\n    resize(targetSize: Point2D) {\r\n        this.resizeFromXY(targetSize.x, targetSize.y);\r\n    }\r\n\r\n    /**\r\n     * Resize this element to targetSize size\r\n     * and mark it as resized\r\n     * @param x width\r\n     * @param y height\r\n     */\r\n    resizeFromXY(x: number, y: number): void {\r\n        this.absWidth = x;\r\n        this.absHeight = y;\r\n        this.needsResize = false;\r\n    }\r\n\r\n    /**\r\n     * Get canvas drawer\r\n     */\r\n    get c(): CanvasDrawer {\r\n        if (!this.cubism) {\r\n            console.log(this.cubism)\r\n            throw new Error(`Cubism instance not set for ${this}`);\r\n        }\r\n        return this.cubism.canvasDrawer;\r\n    }\r\n\r\n    /**\r\n     * Render this element\r\n     */\r\n    draw(): void {\r\n        // console.log(`Drawing ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Get a string representation of this element\r\n     */\r\n    toString(): string {\r\n        return `[${this.elementId ? this.elementId : \"NO ID\"}]: ${this.className} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\r\n    }\r\n\r\n}\r\n", "/**\r\n * An Element with children\r\n */\r\nimport {CubismElement} from \"./CubismElement\";\r\nimport {Cubism} from \"../Cubism\";\r\nimport {Point2D} from \"../Datatypes/Point\";\r\nimport {LayoutValues} from \"../Constants/Constants\";\r\n\r\nexport default class CubismParentElement extends CubismElement {\r\n    children: CubismElement[];\r\n\r\n    constructor(elementId: string | null = null, ...children: CubismElement[]) {\r\n        super(elementId);\r\n        this.children = [];\r\n        this.addChildren(...children);\r\n    }\r\n\r\n    /**\r\n     * Called by initElement.\r\n     * Therefore, no need to overload initElement\r\n     * @param targetSize\r\n     */\r\n    resize(targetSize: Point2D) {\r\n        super.resize(targetSize);\r\n        this.updateChildrenShape()\r\n    }\r\n\r\n    /**\r\n     * Updates the children's shape\r\n     */\r\n    updateChildrenShape() {\r\n        this.updateChildrenSize();\r\n        this.updateChildrenPosition();\r\n    }\r\n\r\n    /**\r\n     * Updates the children's position\r\n     */\r\n    updateChildrenPosition() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates the children's size according to the layout\r\n     */\r\n    updateChildrenSize() {\r\n        for (let child of this.children) {\r\n            let x = child.width;\r\n            let y = child.height;\r\n            if (x === LayoutValues.MATCH_PARENT) {\r\n                x = this.absWidth;\r\n            }\r\n            if (y === LayoutValues.MATCH_PARENT) {\r\n                y = this.absHeight;\r\n                console.log(\"this.absHeight\", this.absHeight);\r\n            }\r\n            child.resize(new Point2D(x, y));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds children to the element\r\n     * @param children\r\n     */\r\n    addChildren(...children: CubismElement[]): this {\r\n        for (let child of children) {\r\n            this.children.push(child);\r\n            if (this._cubism) {\r\n                child.setCubism(this.cubism);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a child from the element\r\n     * @param child\r\n     */\r\n    removeChild(child: CubismElement): void {\r\n        let index = this.children.indexOf(child);\r\n        if (index > -1) {\r\n            this.children.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes given children from the element\r\n     * @param children\r\n     */\r\n    removeChildren(children: CubismElement[]): void {\r\n        for (let child of children) {\r\n            this.removeChild(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws current element and its children\r\n     */\r\n    draw() {\r\n        super.draw();\r\n        this.drawChildren();\r\n    }\r\n\r\n    /**\r\n     * Draws the children\r\n     */\r\n    drawChildren() {\r\n        this.c.translate(this.position);\r\n        for (let child of this.children) {\r\n            child.draw();\r\n        }\r\n        this.c.restoreTranslate();\r\n    }\r\n\r\n    /**\r\n     * Sets the cubism instance for the element and its children\r\n     * @param cubism\r\n     */\r\n    setCubism(cubism: Cubism) {\r\n        super.setCubism(cubism);\r\n        this.setChildrenCubism(cubism);\r\n    }\r\n\r\n    /**\r\n     * Sets the cubism instance for the children\r\n     * @param cubism\r\n     */\r\n    setChildrenCubism(cubism: Cubism) {\r\n        for (let child of this.children) {\r\n            child.setCubism(cubism);\r\n        }\r\n    }\r\n}\r\n", "import CubismParentElement from \"./CubismParentElement\";\r\nimport {Point2D} from \"../Datatypes/Point\";\r\nimport {EventKeys} from \"../Constants/Constants\";\r\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\r\nimport {CubismElement} from \"./CubismElement\";\r\n\r\nexport default class PointerHandlerParentElement extends CubismParentElement {\r\n    _dragPoint: PointerPoint | null = null;\r\n    _pointerWasInRange: boolean = false;\r\n    _hovered: boolean = false;\r\n    _pressed: boolean = false;\r\n\r\n    get pressed(): boolean {\r\n        return this._pressed;\r\n    }\r\n\r\n    set pressed(value: boolean) {\r\n        this._pressed = value;\r\n    }\r\n\r\n    get hovered(): boolean {\r\n        return this._hovered;\r\n    }\r\n\r\n    set hovered(value: boolean) {\r\n        this._hovered = value;\r\n    }\r\n\r\n    constructor(id: string | null = null, ...children: CubismElement[]) {\r\n        super(id, ...children);\r\n\r\n        this.registerEvent(EventKeys.ON_POINTER_EVENT, this.onPointerEvent.bind(this));\r\n    }\r\n\r\n    onDown(point: PointerPoint) {\r\n        // console.log(\"onDown\");\r\n    }\r\n\r\n    onUp(point: PointerPoint) {\r\n        // console.log(\"onUp\");\r\n    }\r\n\r\n    onLeave(point: PointerPoint) {\r\n        // console.log(\"onLeave\");\r\n\r\n    }\r\n\r\n    onEnter(point: PointerPoint) {\r\n        // console.log(\"onEnter\");\r\n\r\n    }\r\n\r\n    onMove(point: PointerPoint) {\r\n        // console.log(\"onMove\");\r\n    }\r\n\r\n    onParentMove(point: PointerPoint) {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onPointerEvent(point: PointerPoint) {\r\n        this.triggerThisPointerEvent(point);\r\n        this.triggerChildrenPointerEvent(point.sub(this.position));\r\n    }\r\n\r\n    triggerThisPointerEvent(point: PointerPoint) {\r\n        // console.log(\"triggerThisPointerEvent\");\r\n        /**\r\n         * If the pointer is in range of the element\r\n         */\r\n        if (this.pointerInRange(point)) {\r\n            // console.log(\"inRange\");\r\n            // console.log(`In range of ${this}`);\r\n            if (!this._pointerWasInRange) {\r\n                this.onEnter(point);\r\n            }\r\n            this._pointerWasInRange = true;\r\n            this.onMove(point);\r\n\r\n            if (point.pressure !== 0 && !this._pressed) {\r\n                this.onDown(point);\r\n                this._dragPoint = point;\r\n                this._pressed = true;\r\n            }\r\n            if (point.pressure === 0 && this._pressed) {\r\n                this.onUp(point);\r\n                this._dragPoint = null;\r\n                this._pressed = false;\r\n            }\r\n        }\r\n        /**\r\n         * Not in range\r\n         */\r\n        else {\r\n            // console.log(`Not in range of ${this}`);\r\n            if (this._pointerWasInRange) {\r\n                this.onLeave(point);\r\n                this._pointerWasInRange = false;\r\n            }\r\n        }\r\n        this.onParentMove(point);\r\n    }\r\n\r\n    triggerChildrenPointerEvent(point: PointerPoint) {\r\n        if (this.pointerInRange(point)) {\r\n            for (let child of this.children) {\r\n                child.triggerEvent(EventKeys.ON_POINTER_EVENT, point);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pointerInRange(point: PointerPoint) {\r\n        if (point.x >= this.position.x && point.x <= this.absWidth + this.position.x) {\r\n            if (point.y >= this.position.y && point.y <= this.absHeight + this.position.y) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "export class Colors {\r\n    public static readonly black = \"#000000\";\r\n    public static readonly white = \"#ffffff\";\r\n    public static readonly pureRed = \"#ff0000\";\r\n    public static readonly pureGreen = \"#00ff00\";\r\n    public static readonly pureBlue = \"#0000ff\";\r\n    public static readonly pureYellow = \"#ffff00\";\r\n    public static readonly pureCyan = \"#00ffff\";\r\n    public static readonly pureMagenta = \"#ff00ff\";\r\n    public static readonly orange = \"#ff8000\";\r\n    public static readonly purple = \"#8000ff\";\r\n    public static readonly pink = \"#ff0080\";\r\n    public static readonly brown = \"#804000\";\r\n    public static readonly grey100 = \"#efefef\";\r\n    public static readonly grey200 = \"#a0a0a0\";\r\n    public static readonly grey300 = \"#808080\";\r\n    public static readonly grey400 = \"#606060\";\r\n    public static readonly grey500 = \"#404040\";\r\n    public static readonly grey600 = \"#202020\";\r\n    public static readonly grey700 = \"#000000\";\r\n    public static readonly blue100 = \"#a6d5ff\";\r\n    public static readonly blue200 = \"#7ec0ff\";\r\n    public static readonly blue300 = \"#57abff\";\r\n    public static readonly blue400 = \"#2e96ff\";\r\n    public static readonly blue500 = \"#0080ff\";\r\n    public static readonly blue600 = \"#0060cc\";\r\n    public static readonly blue700 = \"#004099\";\r\n    public static readonly green100 = \"#a6ffcc\";\r\n    public static readonly green200 = \"#7effa6\";\r\n    public static readonly green300 = \"#57ff80\";\r\n    public static readonly green400 = \"#2eff5a\";\r\n    public static readonly green500 = \"#00ff00\";\r\n    public static readonly green600 = \"#00cc00\";\r\n    public static readonly green700 = \"#009900\";\r\n    public static readonly red100 = \"#ffcccc\";\r\n    public static readonly red200 = \"#ff9999\";\r\n    public static readonly red300 = \"#ff6666\";\r\n    public static readonly red400 = \"#ff3333\";\r\n    public static readonly red500 = \"#ff0000\";\r\n    public static readonly red600 = \"#cc0000\";\r\n    public static readonly red700 = \"#990000\";\r\n    public static readonly yellow100 = \"#ffffcc\";\r\n    public static readonly yellow200 = \"#ffff99\";\r\n    public static readonly yellow300 = \"#ffff66\";\r\n    public static readonly yellow400 = \"#ffff33\";\r\n    public static readonly yellow500 = \"#ffff00\";\r\n    public static readonly yellow600 = \"#cccc00\";\r\n    public static readonly yellow700 = \"#999900\";\r\n    public static readonly cyan100 = \"#ccffff\";\r\n    public static readonly cyan200 = \"#99ffff\";\r\n    public static readonly cyan300 = \"#66ffff\";\r\n    public static readonly cyan400 = \"#33ffff\";\r\n    public static readonly cyan500 = \"#00ffff\";\r\n    public static readonly cyan600 = \"#00cccc\";\r\n    public static readonly cyan700 = \"#009999\";\r\n    public static readonly magenta100 = \"#ffccff\";\r\n    public static readonly magenta200 = \"#ff99ff\";\r\n    public static readonly magenta300 = \"#ff66ff\";\r\n    public static readonly magenta400 = \"#ff33ff\";\r\n    public static readonly magenta500 = \"#ff00ff\";\r\n    public static readonly magenta600 = \"#cc00cc\";\r\n    public static readonly magenta700 = \"#990099\";\r\n    public static readonly orange100 = \"#ffcc99\";\r\n    public static readonly orange200 = \"#ff9966\";\r\n    public static readonly orange300 = \"#ff9933\";\r\n    public static readonly orange400 = \"#ff9900\";\r\n    public static readonly orange500 = \"#ff8000\";\r\n    public static readonly orange600 = \"#cc6600\";\r\n    public static readonly orange700 = \"#994c00\";\r\n    public static readonly purple100 = \"#cc99ff\";\r\n    public static readonly purple200 = \"#9966ff\";\r\n    public static readonly purple300 = \"#9933ff\";\r\n    public static readonly purple400 = \"#9900ff\";\r\n    public static readonly purple500 = \"#8000ff\";\r\n    public static readonly purple600 = \"#6600cc\";\r\n    public static readonly purple700 = \"#4c0099\";\r\n    public static readonly pink100 = \"#ff99cc\";\r\n    public static readonly pink200 = \"#ff6699\";\r\n    public static readonly pink300 = \"#ff3399\";\r\n    public static readonly pink400 = \"#ff0099\";\r\n    public static readonly pink500 = \"#ff0080\";\r\n    public static readonly pink600 = \"#cc0066\";\r\n    public static readonly pink700 = \"#99004c\";\r\n    public static readonly brown100 = \"#cc9966\";\r\n    public static readonly brown200 = \"#996633\";\r\n    public static readonly brown300 = \"#994c00\";\r\n    public static readonly brown400 = \"#993300\";\r\n    public static readonly brown500 = \"#804000\";\r\n    public static readonly brown600 = \"#663300\";\r\n    public static readonly brown700 = \"#4c2600\";\r\n\r\n    public static readonly lightGray = \"#c0c0c0\";\r\n    public static readonly darkGray = \"#404040\";\r\n    public static readonly lightRed = \"#ff8080\";\r\n    public static readonly lightGreen = \"#80ff80\";\r\n    public static readonly lightBlue = \"#8080ff\";\r\n    public static readonly lightYellow = \"#ffff80\";\r\n    public static readonly lightCyan = \"#80ffff\";\r\n    public static readonly lightMagenta = \"#ff80ff\";\r\n    public static readonly darkRed = \"#800000\";\r\n    public static readonly darkGreen = \"#008000\";\r\n    public static readonly darkBlue = \"#000080\";\r\n    public static readonly darkYellow = \"#808000\";\r\n    public static readonly darkCyan = \"#008080\";\r\n    public static readonly darkMagenta = \"#800080\";\r\n    public static readonly transparent = \"rgba(0,0,0,0)\";\r\n    public static readonly transparentBlack = \"rgba(0,0,0,0.5)\";\r\n    public static readonly transparentWhite = \"rgba(255,255,255,0.5)\";\r\n    public static readonly transparentRed = \"rgba(255,0,0,0.5)\";\r\n    public static readonly transparentGreen = \"rgba(0,255,0,0.5)\";\r\n    public static readonly transparentBlue = \"rgba(0,0,255,0.5)\";\r\n    public static readonly transparentYellow = \"rgba(255,255,0,0.5)\";\r\n    public static readonly transparentCyan = \"rgba(0,255,255,0.5)\";\r\n    public static readonly transparentMagenta = \"rgba(255,0,255,0.5)\";\r\n    public static readonly transparentOrange = \"rgba(255,128,0,0.5)\";\r\n    public static readonly transparentPurple = \"rgba(128,0,255,0.5)\";\r\n    public static readonly transparentPink = \"rgba(255,0,128,0.5)\";\r\n}", "import {Point2D} from \"../../Datatypes/Point\";\r\n\r\nexport default class PhysicalPoint2D extends Point2D {\r\n    velocity: Point2D = new Point2D(0, 0);\r\n    // acceleration: Point2D = new Point2D(0, 0);\r\n    resistance: number = 0;\r\n    velocityScale: number = 0;\r\n\r\n    setVelocity(velocity: Point2D) {\r\n        this.velocity = velocity;\r\n        return this;\r\n    }\r\n\r\n    setResistance(resistance: number) {\r\n        this.resistance = resistance;\r\n        return this;\r\n    }\r\n\r\n    impulse(impulse: Point2D) {\r\n        this.velocity.offset(impulse);\r\n        this.velocityScale = 1;\r\n        return this;\r\n    }\r\n\r\n    update() {\r\n        if (this.velocityScale > 0) {\r\n            this.velocity = this.velocity.scale(this.velocityScale);\r\n            this.velocityScale -= this.resistance;\r\n        }\r\n        if (this.velocityScale < 0) {\r\n            this.velocityScale = 0;\r\n        }\r\n        if (this.velocityScale == 0) {\r\n            this.velocity.setXY(0, 0)\r\n        }\r\n        this.offset(this.velocity);\r\n    }\r\n\r\n}\r\n", "import PointerHandlerParentElement from \"../PointerHanderParentElement\";\r\nimport {Colors} from \"../../Theme/Colors\";\r\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\r\nimport {Point2D} from \"../../Datatypes/Point\";\r\nimport {CubismElement} from \"../CubismElement\";\r\nimport PhysicalPoint2D from \"../../Physics/Physics2D/PhysicalPoint2D\";\r\n\r\nexport default class RecursiveRect extends PointerHandlerParentElement {\r\n    lastPoint: PointerPoint | null = null;\r\n    relativePosition: Point2D = new Point2D(200, 200);\r\n\r\n    frameCount: number = 0;\r\n\r\n    _position: PhysicalPoint2D = new PhysicalPoint2D(0, 0).setResistance(0.01);\r\n    get position(): PhysicalPoint2D {\r\n        return this._position;\r\n    }\r\n\r\n    set position(point: PhysicalPoint2D) {\r\n        this._position = point;\r\n    }\r\n\r\n    recursionCount: number = 0;\r\n    wiggleStrength: number = 0.1;\r\n\r\n    setRecursionCount(recursionCount: number) {\r\n        this.recursionCount = recursionCount;\r\n        return this;\r\n    }\r\n\r\n    wiggle() {\r\n        if (this.frameCount % 60 == 0) {\r\n\r\n\r\n            let range = this.wiggleStrength * Math.random();\r\n            this.position.impulse(new Point2D(range * (Math.random() - 0.5), range * (Math.random() - 0.5)));\r\n        }\r\n    }\r\n\r\n    setWiggleStrength(strength: number) {\r\n        this.wiggleStrength = strength;\r\n        return this;\r\n    }\r\n\r\n    setRelativePosition(point: Point2D) {\r\n        this.relativePosition = point;\r\n        return this;\r\n    }\r\n\r\n    draw() {\r\n        this.frameCount++;\r\n        this.c.translate(this.position);\r\n\r\n        this.position.update();\r\n        if(!this.pressed){\r\n            this.wiggle();\r\n        }\r\n\r\n        // this.wiggle();\r\n        this.c.setFillStyle(Colors.green100);\r\n        this.c.setStrokeWidth(2);\r\n        this.c.setStrokeStyle(Colors.green700);\r\n        let relaPos = this.position.sub(this.relativePosition);\r\n        let relaSpeed = 0.2;\r\n        let relaSize = 10;\r\n        this.c.drawRect(0, 0, this.width, this.height);\r\n        for (let i = 1; i < this.recursionCount + 1; i++) {\r\n            let relaSpeedI = relaSpeed * i;\r\n            let relaSizeI = relaSize * i;\r\n            this.c.translate(relaPos.scale(relaSpeedI));\r\n            this.c.drawRect(relaSizeI, relaSizeI, this.width - relaSizeI, this.height - relaSizeI);\r\n            this.c.restoreTranslate();\r\n        }\r\n        this.c.restoreTranslate();\r\n    }\r\n\r\n    onMove(point: PointerPoint) {\r\n        if (point.pressure > 0) {\r\n            if (!this.lastPoint) {\r\n                this.lastPoint = point.sub(this.position);\r\n            }\r\n            this.position.set(point.sub(this.lastPoint));\r\n        } else {\r\n            this.lastPoint = null;\r\n        }\r\n    }\r\n}\r\n", "import PointerHandlerParentElement from \"../PointerHanderParentElement\";\r\nimport {CubismElement} from \"../CubismElement\";\r\nimport {Colors} from \"../../Theme/Colors\";\r\nimport {EventKeys} from \"../../Constants/Constants\";\r\nimport {Cubism} from \"../../Cubism\";\r\n\r\nexport class ChangingRainbowBackground extends CubismElement{\r\n    frameCount: number = 0;\r\n\r\n    saturation:number = 70;\r\n    lightness: number = 90;\r\n    changingSpeed: number = 0.2;\r\n\r\n    setSaturation(s: number) {\r\n        if (s > 100) {\r\n            s = 100;\r\n        }\r\n        this.saturation = s;\r\n        return this;\r\n    }\r\n    setChangingSpeed(speed: number) {\r\n        this.changingSpeed = speed;\r\n        return this;\r\n    }\r\n    setLightness(l: number) {\r\n        if (l > 100) {\r\n            l = 100;\r\n        }\r\n        this.lightness = l;\r\n        return this;\r\n    }\r\n    draw() {\r\n\r\n\r\n        this.frameCount++;\r\n        this.c.translate(this.position);\r\n        let currHue = this.frameCount * this.changingSpeed % 360;\r\n        let currColor = `hsl(${currHue}, ${this.saturation}%, ${this.lightness}%)`;\r\n\r\n        this.c.setFillStyle(currColor);\r\n        this.c.setStrokeWidth(0);\r\n        this.c.setStrokeStyle(currColor);\r\n        this.c.drawRect(0, 0, this.absWidth, this.absHeight);\r\n        // super.draw();\r\n        this.c.restoreTranslate();\r\n    }\r\n}\r\n", "import {Cubism} from \"./Cubism\";\r\nimport {ButtonElement} from \"./Elements/ButtonElement\";\r\nimport {initConsole} from \"./Debug/Console\";\r\nimport {EventKeys, LayoutValues, Values} from \"./Constants/Constants\";\r\nimport PointerHandlerParentElement from \"./Elements/PointerHanderParentElement\";\r\nimport RecursiveRect from \"./Elements/Fancy/RecursiveRect\";\r\nimport {ChangingRainbowBackground} from \"./Elements/Fancy/ChangingRainbowBackground\";\r\nimport {Point2D} from \"./Datatypes/Point\";\r\n\r\n\r\nconsole.log(\"loading Index.ts\");\r\n\r\n\r\nclass LiveDemo {\r\n    codeText: HTMLTextAreaElement;\r\n\r\n    constructor() {\r\n        this.codeText = document.getElementById(\"codeText\") as HTMLTextAreaElement;\r\n        this.codeText.value = this.getFormattedFunctionString();\r\n        this.userFunction = this.getUserFunction();\r\n    }\r\n\r\n    /**\r\n     * Placeholder for the user function\r\n     */\r\n    userFunction() {\r\n        // override this\r\n    }\r\n\r\n    main() {\r\n        initConsole();\r\n        let updateButton = document.getElementById(\"update\") as HTMLButtonElement;\r\n        updateButton.onclick = this.updateCubism.bind(this);\r\n        this.updateCubism();\r\n    }\r\n\r\n    updateCubism() {\r\n        console.log(\"update\");\r\n        this.updateUserFunction();\r\n        this.runUserFunction();\r\n    }\r\n\r\n    getFormattedFunctionString() {\r\n        let s = defaultInitCode.toString();\r\n        // Remove the first and last line\r\n        s = s.substring(s.indexOf(\"{\") + 1, s.lastIndexOf(\"}\"));\r\n        // Remove first 2 spaces\r\n        s = s.replace(/^ {2}/gm, \"\");\r\n        return s;\r\n    }\r\n\r\n    getUserFunction() {\r\n        let code = this.codeText.value;\r\n        // console.log(`code: ${code}`);\r\n        return new Function(code) as () => void;\r\n    }\r\n\r\n    updateUserFunction() {\r\n        this.userFunction = this.getUserFunction();\r\n    }\r\n\r\n    runUserFunction() {\r\n        this.userFunction();\r\n    }\r\n}\r\n\r\n/**\r\n * Default user function\r\n */\r\nfunction defaultInitCode() {\r\n    let app = Cubism.createFromId(\"mainCanvas\");\r\n    app.init(\r\n        new PointerHandlerParentElement(\r\n            null,\r\n            new ChangingRainbowBackground()\r\n                .setSizeFromXY(LayoutValues.MATCH_PARENT, LayoutValues.MATCH_PARENT)\r\n                .setLightness(70).setSaturation(80)\r\n                .setChangingSpeed(0.1)\r\n            ,\r\n            new RecursiveRect()\r\n                .setWiggleStrength(8)\r\n                .setSizeFromXY(200,200)\r\n                .setPosFromXY(100, 100)\r\n                .setRelativePosition(new Point2D(100,100))\r\n                .setRecursionCount(10)\r\n        )\r\n    )\r\n    app.eventSystem.registerEvent(EventKeys.FPS_UPDATE, (fps: number) => {\r\n        let fpsCounter = document.getElementById(\"fpsCounter\") as HTMLParagraphElement;\r\n        fpsCounter.innerText = `FPS: ${fps}`;\r\n    });\r\n\r\n    app.initializer.initializeAlwaysRedraw(); // Redraw every frame, by default it only redraws when the elements change\r\n    app.initializer.initializeFPSCounter(); // Show FPS\r\n}\r\n\r\nnew LiveDemo().main();\r\n"],
  "mappings": "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",
  "names": []
}
