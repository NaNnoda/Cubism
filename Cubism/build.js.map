{
  "version": 3,
  "sources": ["src/datatypes/point.ts", "src/ui/State.ts", "src/constants/constants.ts", "src/ui/CanvasDrawer.ts", "src/events/CubismGlobalEventSystem.ts", "src/events/CubismEventManager.ts", "src/debug/Log.ts", "src/ui/elements/CubismElement.ts", "src/ui/elements/InteractiveElement.ts", "src/ui/elements/PointerHandleableElement.ts", "src/datatypes/PointerPoint.ts", "src/ui/Cubism.ts", "src/ui/elements/InteractiveRect.ts", "src/ui/elements/layouts/PointerHandleableLayout.ts", "src/ui/elements/DraggableRect.ts", "src/index.ts"],
  "sourcesContent": ["/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n    get x() {\n        return this.arr[0];\n    }\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n    get y() {\n        return this.arr[1];\n    }\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    sub(other: Point2D): Point2D {\n        return new Point2D(this.x - other.x, this.y - other.y);\n    }\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n    }\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n    }\n    add(other: Point2D): Point2D {\n        return new Point2D(this.x + other.x, this.y + other.y);\n    }\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "import {Point2D} from \"../datatypes/point\";\n\nexport class CubismState {\n    private lineWidths: number[] = [10];\n\n    set lineWidth(lineWidth: number) {\n        this.lineWidths.push(lineWidth);\n    }\n\n    get lineWidth() {\n        return this.lineWidths[this.lineWidths.length - 1];\n    }\n\n    popLineWidth() {\n        if (this.lineWidths.length > 1) {\n            this.lineWidths.pop();\n        }\n        return this.lineWidth;\n    }\n\n    private fillStyles: string[] = [\"gray\"];\n\n    set fillStyle(style: string) {\n        this.fillStyles.push(style);\n    }\n\n    get fillStyle() {\n        return this.fillStyles[this.fillStyles.length - 1];\n    }\n\n    popFillStyle() {\n        if (this.fillStyles.length > 1) {\n            this.fillStyles.pop();\n        }\n        return this.fillStyle;\n    }\n\n\n    private strokeStyles: string[] = [\"black\"];\n\n    set strokeStyle(style: string) {\n        this.strokeStyles.push(style);\n    }\n\n    get strokeStyle() {\n        return this.strokeStyles[this.strokeStyles.length - 1];\n    }\n\n    popStrokeStyle() {\n        if (this.strokeStyles.length > 1) {\n            this.strokeStyles.pop();\n        }\n        return this.strokeStyle;\n    }\n\n    private translates: Point2D[] = [new Point2D(0, 0)];\n\n    set translate(offset: Point2D) {\n        console.log(\"set translate\", offset.x, offset.y);\n        this.translates.push(offset);\n        console.log(\"Current translates\", this.translates);\n        console.log(\"Size\", this.translates.length);\n    }\n\n    get translate() {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate() {\n        if (this.translates.length > 1) {\n            this.translates.pop();\n        }\n        return this.translate;\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "export class Values{\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n}\nexport class LayoutValues{\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}", "import {Point2D} from \"../datatypes/point\";\nimport {CubismState} from \"./State\";\nimport {CubismGlobalEventSystem} from \"../events/CubismGlobalEventSystem\";\nimport {Values} from \"../constants/constants\";\n\nexport class CanvasDrawer {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    state: CubismState;\n\n    globalEvent: CubismGlobalEventSystem;\n\n    constructor(canvas: HTMLCanvasElement, globalEvent: CubismGlobalEventSystem) {\n        this.state = new CubismState();\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.globalEvent = globalEvent;\n        this.registerFrameUpdate();\n    }\n\n    private registerFrameUpdate() {\n        this.globalEvent.registerGlobalEvent(Values.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    private frameUpdate() {\n        // console.log(\"Frame update\");\n        if (this.state.needsRedraw) {\n            console.log(\"this.state.needsRedraw: Redraw\");\n            this.globalEvent.triggerGlobalEvent(Values.REDRAW);\n            this.state.needsRedraw = false;\n        }\n    }\n\n    // fixedUpdate() {\n    //     // this.state.needsRedraw = true;\n    //     console.log(\"Fixed update\");\n    // }\n\n    clear() {\n        this.canvas.width = this.canvas.width;\n    }\n\n    setFillStyle(color: string) {\n        this.ctx.fillStyle = color;\n        this.state.fillStyle = color;\n    }\n\n    restoreFillStyle() {\n        this.ctx.fillStyle = this.state.popFillStyle();\n    }\n\n    translate(offset: Point2D) {\n        console.log(\"translate\", offset);\n        this.state.translate = offset;\n        this.ctx.translate(offset.x, offset.y);\n    }\n\n    restoreTranslate() {\n        let lastTranslate = this.state.popTranslate();\n        console.log(\"restoreTranslate\", lastTranslate.x, lastTranslate.y);\n        this.ctx.translate(-lastTranslate.x, -lastTranslate.y);\n    }\n\n    drawText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    setStrokeStyle(color: string) {\n        this.ctx.strokeStyle = color;\n        this.state.strokeStyle = color;\n    }\n\n    restoreStrokeStyle() {\n        this.ctx.strokeStyle = this.state.popStrokeStyle();\n    }\n\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n        this.state.lineWidth = width;\n    }\n\n    restoreStrokeWidth() {\n        this.ctx.lineWidth = this.state.popLineWidth();\n    }\n\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.lineWidth = this.state.lineWidth;\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    triggerRedraw() {\n        this.globalEvent.triggerGlobalEvent(Values.REDRAW);\n    }\n}\n", "import {Log} from \"../debug/Log\";\n\nexport class CubismGlobalEventSystem {\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    constructor() {\n    }\n\n    registerGlobalEvent(event: string, callback: Function): void {\n        this.getEvent(event).push(callback);\n    }\n\n    unregisterGlobalEvent(event: string, callback: Function): void {\n        this._globalEventListeners[event].splice(this._globalEventListeners[event].indexOf(callback), 1);\n    }\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n\n        }\n        return this._globalEventListeners[event];\n    }\n\n    triggerGlobalEvent(event: string, ...args: any[]): void {\n        this.getEvent(event).forEach((callback) => {\n            callback(...args);\n        });\n    }\n}", "import {Values} from \"../constants/constants\";\nimport {CubismGlobalEventSystem} from \"./CubismGlobalEventSystem\";\n\nexport class CubismEventManager{\n    globalEvent: CubismGlobalEventSystem;\n    constructor(globalEvent: CubismGlobalEventSystem) {\n        this.globalEvent = globalEvent;\n        this.startFixedUpdate();\n        this.startFrameUpdate();\n    }\n    startFixedUpdate() {\n        setInterval(this.doFixUpdate.bind(this), 1000 / 60);\n    }\n    doFixUpdate() {\n        this.globalEvent.triggerGlobalEvent(Values.FIX_UPDATE);\n    }\n\n    startFrameUpdate() {\n        this.globalEvent.triggerGlobalEvent(Values.FRAME_UPDATE);\n        window.requestAnimationFrame(this.startFrameUpdate.bind(this));\n    }\n}", "export class Log {\n    static debugFlag: boolean = true;\n\n    static log(message: string, ...args: any[]): void {\n        let s = message;\n        if (args.length !== 0) {\n            s += \": \";\n        }\n\n        // if (args.length > 2) {\n        s += \"\\n\";\n        for (let i = 0; i < args.length; i++) {\n            s += args[i] + \"\\n\";\n        }\n        // } else {\n        //     for (let i = 0; i < args.length; i++) {\n        //         s += args[i] + \" \";\n        //     }\n        // }\n        console.log(s);\n    }\n\n    static logDebug(message: string, ...args: any[]): void {\n        if (Log.debugFlag) {\n            Log.log(message, ...args);\n        }\n    }\n}", "import {Point2D} from \"../../datatypes/point\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {LayoutValues, Values} from \"../../constants/constants\";\nimport {Log} from \"../../debug/Log\";\nimport {CubismGlobalEventSystem} from \"../../events/CubismGlobalEventSystem\";\nimport {CubismState} from \"../State\";\n\nexport class CubismElement implements IRenderable {\n    _position: Point2D;\n    _size: Point2D;\n    _absSize: Point2D; // Absolute size is the size of the element\n    c: CanvasDrawer | null;\n    globalEvent: CubismGlobalEventSystem | null = null;\n\n    needsResize: boolean;\n\n    constructor() {\n        this._position = new Point2D(0, 0);\n        this._size = new Point2D(0, 0);\n        this._absSize = new Point2D(0, 0);\n        this.c = null;\n\n        this.needsResize = true;\n    }\n\n    set position(pos: Point2D) {\n        this._position = pos;\n        this.c?.setRedraw(true);\n    }\n\n    get position(): Point2D {\n        return this._position;\n    }\n\n    get size(): Point2D {\n        return this._size;\n    }\n\n    set size(size: Point2D) {\n        this._size = size;\n        this.needsResize = true;\n        this.c?.setRedraw(true);\n    }\n\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c?.setRedraw(true);\n    }\n\n    init(c: CanvasDrawer, parentSize: Point2D, globalEvent: CubismGlobalEventSystem) {\n        this.setCanvasDrawer(c);\n        this.resize(parentSize.x, parentSize.y);\n        this.setGlobalEventSystem(globalEvent);\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem) {\n        this.globalEvent = globalEvent;\n    }\n\n    resize(x: number, y: number) {\n        Log.logDebug(\"Resizing\", this, \"to\", x, y);\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n\n    get height(): number {\n        return this.size.y;\n    }\n\n\n    set height(y) {\n        this.size.y = y;\n        this.needsResize = true;\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.size.x = x;\n        this.needsResize = true;\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        this.c = c;\n    }\n\n    setWidth(width: number) {\n        this.width = width;\n        // this.absWidth = -1;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        // this.absHeight = -1;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D) {\n        this.position = pos;\n        return this;\n    }\n\n    setPosFromXY(x: number, y: number) {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n    render(): void {\n        if (this.c === null) {\n            throw new Error(\"CubismElement.render(): CubismCanvasManager is null\");\n        }\n        Log.logDebug(\"Rendering\", this);\n    }\n\n\n    toString() {\n        return `${this.elementName} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n    get elementName(): string {\n        return this.constructor.name;\n    }\n}\n", "import {PointerPoint} from \"../../datatypes/PointerPoint\";\n\nimport {CubismElement} from \"./CubismElement\";\n\nexport class InteractiveElement extends CubismElement {\n    private events: { [key: string]: Function[] } = {};\n\n    pushOn(event: string, ...callbacks: Function[]): void {\n        if (this.events[event] === undefined) {\n            this.events[event] = [];\n        }\n        this.events[event].push(...callbacks);\n    }\n\n    getOn(event: string): Function[] {\n        return this.events[event];\n    }\n\n    removeOn(event: string, callback: Function): void {\n        this.events[event].splice(this.events[event].indexOf(callback), 1);\n    }\n}", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {PointerPoint} from \"../../datatypes/PointerPoint\";\nimport {Values} from \"../../constants/constants\";\n\nexport class PointerHandleableElement extends InteractiveElement {\n    constructor() {\n        super();\n        this.pushOn(Values.ON_PARENT_MOVE, (point: PointerPoint) => {\n            this.onParentMove(point);\n        });\n        this.pushOn(Values.ON_MOVE, (point: PointerPoint) => {\n            this.onMove(point);\n        });\n        this.pushOn(Values.ON_PARENT_DOWN, (point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(Values.ON_DOWN, (point: PointerPoint) => {\n            this.onDown(point);\n        });\n        this.pushOn(Values.ON_PARENT_UP, (point: PointerPoint) => {\n            this.onParentUp(point);\n        });\n        this.pushOn(Values.ON_UP, (point: PointerPoint) => {\n            this.onUp(point);\n        });\n    }\n\n    public triggerOnParentDown(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentDown(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnDown(point);\n        }\n    }\n\n    public triggerOnParentUp(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentUp(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnUp(point);\n        }\n    }\n\n    public triggerOnUp(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onUp(point: PointerPoint): void {\n\n    }\n\n    public triggerOnDown(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onDown(point: PointerPoint): void {\n\n    }\n\n    public triggerOnMove(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onMove(point: PointerPoint): void {\n\n    }\n\n    public pushOnMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(Values.ON_MOVE, ...callbacks);\n        return this;\n    }\n\n    public removeOnMove(callback: Function): void {\n        this.removeOn(Values.ON_MOVE, callback);\n    }\n\n    public onParentMove(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnMove(point);\n        }\n    }\n\n    pushOnParentMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(Values.ON_PARENT_MOVE, ...callbacks);\n        return this;\n    }\n\n    triggerOnParentMove(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    inRange(point: PointerPoint): boolean {\n        return point.x >= this.position.x &&\n            point.x <= this.position.x + this.absWidth &&\n            point.y >= this.position.y &&\n            point.y <= this.position.y + this.absHeight;\n    }\n}", "import {Point2D} from \"./point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismElement} from \"./elements/CubismElement\";\nimport {CubismGlobalEventSystem} from \"../events/CubismGlobalEventSystem\";\nimport {CubismEventManager} from \"../events/CubismEventManager\";\nimport {Values} from \"../constants/constants\";\nimport {Point2D} from \"../datatypes/point\";\nimport {PointerHandleableElement} from \"./elements/PointerHandleableElement\";\nimport {PointerPoint} from \"../datatypes/PointerPoint\";\nimport {Log} from \"../debug/Log\";\n\nexport class Cubism implements IUpdatable {\n    root: PointerHandleableElement;\n    canvasDrawer: CanvasDrawer;\n    globalEvent: CubismGlobalEventSystem;\n    eventManger: CubismEventManager;\n\n    canvas: HTMLCanvasElement;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.root = new PointerHandleableElement();\n\n        this.globalEvent = new CubismGlobalEventSystem();\n\n        this.canvasDrawer = new CanvasDrawer(canvas, this.globalEvent);\n        this.eventManger = new CubismEventManager(this.globalEvent);\n\n        this.canvas = canvas;\n\n        this.registerRedraw();\n        //\n        // canvas.onpointermove = (e) => {\n        //     // Log.logDebug(\"Pointer move\", PointerPoint.createFromPointerEvent(e));\n        //     this.globalEvent.triggerGlobalEvent(Values.ON_MOVE, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        // }\n        //\n        // this.globalEvent.registerGlobalEvent(Values.ON_MOVE, (point: PointerPoint) => {\n        //     this.root.triggerOnMove(point);\n        // });\n\n        this.registerPointerEvents();\n    }\n\n    registerPointerEvents() {\n        this.canvas.onpointermove = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_MOVE, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_MOVE, (point: PointerPoint) => {\n            this.root.triggerOnMove(point);\n        });\n\n        this.canvas.onpointerdown = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_DOWN, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_DOWN, (point: PointerPoint) => {\n            this.root.triggerOnDown(point);\n        });\n\n        this.canvas.onpointerup = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_UP, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_UP, (point: PointerPoint) => {\n            this.root.triggerOnUp(point);\n        });\n    }\n\n\n    registerRedraw() {\n        this.globalEvent.registerGlobalEvent(Values.REDRAW, this.update.bind(this));\n    }\n\n    registerOnMove() {\n        this.globalEvent.registerGlobalEvent(Values.ON_MOVE, this.registerOnMove.bind(this));\n    }\n\n    // onMoveTrigger() {\n    //     this.root.triggerOnParentMove();\n    // }\n\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: PointerHandleableElement) {\n        this.setRootElement(root);\n        this.initRootElement();\n        this.canvasDrawer.state.needsRedraw = true;\n    }\n\n    initRootElement() {\n        this.root.init(\n            this.canvasDrawer,\n            new Point2D(this.canvas.width, this.canvas.height),\n            this.globalEvent\n        );\n    }\n\n    setRootElement(root: PointerHandleableElement) {\n        this.root = root;\n    }\n\n    update() {\n        this.canvasDrawer.clear();\n        if (this.root) {\n            this.root.render();\n        }\n    }\n}\n\n", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {PointerHandleableElement} from \"./PointerHandleableElement\";\nimport {PointerPoint} from \"../../datatypes/PointerPoint\";\nimport {Log} from \"../../debug/Log\";\nimport {Values} from \"../../constants/constants\";\n\nexport class InteractiveRect extends PointerHandleableElement {\n    background: string;\n    lineWidth: number;\n\n    constructor() {\n        super();\n        this.background = \"white\";\n        this.lineWidth = 10;\n    }\n\n    setLineWidth(width: number) {\n        this.lineWidth = width;\n        return this;\n    }\n\n    setBackgroundColor(color: string) {\n        this.background = color;\n        return this;\n    }\n\n    onMove(point: PointerPoint) {\n        super.onMove(point);\n        // Log.logDebug(\"hover on\", this);\n\n    }\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        Log.logDebug(\"down on\", this);\n    }\n\n    toString(): string {\n        return super.toString() + ` background:${this.background} lineWidth:${this.lineWidth}`;\n    }\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.setFillStyle(this.background);\n        c.setStrokeStyle(\"black\");\n        c.setStrokeWidth(this.lineWidth);\n        c.translate(this.position);\n        c.drawRect(0, 0, this.absWidth, this.absHeight);\n        c.restoreTranslate();\n        c.restoreFillStyle();\n    }\n}", "import {CanvasDrawer} from \"../../CanvasDrawer\";\nimport {PointerPoint} from \"../../../datatypes/PointerPoint\";\nimport {Log} from \"../../../debug/Log\";\nimport {LayoutValues} from \"../../../constants/constants\";\nimport {PointerHandleableElement} from \"../PointerHandleableElement\";\nimport {CubismGlobalEventSystem} from \"../../../events/CubismGlobalEventSystem\";\n\nexport class PointerHandleableLayout extends PointerHandleableElement {\n    private _children: PointerHandleableElement[] = [];\n\n    constructor(...children: PointerHandleableElement[]) {\n        super();\n        this._children = children;\n        Log.logDebug(\"Children\", this._children);\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem) {\n        super.setGlobalEventSystem(globalEvent);\n        for (let child of this.children) {\n            child.setGlobalEventSystem(globalEvent);\n        }\n    }\n\n    resize(x: number, y: number) {\n        super.resize(x, y);\n        Log.logDebug(\"absSize\", this.absSize);\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === LayoutValues.MATCH_PARENT) {\n                Log.log(\"Match parent X\", child);\n                x = this.absWidth;\n            }\n            if (y === LayoutValues.MATCH_PARENT) {\n                Log.log(\"Match parent Y\", child);\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.resize(x, y);\n        }\n    }\n\n    get children(): PointerHandleableElement[] {\n        return this._children;\n    }\n\n    set children(children: PointerHandleableElement[]) {\n        this._children = children;\n    }\n\n    pushChildren(...children: PointerHandleableElement[]): PointerHandleableLayout {\n        this.children.push(...children);\n        return this;\n    }\n\n    removeChild(child: PointerHandleableElement): void {\n        this.children.splice(this.children.indexOf(child), 1);\n    }\n\n    render() {\n        super.render();\n        for (let child of this.children) {\n            child.render();\n        }\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        super.setCanvasDrawer(c);\n        for (let child of this.children) {\n            child.setCanvasDrawer(c);\n        }\n    }\n\n    triggerOnMove(point: PointerPoint): void {\n        super.triggerOnMove(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentMove(pointInChild);\n        }\n    }\n\n    triggerOnDown(point: PointerPoint): void {\n        super.triggerOnDown(point);\n        let pointInChild = new PointerPoint(point.x - this.position.x, point.y - this.position.y, point.pressure);\n        for (let child of this.children) {\n            child.triggerOnParentDown(pointInChild);\n        }\n    }\n\n    triggerOnUp(point: PointerPoint): void {\n        super.triggerOnUp(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentUp(pointInChild);\n        }\n    }\n}", "import {InteractiveRect} from \"./InteractiveRect\";\nimport {PointerPoint} from \"../../datatypes/PointerPoint\";\nimport {Point2D} from \"../../datatypes/point\";\nimport {Log} from \"../../debug/Log\";\n\nexport class DraggableRect extends InteractiveRect {\n    private pointerRelativePosition: Point2D | null = null;\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.pointerRelativePosition = new Point2D(point.x - this.position.x, point.y - this.position.y);\n        // Log.logDebug(\"down on\", this.pointerRelativePosition);\n    }\n\n    onParentMove(point: PointerPoint) {\n        super.onParentMove(point);\n        if (this.pointerRelativePosition !== null) {\n            this.position = point.sub(this.pointerRelativePosition);\n            // this.triggerOnMove(point);\n            // this.globalEvent?.triggerGlobalEvent(Values.REDRAW, this);\n            this.c?.triggerRedraw();\n        }\n        // this.position = point;\n    }\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        Log.logDebug(\"up on\", this);\n        this.pointerRelativePosition = null;\n    }\n}", "import {InteractiveElement} from \"./ui/elements/InteractiveElement\";\nimport {Point2D} from \"./datatypes/point\";\nimport {PointerPoint} from \"./datatypes/PointerPoint\";\nimport {Cubism} from \"./ui/Cubism\";\nimport {Log} from \"./debug/Log\";\nimport {LayoutValues} from \"./constants/constants\";\nimport {InteractiveRect} from \"./ui/elements/InteractiveRect\";\nimport {PointerHandleableLayout} from \"./ui/elements/layouts/PointerHandleableLayout\";\nimport {DraggableRect} from \"./ui/elements/DraggableRect\";\n\nconsole.log(\"loading index.ts\");\n\n\n/**\n * Demo of a simple layout\n */\nfunction main() {\n    let canvas = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\n    let c = Cubism.createFromCanvas(canvas);\n\n    // let interactive = new InteractiveRect()\n    //     .pushOnMove((point: PointerPoint) => {\n    //         // Log.logDebug(\"onMove\", point);\n    //     })\n    //     .setWidth(100)\n    //     .setHeight(100)\n    //     .setBackgroundColor(\"green\")\n    //     .setPosFromXY(40, 40);\n\n    // canvas.onpointermove = (e) => {\n    //     interactive.triggerOnMove(new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n    // }\n\n    c.init(\n        new PointerHandleableLayout(\n            new InteractiveRect()\n                .setWidth(LayoutValues.MATCH_PARENT)\n                .setHeight(LayoutValues.MATCH_PARENT)\n                .setBackgroundColor(\"red\")\n                .setPosFromXY(0, 0),\n            new DraggableRect()\n                .setWidth(100)\n                .setHeight(100)\n                .setBackgroundColor(\"blue\")\n                .setPosFromXY(40, 40)\n                .setLineWidth(5),\n            new DraggableRect()\n                .setWidth(100)\n                .setHeight(100)\n                .setBackgroundColor(\"green\")\n                .setPosFromXY(200, 200)\n                .setLineWidth(5)\n        )\n    );\n}\n\nmain()\n"],
  "mappings": "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",
  "names": ["x", "y"]
}
