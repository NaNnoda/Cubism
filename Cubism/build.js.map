{
  "version": 3,
  "sources": ["src/Datatypes/TransformMatrix2D.ts", "src/State.ts", "src/Constants/Constants.ts", "src/CanvasDrawer.ts", "src/Events/CubismGlobalEventSystem.ts", "src/Events/CubismEventManager.ts", "src/Datatypes/Point.ts", "src/Elements/CubismElement.ts", "src/Elements/InteractiveElement.ts", "src/Elements/PointerHandleableElement.ts", "src/Datatypes/PointerPoint.ts", "src/Cubism.ts", "src/Theme/Colors.ts", "src/Theme/Theme.ts", "src/Elements/ThemedElement.ts", "src/Elements/DraggableRect.ts", "src/Elements/Layouts/PointerHandleableLayout.ts", "src/Elements/Layouts/LinearLayout.ts", "src/Elements/Layouts/VerticalLayout.ts", "src/Elements/ButtonElement.ts", "src/CubismBuilder.ts", "src/Index.ts"],
  "sourcesContent": ["/**\n * A class representing a 2D transformation matrix.\n */\nexport class TransformMatrix2D {\n    arr: number[][] = [];\n\n    /**\n     * Creates a new 2D transform matrix.\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\n     * @param m12 Vertical skewing.\n     * @param m21 Horizontal skewing.\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\n     * @param dx  Horizontal translation (moving).\n     * @param dy Vertical translation (moving).\n     */\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\n        this.arr = [\n            [m11, m12, dx],\n            [m21, m22, dy],\n            [0, 0, 1]\n        ];\n    }\n\n    get m11(): number {\n        return this.arr[0][0];\n    }\n\n    set m11(value: number) {\n        this.arr[0][0] = value;\n    }\n\n    get m12(): number {\n        return this.arr[0][1];\n    }\n\n    set m12(value: number) {\n        this.arr[0][1] = value;\n    }\n\n    get m21(): number {\n        return this.arr[1][0];\n    }\n\n    set m21(value: number) {\n        this.arr[1][0] = value;\n    }\n\n    get m22(): number {\n        return this.arr[1][1];\n    }\n\n    set m22(value: number) {\n        this.arr[1][1] = value;\n    }\n\n    get dx(): number {\n        return this.arr[0][2];\n    }\n\n    set dx(value: number) {\n        this.arr[0][2] = value;\n    }\n\n    get dy(): number {\n        return this.arr[1][2];\n    }\n\n    set dy(value: number) {\n        this.arr[1][2] = value;\n    }\n\n\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\n    }\n\n    get(x: number, y: number): number {\n        return this.arr[x][y];\n    }\n\n    set(x: number, y: number, value: number) {\n        // console.log(`Setting ${x}, ${y} to ${value}`);\n        this.arr[x][y] = value;\n    }\n\n    static identity(): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\n    }\n\n    static zero(): TransformMatrix2D {\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\n    }\n\n    static translation(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\n    }\n\n    static rotation(angle: number): TransformMatrix2D {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\n    }\n\n    static scale(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\n    }\n\n    clone(): TransformMatrix2D {\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\n    }\n\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\n        let newMatrix = TransformMatrix2D.zero();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let dotProduct = 0;\n                for (let k = 0; k < 3; k++) {\n                    dotProduct += this.get(i, k) * other.get(k, j);\n                }\n                newMatrix.set(i, j, dotProduct);\n            }\n        }\n        return newMatrix;\n    }\n\n    translate(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.translation(x, y));\n    }\n\n    rotate(angle: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.rotation(angle));\n    }\n\n    scale(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.scale(x, y));\n    }\n\n    toString(): string {\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\n    }\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {TransformMatrix2D} from \"./Datatypes/TransformMatrix2D\";\n\n/**\n * The state of the canvas\n */\nexport class CubismCanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n    }\n\n    private translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\n\n    set translate(offset: Point2D) {\n        let translateMatrix = this.translateMatrix.translate(offset.x, offset.y);\n        this.translates.push(translateMatrix);\n        this.setCtxTransform(translateMatrix);\n    }\n\n    setCtxTransform(t: TransformMatrix2D) {\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\n    }\n\n    restoreTranslate() {\n        let lastTranslate = this.popTranslate();\n        this.setCtxTransform(lastTranslate);\n    }\n\n    get translateMatrix(): TransformMatrix2D {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate(): TransformMatrix2D {\n        if (this.translates.length > 1) {\n            // console.log(\"pop translate\");\n            return this.translates.pop() as TransformMatrix2D;\n        }\n        return this.translates[0];\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "export class Values{\n\n}\nexport class LayoutValues{\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}\nexport class Orientation{\n    public static readonly HORIZONTAL = 1;\n    public static readonly VERTICAL = 0;\n}\nexport class Alignment{\n    public static readonly START = 0;\n    public static readonly END = 1;\n    public static readonly CENTER = 2;\n    public static readonly STRETCH = 3;\n}\nexport class Direction{\n    public static readonly LEFT = 0;\n    public static readonly RIGHT = 1;\n    public static readonly UP = 2;\n    public static readonly DOWN = 3;\n    public static readonly START = 4;\n    public static readonly END = 5;\n}\nexport class Axis{\n    public static readonly X = 0;\n    public static readonly Y = 1;\n}\nexport class PointerType{\n    public static readonly MOUSE = 0;\n    public static readonly TOUCH = 1;\n    public static readonly PEN = 2;\n}\nexport class GEventKeys{\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n    public static readonly ON_ENTER = \"onEnter\";\n    public static readonly ON_LEAVE = \"onLeave\";\n\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {CubismCanvasState} from \"./State\";\nimport {CubismGlobalEventSystem} from \"./Events/CubismGlobalEventSystem\";\nimport {GEventKeys, Values} from \"./Constants/Constants\";\n\n/**\n * Adaptor class for the canvas\n * with the ability to draw on it\n * and handle events\n */\nexport class CanvasDrawer {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n\n    state: CubismCanvasState; // the state of the canvas\n\n    globalEvent: CubismGlobalEventSystem;\n\n    /**\n     * Constructor of the CanvasDrawer\n     * @param canvas the canvas to draw on\n     * @param globalEvent the global event system\n     */\n    constructor(canvas: HTMLCanvasElement, globalEvent: CubismGlobalEventSystem) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.state = new CubismCanvasState(canvas, this.ctx);\n        this.globalEvent = globalEvent;\n        this.registerFrameUpdate();\n    }\n\n    get width() {\n        return this.canvas.width;\n    }\n\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    /**\n     * Register the frame update event\n     * @private\n     */\n    private registerFrameUpdate() {\n        this.globalEvent.registerGlobalEvent(GEventKeys.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    /**\n     * Things to do on every frame update\n     * @private\n     */\n    private frameUpdate() {\n        if (this.state.needsRedraw) {\n            this.triggerRedraw();\n            this.state.needsRedraw = false;\n        }\n    }\n\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Set the fill style(color) of the canvas\n     * @param style the style to set\n     */\n    setFillStyle(style: string) {\n        this.ctx.fillStyle = style;\n    }\n\n    /**\n     * Set the stroke style(color) of the canvas\n     * @param style the style to set\n     */\n    setStrokeStyle(style: string) {\n        this.ctx.strokeStyle = style;\n    }\n\n    /**\n     * Set the line width of the canvas\n     * @param width\n     */\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n    }\n\n    /**\n     * Translate the canvas\n     * @param offset\n     */\n    translate(offset: Point2D) {\n        this.state.translate = offset;\n    }\n\n    /**\n     * Restore translation and rotation to previous state\n     */\n    restoreTranslate() {\n        this.state.restoreTranslate();\n    }\n\n    /**\n     * Draw text on the canvas\n     * @param text the text to draw\n     * @param x the x position of the text\n     * @param y the y position of the text\n     */\n    fillText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    /**\n     * Draw a line with two Point2Ds\n     * @param begin the beginning of the line\n     * @param end the end of the line\n     */\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    /**\n     * Draw a line with four numbers\n     * @param beginX the x position of the beginning of the line\n     * @param beginY the y position of the beginning of the line\n     * @param endX the x position of the end of the line\n     * @param endY the y position of the end of the line\n     */\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRectWithPoints(p1: Point2D, p2: Point2D | null = null) {\n        if (p2 === null) {\n            this.drawRect(0, 0, p1.x, p1.y);\n        } else {\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\n        }\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    /**\n     * Draw an HTML Canvas Path on the canvas\n     * @param path\n     */\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    /**\n     * Close the drawing path\n     */\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    /**\n     * Set the need redraw flag\n     * @param redraw\n     */\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    /**\n     * Trigger a redraw event\n     * Seems more responsive than setRedraw()\n     */\n    triggerRedraw() {\n        this.globalEvent.triggerGlobalEvent(GEventKeys.REDRAW);\n    }\n}\n", "\n/**\n * System that handles the registration and trigger of global events\n */\nexport class CubismGlobalEventSystem {\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    constructor() {\n    }\n\n    registerGlobalEvent(event: string, callback: Function): void {\n        this.getEvent(event).push(callback);\n    }\n\n    unregisterGlobalEvent(event: string, callback: Function): void {\n        this._globalEventListeners[event].splice(this._globalEventListeners[event].indexOf(callback), 1);\n    }\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n        }\n        return this._globalEventListeners[event];\n    }\n\n    triggerGlobalEvent(event: string, ...args: any[]): void {\n        this.getEvent(event).forEach((callback) => {\n            callback(...args);\n        });\n    }\n}", "import {GEventKeys, Values} from \"../Constants/Constants\";\nimport {CubismGlobalEventSystem} from \"./CubismGlobalEventSystem\";\n\nexport class CubismEventManager{\n    globalEvent: CubismGlobalEventSystem;\n    constructor(globalEvent: CubismGlobalEventSystem) {\n        this.globalEvent = globalEvent;\n        this.startFixedUpdate();\n        this.startFrameUpdate();\n    }\n    startFixedUpdate() {\n        setInterval(this.doFixUpdate.bind(this), 1000 / 60);\n    }\n    doFixUpdate() {\n        this.globalEvent.triggerGlobalEvent(GEventKeys.FIX_UPDATE);\n    }\n\n    startFrameUpdate() {\n        this.globalEvent.triggerGlobalEvent(GEventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.startFrameUpdate.bind(this));\n    }\n}", "/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n\n    get x() {\n        return this.arr[0];\n    }\n\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n\n    get y() {\n        return this.arr[1];\n    }\n\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n\n\n    /**\n     * Offset the point by the given amount.\n     * @param offset\n     */\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n        return this;\n    }\n\n    /**\n     * Offset the point by the negative given amount.\n     * @param offset\n     */\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n        return this;\n    }\n\n    add(other: Point2D): Point2D {\n        return this.clone().offset(other);\n    }\n\n    sub(other: Point2D): Point2D {\n        return this.clone().nOffset(other);\n    }\n\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "import {Point2D} from \"../Datatypes/Point\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {CubismGlobalEventSystem} from \"../Events/CubismGlobalEventSystem\";\nimport {LayoutValues} from \"../Constants/Constants\";\n\n/**\n * Base class for all elements that can be rendered on the canvas\n * With size, position, and global events\n */\nexport class CubismElement implements IRenderable {\n    _position: Point2D;\n    _size: Point2D;\n    _absSize: Point2D; // Absolute size is the size of the element\n    c: CanvasDrawer | null;\n    globalEvent: CubismGlobalEventSystem | null = null;\n\n    needsResize: boolean;\n\n    constructor() {\n        this._position = new Point2D(0, 0);\n        this._size = new Point2D(LayoutValues.MATCH_PARENT, LayoutValues.MATCH_PARENT);\n        this._absSize = new Point2D(0, 0);\n        this.c = null;\n\n        this.needsResize = true;\n    }\n\n    set position(pos: Point2D) {\n        this._position = pos;\n        this.c?.setRedraw(true);\n    }\n\n\n    get position(): Point2D {\n        return this._position;\n    }\n\n    get size(): Point2D {\n        return this._size;\n    }\n\n    set size(size: Point2D) {\n        this._size = size;\n        this.needsResize = true;\n        this.c?.setRedraw(true);\n    }\n\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c?.setRedraw(true);\n    }\n\n    init(c: CanvasDrawer, parentSize: Point2D, globalEvent: CubismGlobalEventSystem): void {\n        this.setCanvasDrawer(c);\n        this.updateShape(parentSize.x, parentSize.y);\n        this.setGlobalEventSystem(globalEvent);\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem): void {\n        this.globalEvent = globalEvent;\n    }\n\n    updateShape(x: number, y: number): void {\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n\n    get height(): number {\n        return this.size.y;\n    }\n\n    set height(y:number) {\n        this.size.y = y;\n        this.needsResize = true;\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.size.x = x;\n        this.needsResize = true;\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setCanvasDrawer(c: CanvasDrawer): void {\n        this.c = c;\n    }\n\n    setWidth(width: number){\n        this.width = width;\n        // this.absWidth = -1;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        // this.absHeight = -1;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D) {\n        this.position = pos;\n        return this;\n    }\n    setPosFromXY(x: number, y: number) {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n    render(): void {\n        if (this.c === null) {\n            throw new Error(\"CubismElement.render(): CubismCanvasManager is null\");\n        }\n    }\n    toString(): string {\n        return `${this.elementName} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n    get elementName(): string {\n        return this.constructor.name;\n    }\n}\n", "import {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nimport {CubismElement} from \"./CubismElement\";\n\nexport class InteractiveElement extends CubismElement {\n    private events: { [key: string]: Function[] } = {};\n\n    pushOn(event: string, ...callbacks: Function[]): void {\n        if (this.events[event] === undefined) {\n            this.events[event] = [];\n        }\n        this.events[event].push(...callbacks);\n    }\n\n    getOn(event: string): Function[] {\n        return this.events[event];\n    }\n\n    removeOn(event: string, callback: Function): void {\n        this.events[event].splice(this.events[event].indexOf(callback), 1);\n    }\n}", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {GEventKeys, Values} from \"../Constants/Constants\";\n\nexport class PointerHandleableElement extends InteractiveElement {\n    _pointerWasNotInRange: boolean = true;\n    _hovered: boolean = false;\n    _pressed: boolean = false;\n\n    get pressed(): boolean {\n        return this._pressed;\n    }\n\n    set pressed(value: boolean) {\n        this._pressed = value;\n    }\n\n    get hovered(): boolean {\n        return this._hovered;\n    }\n\n    set hovered(value: boolean) {\n        this._hovered = value;\n    }\n\n    constructor() {\n        super();\n        this.pushOnParentMove((point: PointerPoint) => {\n            this.onParentMove(point);\n        });\n        this.pushOnParentDown((point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(GEventKeys.ON_MOVE, (point: PointerPoint) => {\n            this.onMove(point);\n        });\n        this.pushOn(GEventKeys.ON_PARENT_DOWN, (point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(GEventKeys.ON_DOWN, (point: PointerPoint) => {\n            this.onDown(point);\n        });\n        this.pushOn(GEventKeys.ON_PARENT_UP, (point: PointerPoint) => {\n            this.onParentUp(point);\n        });\n        this.pushOn(GEventKeys.ON_UP, (point: PointerPoint) => {\n            this.onUp(point);\n        });\n        this.pushOn(GEventKeys.ON_ENTER, (point: PointerPoint) => {\n            this.onEnter(point);\n        });\n        this.pushOn(GEventKeys.ON_LEAVE, (point: PointerPoint) => {\n            this.onLeave(point);\n        });\n    }\n\n    public triggerOnParentDown(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentDown(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnDown(point);\n        }\n    }\n\n    public triggerOnParentUp(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentUp(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnUp(point);\n        }\n    }\n\n    public triggerOnUp(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onUp(point: PointerPoint): void {\n        this.pressed = false;\n    }\n\n    public triggerOnDown(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onDown(point: PointerPoint): void {\n        this.pressed = true;\n    }\n\n    public triggerOnMove(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onMove(point: PointerPoint): void {\n\n    }\n\n    public pushOnMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(GEventKeys.ON_MOVE, ...callbacks);\n        return this;\n    }\n\n    public removeOnMove(callback: Function): void {\n        this.removeOn(GEventKeys.ON_MOVE, callback);\n    }\n\n    public onParentMove(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnMove(point);\n        }\n        if (this.inRange(point) && this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = false;\n            this.triggerOnEnter(point);\n\n        }\n        if (!this.inRange(point) && !this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = true;\n            this.triggerOnLeave(point);\n        }\n    }\n\n    pushOnParentMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(GEventKeys.ON_PARENT_MOVE, ...callbacks);\n        return this;\n    }\n\n    triggerOnParentMove(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_PARENT_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    inRange(point: PointerPoint): boolean {\n        return point.x >= this.position.x &&\n            point.x <= this.position.x + this.absWidth &&\n            point.y >= this.position.y &&\n            point.y <= this.position.y + this.absHeight;\n    }\n\n    public onEnter(point: PointerPoint): void {\n        this.hovered = true;\n    }\n\n    triggerOnEnter(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_ENTER);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    private pushOnParentDown(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(GEventKeys.ON_PARENT_DOWN, ...callbacks);\n        return this;\n    }\n\n    triggerOnLeave(point: PointerPoint): void {\n        let e = this.getOn(GEventKeys.ON_LEAVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    onLeave(point: PointerPoint): void {\n        this.hovered = false;\n    }\n}", "import {Point2D} from \"./Point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismGlobalEventSystem} from \"./Events/CubismGlobalEventSystem\";\nimport {CubismEventManager} from \"./Events/CubismEventManager\";\nimport {GEventKeys, Values} from \"./Constants/Constants\";\nimport {Point2D} from \"./Datatypes/Point\";\nimport {PointerHandleableElement} from \"./Elements/PointerHandleableElement\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\n\n/**\n * Entry point of the application\n */\nexport class Cubism {\n    root: PointerHandleableElement;\n    canvasDrawer: CanvasDrawer;\n    globalEvent: CubismGlobalEventSystem;\n    eventManger: CubismEventManager;\n    canvas: HTMLCanvasElement;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.root = new PointerHandleableElement();\n        this.globalEvent = new CubismGlobalEventSystem();\n        this.canvasDrawer = new CanvasDrawer(canvas, this.globalEvent);\n        this.eventManger = new CubismEventManager(this.globalEvent);\n        this.canvas = canvas;\n        this.registerRedraw();\n        this.registerPointerEvents();\n    }\n\n    /**\n     * Register pointer events\n     */\n    registerPointerEvents() {\n        // on move\n        this.canvas.onpointermove = (e) => {\n            this.globalEvent.triggerGlobalEvent(GEventKeys.ON_MOVE, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(GEventKeys.ON_MOVE, (point: PointerPoint) => {\n            this.root.triggerOnMove(point);\n        });\n        // on down\n        this.canvas.onpointerdown = (e) => {\n            this.globalEvent.triggerGlobalEvent(GEventKeys.ON_DOWN, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(GEventKeys.ON_DOWN, (point: PointerPoint) => {\n            this.root.triggerOnDown(point);\n        });\n        // on up\n        this.canvas.onpointerup = (e) => {\n            this.globalEvent.triggerGlobalEvent(GEventKeys.ON_UP, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(GEventKeys.ON_UP, (point: PointerPoint) => {\n            this.root.triggerOnUp(point);\n        });\n    }\n\n\n    registerRedraw() {\n        this.globalEvent.registerGlobalEvent(GEventKeys.REDRAW, this.redraw.bind(this));\n    }\n\n    registerOnMove() {\n        this.globalEvent.registerGlobalEvent(GEventKeys.ON_MOVE, this.registerOnMove.bind(this));\n    }\n\n    /**\n     * Create a new Cubism object from a canvas object\n     * @param canvas the canvas to draw on\n     */\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    /**\n     * Create a new Cubism object from a canvas id\n     * @param id the id of the canvas\n     */\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: PointerHandleableElement) {\n        this.setRootElement(root);\n        this.initRootElement();\n        this.canvasDrawer.setRedraw(true);\n    }\n\n    private initRootElement() {\n        this.root.init(\n            this.canvasDrawer,\n            new Point2D(this.canvas.width, this.canvas.height),\n            this.globalEvent\n        );\n    }\n\n    /**\n     * Set the root element of the application\n     * @param root\n     * @private\n     */\n    private setRootElement(root: PointerHandleableElement) {\n        this.root = root;\n    }\n\n    /**\n     * Redraw the whole canvas from the root element\n     */\n    redraw() {\n        this.canvasDrawer.clear();\n        if (this.root) {\n            this.root.render();\n        }\n    }\n}\n\n", "export class Colors {\n    public static readonly black = \"#000000\";\n    public static readonly white = \"#ffffff\";\n    public static readonly pureRed = \"#ff0000\";\n    public static readonly pureGreen = \"#00ff00\";\n    public static readonly pureBlue = \"#0000ff\";\n    public static readonly pureYellow = \"#ffff00\";\n    public static readonly pureCyan = \"#00ffff\";\n    public static readonly pureMagenta = \"#ff00ff\";\n    public static readonly orange = \"#ff8000\";\n    public static readonly purple = \"#8000ff\";\n    public static readonly pink = \"#ff0080\";\n    public static readonly brown = \"#804000\";\n    public static readonly grey100 = \"#efefef\";\n    public static readonly grey200 = \"#a0a0a0\";\n    public static readonly grey300 = \"#808080\";\n    public static readonly grey400 = \"#606060\";\n    public static readonly grey500 = \"#404040\";\n    public static readonly grey600 = \"#202020\";\n    public static readonly grey700 = \"#000000\";\n    public static readonly blue100 = \"#a6d5ff\";\n    public static readonly blue200 = \"#7ec0ff\";\n    public static readonly blue300 = \"#57abff\";\n    public static readonly blue400 = \"#2e96ff\";\n    public static readonly blue500 = \"#0080ff\";\n    public static readonly blue600 = \"#0060cc\";\n    public static readonly blue700 = \"#004099\";\n    public static readonly green100 = \"#a6ffcc\";\n    public static readonly green200 = \"#7effa6\";\n    public static readonly green300 = \"#57ff80\";\n    public static readonly green400 = \"#2eff5a\";\n    public static readonly green500 = \"#00ff00\";\n    public static readonly green600 = \"#00cc00\";\n    public static readonly green700 = \"#009900\";\n    public static readonly red100 = \"#ffcccc\";\n    public static readonly red200 = \"#ff9999\";\n    public static readonly red300 = \"#ff6666\";\n    public static readonly red400 = \"#ff3333\";\n    public static readonly red500 = \"#ff0000\";\n    public static readonly red600 = \"#cc0000\";\n    public static readonly red700 = \"#990000\";\n    public static readonly yellow100 = \"#ffffcc\";\n    public static readonly yellow200 = \"#ffff99\";\n    public static readonly yellow300 = \"#ffff66\";\n    public static readonly yellow400 = \"#ffff33\";\n    public static readonly yellow500 = \"#ffff00\";\n    public static readonly yellow600 = \"#cccc00\";\n    public static readonly yellow700 = \"#999900\";\n    public static readonly cyan100 = \"#ccffff\";\n    public static readonly cyan200 = \"#99ffff\";\n    public static readonly cyan300 = \"#66ffff\";\n    public static readonly cyan400 = \"#33ffff\";\n    public static readonly cyan500 = \"#00ffff\";\n    public static readonly cyan600 = \"#00cccc\";\n    public static readonly cyan700 = \"#009999\";\n    public static readonly magenta100 = \"#ffccff\";\n    public static readonly magenta200 = \"#ff99ff\";\n    public static readonly magenta300 = \"#ff66ff\";\n    public static readonly magenta400 = \"#ff33ff\";\n    public static readonly magenta500 = \"#ff00ff\";\n    public static readonly magenta600 = \"#cc00cc\";\n    public static readonly magenta700 = \"#990099\";\n    public static readonly orange100 = \"#ffcc99\";\n    public static readonly orange200 = \"#ff9966\";\n    public static readonly orange300 = \"#ff9933\";\n    public static readonly orange400 = \"#ff9900\";\n    public static readonly orange500 = \"#ff8000\";\n    public static readonly orange600 = \"#cc6600\";\n    public static readonly orange700 = \"#994c00\";\n    public static readonly purple100 = \"#cc99ff\";\n    public static readonly purple200 = \"#9966ff\";\n    public static readonly purple300 = \"#9933ff\";\n    public static readonly purple400 = \"#9900ff\";\n    public static readonly purple500 = \"#8000ff\";\n    public static readonly purple600 = \"#6600cc\";\n    public static readonly purple700 = \"#4c0099\";\n    public static readonly pink100 = \"#ff99cc\";\n    public static readonly pink200 = \"#ff6699\";\n    public static readonly pink300 = \"#ff3399\";\n    public static readonly pink400 = \"#ff0099\";\n    public static readonly pink500 = \"#ff0080\";\n    public static readonly pink600 = \"#cc0066\";\n    public static readonly pink700 = \"#99004c\";\n    public static readonly brown100 = \"#cc9966\";\n    public static readonly brown200 = \"#996633\";\n    public static readonly brown300 = \"#994c00\";\n    public static readonly brown400 = \"#993300\";\n    public static readonly brown500 = \"#804000\";\n    public static readonly brown600 = \"#663300\";\n    public static readonly brown700 = \"#4c2600\";\n\n    public static readonly lightGray = \"#c0c0c0\";\n    public static readonly darkGray = \"#404040\";\n    public static readonly lightRed = \"#ff8080\";\n    public static readonly lightGreen = \"#80ff80\";\n    public static readonly lightBlue = \"#8080ff\";\n    public static readonly lightYellow = \"#ffff80\";\n    public static readonly lightCyan = \"#80ffff\";\n    public static readonly lightMagenta = \"#ff80ff\";\n    public static readonly darkRed = \"#800000\";\n    public static readonly darkGreen = \"#008000\";\n    public static readonly darkBlue = \"#000080\";\n    public static readonly darkYellow = \"#808000\";\n    public static readonly darkCyan = \"#008080\";\n    public static readonly darkMagenta = \"#800080\";\n    public static readonly transparent = \"rgba(0,0,0,0)\";\n    public static readonly transparentBlack = \"rgba(0,0,0,0.5)\";\n    public static readonly transparentWhite = \"rgba(255,255,255,0.5)\";\n    public static readonly transparentRed = \"rgba(255,0,0,0.5)\";\n    public static readonly transparentGreen = \"rgba(0,255,0,0.5)\";\n    public static readonly transparentBlue = \"rgba(0,0,255,0.5)\";\n    public static readonly transparentYellow = \"rgba(255,255,0,0.5)\";\n    public static readonly transparentCyan = \"rgba(0,255,255,0.5)\";\n    public static readonly transparentMagenta = \"rgba(255,0,255,0.5)\";\n    public static readonly transparentOrange = \"rgba(255,128,0,0.5)\";\n    public static readonly transparentPurple = \"rgba(128,0,255,0.5)\";\n    public static readonly transparentPink = \"rgba(255,0,128,0.5)\";\n}", "import {Colors} from \"./Colors\";\n\nexport class CubismElementThemeRoot {\n    color: ColorTheme;\n    font: FontTheme;\n    constructor(color: ColorTheme = new ColorTheme(), font: FontTheme = new FontTheme()) {\n        this.color = color;\n        this.font = font;\n    }\n}\n\nexport class ColorTheme {\n    primary: string = Colors.blue500;\n    setPrimary(color: string) {\n        this.primary = color;\n        return this;\n    }\n    secondary: string = Colors.blue700;\n    setSecondary(color: string) {\n        this.secondary = color;\n        return this;\n    }\n    background: string = Colors.white;\n    setBackground(color: string) {\n        this.background = color;\n        return this;\n    }\n    border: string = this.primary;\n    setBorder(color: string) {\n        this.border = color;\n        return this;\n    }\n\n    text: string = Colors.black;\n    setText(color: string) {\n        this.text = color;\n        return this;\n    }\n}\nexport class OnClickColorTheme extends ColorTheme {\n    background: string = Colors.grey200;\n}\nexport class OnHoverColorTheme extends ColorTheme {\n    background: string = Colors.grey100;\n}\n\n\nexport class FontTheme {\n    fontSizes: number = 14;\n    setFontSize(size: number) {\n        this.fontSizes = size;\n        return this;\n    }\n    fontFamily: string = \"Arial\";\n    setFontFamily(font: string) {\n        this.fontFamily = font;\n        return this;\n    }\n}", "import {CanvasDrawer} from \"../CanvasDrawer\";\nimport {PointerHandleableElement} from \"./PointerHandleableElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nimport {ColorTheme, CubismElementThemeRoot, FontTheme, OnClickColorTheme, OnHoverColorTheme} from \"../Theme/Theme\";\n\nexport class ThemedElement extends PointerHandleableElement {\n    _currTheme: CubismElementThemeRoot\n\n    defaultTheme: CubismElementThemeRoot\n    hoverTheme: CubismElementThemeRoot\n    pressedTheme: CubismElementThemeRoot\n\n    setFontTheme(theme: FontTheme): ThemedElement {\n        this.defaultTheme.font = theme;\n        this.hoverTheme.font = theme;\n        this.pressedTheme.font = theme;\n        return this;\n    }\n\n    get currTheme(): CubismElementThemeRoot {\n        return this._currTheme;\n    }\n\n    set currTheme(theme: CubismElementThemeRoot) {\n\n        this._currTheme = theme;\n    }\n\n    constructor() {\n        super();\n        this.defaultTheme = new CubismElementThemeRoot(\n            new ColorTheme()\n        );\n        this.hoverTheme = new CubismElementThemeRoot(\n            new OnHoverColorTheme()\n        );\n        this.pressedTheme = new CubismElementThemeRoot(\n            new OnClickColorTheme()\n        )\n        this._currTheme = this.defaultTheme;\n        this.currTheme = this.defaultTheme;\n    }\n\n    onMove(point: PointerPoint): void {\n        super.onMove(point);\n        this.c?.setRedraw(true);\n    }\n\n    onDown(point: PointerPoint): void {\n        super.onDown(point);\n        this.c?.setRedraw(true);\n    }\n\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        this.c?.setRedraw(true);\n    }\n\n    onEnter(point: PointerPoint) {\n        super.onEnter(point);\n        this.c?.setRedraw(true);\n    }\n\n    onLeave(point: PointerPoint) {\n        super.onLeave(point);\n        this.c?.setRedraw(true);\n    }\n\n\n    setDefaultTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.defaultTheme = theme;\n        return this;\n    }\n\n    setHoverTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.hoverTheme = theme;\n        return this;\n    }\n\n    setPressTheme(theme: CubismElementThemeRoot): ThemedElement {\n        this.pressedTheme = theme;\n        return this;\n    }\n\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.translate(this.position);\n\n        this.currTheme = this.defaultTheme;\n\n        if (this.hovered) {\n            this.currTheme = this.hoverTheme;\n        }\n\n        if (this.pressed) {\n            this.currTheme = this.pressedTheme;\n        }\n\n        c.setFillStyle(this.currTheme.color.background);\n        c.setStrokeStyle(this.currTheme.color.border);\n\n        c.drawRectWithPoints(this.absSize);\n        c.restoreTranslate();\n    }\n}", "import {ThemedElement} from \"./ThemedElement\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {Point2D} from \"../Datatypes/Point\";\n\nexport class DraggableRect extends ThemedElement {\n    private pointerRelativePosition: Point2D | null = null;\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.pointerRelativePosition = new Point2D(point.x - this.position.x, point.y - this.position.y);\n        // Log.logDebug(\"down on\", this.pointerRelativePosition);\n    }\n\n    onParentMove(point: PointerPoint) {\n        super.onParentMove(point);\n        if (this.pointerRelativePosition !== null) {\n            this.position = point.sub(this.pointerRelativePosition);\n            this.c?.triggerRedraw();\n        }\n    }\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        // Log.logDebug(\"up on\", this);\n        this.pointerRelativePosition = null;\n    }\n}", "import {CanvasDrawer} from \"../../CanvasDrawer\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {LayoutValues} from \"../../Constants/Constants\";\nimport {PointerHandleableElement} from \"../PointerHandleableElement\";\nimport {CubismGlobalEventSystem} from \"../../Events/CubismGlobalEventSystem\";\n\nexport class PointerHandleableLayout extends PointerHandleableElement {\n    private _children: PointerHandleableElement[] = [];\n\n    constructor(...children: PointerHandleableElement[]) {\n        super();\n        this._children = children;\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem) {\n        super.setGlobalEventSystem(globalEvent);\n        for (let child of this.children) {\n            child.setGlobalEventSystem(globalEvent);\n        }\n    }\n\n    updateShape(x: number, y: number) {\n        super.updateShape(x, y);\n        this.updateChildrenShape()\n    }\n\n    updateChildrenShape() {\n        this.updateChildrenSize();\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenSize() {\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === LayoutValues.MATCH_PARENT) {\n                x = this.absWidth;\n            }\n            if (y === LayoutValues.MATCH_PARENT) {\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.updateShape(x, y);\n        }\n    }\n\n    updateChildrenPosition() {\n\n    }\n\n    get children(): PointerHandleableElement[] {\n        return this._children;\n    }\n\n    set children(children: PointerHandleableElement[]) {\n        this._children = children;\n    }\n\n    pushChildren(...children: PointerHandleableElement[]): PointerHandleableLayout {\n        this.children.push(...children);\n        return this;\n    }\n\n    removeChild(child: PointerHandleableElement): void {\n        this.children.splice(this.children.indexOf(child), 1);\n    }\n\n    render() {\n        super.render();\n        this.c?.translate(this.position);\n        for (let child of this.children) {\n            child.render();\n        }\n        this.c?.restoreTranslate();\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        super.setCanvasDrawer(c);\n        for (let child of this.children) {\n            child.setCanvasDrawer(c);\n        }\n    }\n\n    triggerOnMove(point: PointerPoint): void {\n        super.triggerOnMove(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentMove(pointInChild);\n        }\n    }\n\n    triggerOnDown(point: PointerPoint): void {\n        super.triggerOnDown(point);\n        let pointInChild = new PointerPoint(point.x - this.position.x, point.y - this.position.y, point.pressure);\n        for (let child of this.children) {\n            child.triggerOnParentDown(pointInChild);\n        }\n    }\n\n    triggerOnUp(point: PointerPoint): void {\n        super.triggerOnUp(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentUp(pointInChild);\n        }\n    }\n}", "import {PointerHandleableLayout} from \"./PointerHandleableLayout\";\nexport abstract class LinearLayout extends PointerHandleableLayout {\n\n}", "import {LinearLayout} from \"./LinearLayout\";\nimport {Point2D} from \"../../Datatypes/Point\";\n\nexport class VerticalLayout extends LinearLayout {\n    updateChildrenPosition() {\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            y += child.height;\n        }\n    }\n}", "import {PointerPoint} from \"../Datatypes/PointerPoint\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\nimport {ThemedElement} from \"./ThemedElement\";\nimport {FontTheme} from \"../Theme/Theme\";\n\nexport class ButtonElement extends ThemedElement {\n    text: string;\n\n    constructor(text: string = \"Button\") {\n        super();\n        this.text = text;\n        this.setFontTheme(new FontTheme().setFontSize(30));\n    }\n\n    setText(text: string): ButtonElement {\n        this.text = text;\n        return this;\n    }\n\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.setFillStyle(this.currTheme.color.text);\n        c.fillText(this.text, 10, 30);\n    }\n}", "import {Cubism} from \"./Cubism\";\nimport {VerticalLayout} from \"./Elements/Layouts/VerticalLayout\";\nimport {ColorTheme} from \"./Theme/Theme\";\nimport {Colors} from \"./Theme/Colors\";\nimport {ButtonElement} from \"./Elements/ButtonElement\";\nimport {CubismElement} from \"./Elements/CubismElement\";\nimport {PointerHandleableElement} from \"./Elements/PointerHandleableElement\";\nimport {DraggableRect} from \"./Elements/DraggableRect\";\n\nexport class CubismBuilder{\n\n    get cubism(){\n        return Cubism;\n    }\n    get c(){\n        return this.cubism;\n    }\n    verticalLayout(...children: PointerHandleableElement[]){\n        return new VerticalLayout(...children);\n    }\n\n    v(...children: PointerHandleableElement[]){\n        return this.verticalLayout(...children);\n    }\n\n    get colorTheme(){\n        return new ColorTheme;\n    }\n\n    colors(){\n        return Colors;\n    }\n    get button(){\n        return new ButtonElement();\n    }\n\n    get draggableRect(){\n        return new DraggableRect();\n    }\n}", "import {Cubism} from \"./Cubism\";\nimport {DraggableRect} from \"./Elements/DraggableRect\";\nimport {VerticalLayout} from \"./Elements/Layouts/VerticalLayout\";\nimport {ButtonElement} from \"./Elements/ButtonElement\";\nimport {Colors} from \"./Theme/Colors\";\nimport {ColorTheme, CubismElementThemeRoot} from \"./Theme/Theme\";\nimport {CubismBuilder} from \"./CubismBuilder\";\nimport {build} from \"esbuild\";\n\n\nconsole.log(\"loading Index.ts\");\n\nconsole.log();\n\n\nclass LiveDemo {\n\n    Cubism = Cubism;\n\n    VerticalLayout = VerticalLayout;\n    ButtonElement = ButtonElement;\n    DraggableRect = DraggableRect;\n    CubismElementThemeRoot = CubismElementThemeRoot;\n    ColorTheme = ColorTheme;\n    Colors = Colors;\n    // global\n\n    builder: CubismBuilder\n\n     environmentName = \"b\";\n\n    codeText: HTMLTextAreaElement;\n\n    constructor(global: any) {\n        console.log(\"Test\");\n        this.codeText = document.getElementById(\"codeText\") as HTMLTextAreaElement;\n        this.codeText.value = this.initFunctionToString();\n        this.builder = new CubismBuilder();\n        // this.global = global;\n        this.userFunction = this.getUserFunction();\n    }\n\n    userFunction: (e: any) => void;\n\n    main() {\n        let updateButton = document.getElementById(\"update\") as HTMLButtonElement;\n        updateButton.onclick = this.updateCubism.bind(this);\n        this.updateCubism();\n    }\n\n    updateCubism() {\n        console.log(\"update\");\n        this.updateUserFunction();\n        this.runUserFunction();\n    }\n\n    initFunctionToString() {\n\n        let s = defaultInitCode.toString();\n        // Remove the first and last line\n        s = s.substring(s.indexOf(\"{\") + 1, s.lastIndexOf(\"}\"));\n        // Remove all the spaces\n        s = s.replace(/  /g, \"\");\n\n\n        // s = s.replace(/([^\\.])\\b([A-Z][a-z]+)\\b/gm, \"$1e.$2\");\n\n        return s;\n    }\n\n    getUserFunction() {\n        let code = this.codeText.value;\n        console.log(`code: ${code}`);\n        return new Function(this.environmentName, code) as (e: any) => void;\n    }\n\n    updateUserFunction() {\n        this.userFunction = this.getUserFunction();\n    }\n\n    runUserFunction() {\n        this.userFunction(this.builder);\n    }\n}\n\nfunction defaultInitCode(b: CubismBuilder) {\n    console.log(`Builder is ${b}`)\n    let c = b.cubism.createFromId(\"mainCanvas\");\n    c.init(\n        b.v(\n            b.draggableRect\n                .setWidth(100)\n                .setHeight(100),\n            b.draggableRect\n                .setWidth(100)\n                .setHeight(100),\n            b.button\n                .setText(\"Button\")\n                .setHeight(50)\n                .setWidth(100)\n        )\n    )\n}\n\nfunction getCode(funcString: string) {\n    return funcString.substring(funcString.indexOf(\"{\") + 1, funcString.lastIndexOf(\"}\"));\n}\n\nlet test = new LiveDemo(this);\ntest.main();"],
  "mappings": "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",
  "names": []
}
