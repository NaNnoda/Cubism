{
  "version": 3,
  "sources": ["src/datatypes/point.ts", "src/ui/State.ts", "src/ui/CanvasDrawer.ts", "src/ui/elements/CubismElement.ts", "src/ui/CubismGlobalEventSystem.ts", "src/ui/Cubism.ts", "src/ui/elements/RectangleElement.ts", "src/ui/elements/layouts/LayoutElement.ts", "src/ui/elements/InteractiveElement.ts", "src/datatypes/PointerPoint.ts", "src/index.ts"],
  "sourcesContent": ["/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n    get x() {\n        return this.arr[0];\n    }\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n    get y() {\n        return this.arr[1];\n    }\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    sub(other: Point2D): Point2D {\n        return new Point2D(this.x - other.x, this.y - other.y);\n    }\n    add(other: Point2D): Point2D {\n        return new Point2D(this.x + other.x, this.y + other.y);\n    }\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "import {Point2D} from \"../datatypes/point\";\n\nexport class CubismState {\n    private lineWidths: number[] = [10];\n\n    set lineWidth(lineWidth: number) {\n        this.lineWidths.push(lineWidth);\n    }\n\n    get lineWidth() {\n        return this.lineWidths[this.lineWidths.length - 1];\n    }\n\n    popLineWidth() {\n        if (this.lineWidths.length > 1) {\n            this.lineWidths.pop();\n        }\n        return this.lineWidth;\n    }\n\n    private fillStyles: string[] = [\"gray\"];\n\n    set fillStyle(style: string) {\n        this.fillStyles.push(style);\n    }\n\n    get fillStyle() {\n        return this.fillStyles[this.fillStyles.length - 1];\n    }\n\n    popFillStyle() {\n        if (this.fillStyles.length > 1) {\n            this.fillStyles.pop();\n        }\n        return this.fillStyle;\n    }\n\n\n    private strokeStyles: string[] = [\"black\"];\n\n    set strokeStyle(style: string) {\n        this.strokeStyles.push(style);\n    }\n\n    get strokeStyle() {\n        return this.strokeStyles[this.strokeStyles.length - 1];\n    }\n\n    popStrokeStyle() {\n        if (this.strokeStyles.length > 1) {\n            this.strokeStyles.pop();\n        }\n        return this.strokeStyle;\n    }\n\n    private translates: Point2D[] = [new Point2D(0, 0)];\n\n    set translate(offset: Point2D) {\n        console.log(\"set translate\", offset.x, offset.y);\n        this.translates.push(offset);\n        console.log(\"Current translates\", this.translates);\n        console.log(\"Size\", this.translates.length);\n    }\n\n    get translate() {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate() {\n        if (this.translates.length > 1) {\n            this.translates.pop();\n        }\n        return this.translate;\n    }\n}\n", "import {Point2D} from \"../datatypes/point\";\nimport {CubismState} from \"./State\";\n\nexport class CanvasDrawer {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    state: CubismState;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.state = new CubismState();\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    }\n\n    clear() {\n        this.canvas.width = this.canvas.width;\n    }\n\n    setFillStyle(color: string) {\n        this.ctx.fillStyle = color;\n        this.state.fillStyle = color;\n    }\n\n    restoreFillStyle() {\n        this.ctx.fillStyle = this.state.popFillStyle();\n    }\n\n    translate(offset: Point2D) {\n        console.log(\"translate\", offset);\n        this.state.translate = offset;\n        this.ctx.translate(offset.x, offset.y);\n    }\n\n    restoreTranslate() {\n        let lastTranslate = this.state.popTranslate();\n        console.log(\"restoreTranslate\", lastTranslate.x, lastTranslate.y);\n        this.ctx.translate(-lastTranslate.x, -lastTranslate.y);\n    }\n\n    drawText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    setStrokeStyle(color: string) {\n        this.ctx.strokeStyle = color;\n        this.state.strokeStyle = color;\n    }\n\n    restoreStrokeStyle() {\n        this.ctx.strokeStyle = this.state.popStrokeStyle();\n    }\n\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n        this.state.lineWidth = width;\n    }\n\n    restoreStrokeWidth() {\n        this.ctx.lineWidth = this.state.popLineWidth();\n    }\n\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.lineWidth = this.state.lineWidth;\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n}\n", "import {Point2D} from \"../../datatypes/point\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\n\nexport class CubismElement implements IRenderable {\n    position: Point2D;\n    size: Point2D;\n    c: CanvasDrawer | null;\n\n    constructor() {\n        this.position = new Point2D(0, 0);\n        this.size = new Point2D(0, 0);\n        this.c = null;\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        this.c = c;\n    }\n\n    setWidth(width: number) {\n        this.size.x = width;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.size.y = height;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D) {\n        this.position = pos;\n        return this;\n    }\n    setPosFromXY(x: number, y: number) {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n    render(): void {\n        if (this.c === null) {\n            throw new Error(\"CubismElement.render(): CubismCanvasManager is null\");\n        }\n    }\n}\n", "export class CubismGlobalEventSystem{\n    private _globalEventListeners: {[key: string]: Function[]} = {};\n    constructor() {\n    }\n    registerGlobalEvent(event: string, callback: Function): void {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n        }\n        this._globalEventListeners[event].push(callback);\n    }\n    unregisterGlobalEvent(event: string, callback: Function): void {\n        this._globalEventListeners[event].splice(this._globalEventListeners[event].indexOf(callback), 1);\n    }\n    triggerGlobalEvent(event: string, ...args: any[]): void {\n        this._globalEventListeners[event].forEach((callback) => {\n            callback(...args);\n        });\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismElement} from \"./elements/CubismElement\";\nimport {CubismGlobalEventSystem} from \"./CubismGlobalEventSystem\";\n\nexport class CubismCanvasManager implements IUpdatable {\n    root: CubismElement;\n\n    canvasDrawer: CanvasDrawer;\n    globalEvent: CubismGlobalEventSystem;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.root = new CubismElement();\n        this.canvasDrawer = new CanvasDrawer(canvas);\n        this.globalEvent = new CubismGlobalEventSystem();\n    }\n\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new CubismCanvasManager(canvas);\n    }\n\n    static createFromId(id: string) {\n        return CubismCanvasManager.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: CubismElement) {\n        this.canvasDrawer.clear();\n        this.setRootElement(root);\n        this.setElementCanvas();\n        this.update();\n    }\n\n    setElementCanvas() {\n        this.root.setCanvasDrawer(this.canvasDrawer);\n    }\n\n    setRootElement(root: CubismElement) {\n        this.root = root;\n    }\n\n    update() {\n        if (this.root) {\n            this.root.render();\n        }\n    }\n}\n\n", "import {Point2D} from \"../../datatypes/point\";\nimport {CubismElement} from \"./CubismElement\";\nimport {CanvasDrawer} from \"../CanvasDrawer\";\n\nexport class RectangleElement extends CubismElement {\n    background: string;\n    lineWidth: number;\n\n    constructor() {\n        super();\n        this.background = \"white\";\n        this.lineWidth = 10;\n    }\n\n    setLineWidth(width: number) {\n        this.lineWidth = width;\n        return this;\n    }\n\n    setBackgroundColor(color: string) {\n        this.background = color;\n        return this;\n    }\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.setFillStyle(this.background);\n        c.setStrokeStyle(\"black\");\n        c.setStrokeWidth(this.lineWidth);\n        c.translate(this.position);\n        c.drawRect(0, 0, this.size.x, this.size.y);\n        c.restoreTranslate();\n        c.restoreFillStyle();\n    }\n}\n", "import {CubismElement} from \"../CubismElement\";\nimport {CanvasDrawer} from \"../../CanvasDrawer\";\n\nexport class LayoutElement extends CubismElement {\n    children: CubismElement[] = [];\n\n    constructor(...children: CubismElement[]) {\n        super();\n        this.children = children;\n    }\n\n    render() {\n        super.render();\n        for (let child of this.children) {\n            child.render();\n        }\n    }\n    setCanvasDrawer(c: CanvasDrawer) {\n        super.setCanvasDrawer(c);\n        for (let child of this.children) {\n            child.setCanvasDrawer(c);\n        }\n    }\n}\n", "import {PointerPoint} from \"../../datatypes/PointerPoint\";\nimport {RectangleElement} from \"./RectangleElement\";\n\nexport class InteractiveElement extends RectangleElement {\n    private events: { [key: string]: Function[] } = {};\n\n    pushOn(event: string, ...callbacks: Function[]): void {\n        if (this.events[event] === undefined) {\n            this.events[event] = [];\n        }\n        this.events[event].push(...callbacks);\n    }\n\n    getOn(event: string): Function[] {\n        return this.events[event];\n    }\n\n    removeOn(event: string, callback: Function): void {\n        this.events[event].splice(this.events[event].indexOf(callback), 1);\n    }\n\n    public triggerOnMove(point: PointerPoint): void {\n        for (let callback of this.onMove) {\n            callback(point);\n        }\n    }\n\n    pushOnMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(\"move\", ...callbacks);\n        return this;\n    }\n\n    removeOnMove(callback: Function): void {\n        this.removeOn(\"move\", callback);\n    }\n\n    get onMove(): Function[] {\n        return this.getOn(\"move\");\n    }\n}", "import {Point2D} from \"./point\";\n\nexport class PointerPoint extends Point2D {\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n}", "import {CubismCanvasManager} from \"./ui/Cubism\";\nimport {RectangleElement} from \"./ui/elements/RectangleElement\";\nimport {LayoutElement} from \"./ui/elements/layouts/LayoutElement\";\nimport {InteractiveElement} from \"./ui/elements/InteractiveElement\";\nimport {Point2D} from \"./datatypes/point\";\nimport {PointerPoint} from \"./datatypes/PointerPoint\";\n\nconsole.log(\"loading index.ts\");\n\n\n/**\n * Demo of a simple layout\n */\nfunction main() {\n    let canvas = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\n    let c = CubismCanvasManager.createFromCanvas(canvas);\n\n    let interactive = new InteractiveElement()\n        .pushOnMove((point: PointerPoint) => {\n            console.log(\"move\" + point);\n        })\n        .setWidth(100)\n        .setHeight(100)\n        .setBackgroundColor(\"green\")\n        .setPosFromXY(40, 40);\n\n    canvas.onpointermove = (e) => {\n        interactive.triggerOnMove(new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n    }\n\n    c.init(\n        new LayoutElement(\n            new RectangleElement()\n                .setWidth(100)\n                .setHeight(100)\n                .setBackgroundColor(\"red\")\n                .setPosFromXY(0, 0),\n            new RectangleElement()\n                .setWidth(100)\n                .setHeight(100)\n                .setBackgroundColor(\"blue\")\n                .setPosFromXY(40, 40)\n                .setLineWidth(5),\n            interactive\n        )\n    );\n}\n\nmain()\n"],
  "mappings": "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",
  "names": []
}
