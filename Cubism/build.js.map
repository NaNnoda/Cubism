{
  "version": 3,
  "sources": ["src/Datatypes/TransformMatrix2D.ts", "src/State.ts", "src/Constants/Constants.ts", "src/CanvasDrawer.ts", "src/Events/CubismGlobalEventSystem.ts", "src/Events/CubismEventManager.ts", "src/Datatypes/Point.ts", "src/Debug/Log.ts", "src/UI/Elements/CubismElement.ts", "src/UI/Elements/InteractiveElement.ts", "src/UI/Elements/PointerHandleableElement.ts", "src/Datatypes/PointerPoint.ts", "src/Cubism.ts", "src/UI/Elements/InteractiveRect.ts", "src/UI/Elements/DraggableRect.ts", "src/UI/Elements/Layouts/PointerHandleableLayout.ts", "src/UI/Elements/Layouts/LinearLayout.ts", "src/UI/Elements/Layouts/VerticalLayout.ts", "src/UI/Elements/ButtonElement.ts", "src/Index.ts"],
  "sourcesContent": ["/**\n * A class representing a 2D transformation matrix.\n */\nexport class TransformMatrix2D {\n    arr: number[][] = [];\n\n    /**\n     * Creates a new 2D transform matrix.\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\n     * @param m12 Vertical skewing.\n     * @param m21 Horizontal skewing.\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\n     * @param dx  Horizontal translation (moving).\n     * @param dy Vertical translation (moving).\n     */\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\n        this.arr = [\n            [m11, m12, dx],\n            [m21, m22, dy],\n            [0, 0, 1]\n        ];\n    }\n\n    get m11(): number {\n        return this.arr[0][0];\n    }\n\n    set m11(value: number) {\n        this.arr[0][0] = value;\n    }\n\n    get m12(): number {\n        return this.arr[0][1];\n    }\n\n    set m12(value: number) {\n        this.arr[0][1] = value;\n    }\n\n    get m21(): number {\n        return this.arr[1][0];\n    }\n\n    set m21(value: number) {\n        this.arr[1][0] = value;\n    }\n\n    get m22(): number {\n        return this.arr[1][1];\n    }\n\n    set m22(value: number) {\n        this.arr[1][1] = value;\n    }\n\n    get dx(): number {\n        return this.arr[0][2];\n    }\n\n    set dx(value: number) {\n        this.arr[0][2] = value;\n    }\n\n    get dy(): number {\n        return this.arr[1][2];\n    }\n\n    set dy(value: number) {\n        this.arr[1][2] = value;\n    }\n\n\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\n    }\n\n    get(x: number, y: number): number {\n        return this.arr[x][y];\n    }\n\n    set(x: number, y: number, value: number) {\n        // console.log(`Setting ${x}, ${y} to ${value}`);\n        this.arr[x][y] = value;\n    }\n\n    static identity(): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\n    }\n\n    static zero(): TransformMatrix2D {\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\n    }\n\n    static translation(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\n    }\n\n    static rotation(angle: number): TransformMatrix2D {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\n    }\n\n    static scale(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\n    }\n\n    clone(): TransformMatrix2D {\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\n    }\n\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\n        let newMatrix = TransformMatrix2D.zero();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let dotProduct = 0;\n                for (let k = 0; k < 3; k++) {\n                    dotProduct += this.get(i, k) * other.get(k, j);\n                }\n                newMatrix.set(i, j, dotProduct);\n            }\n        }\n        return newMatrix;\n    }\n\n    translate(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.translation(x, y));\n    }\n\n    rotate(angle: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.rotation(angle));\n    }\n\n    scale(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.scale(x, y));\n    }\n\n    toString(): string {\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\n    }\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {TransformMatrix2D} from \"./Datatypes/TransformMatrix2D\";\n\n/**\n * The state of the canvas\n */\nexport class CubismCanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n    }\n\n    private translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\n\n    set translate(offset: Point2D) {\n        let translateMatrix = this.translateMatrix.translate(offset.x, offset.y);\n        this.translates.push(translateMatrix);\n        this.setCtxTransform(translateMatrix);\n    }\n\n    setCtxTransform(t: TransformMatrix2D) {\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\n    }\n\n    restoreTranslate() {\n        let lastTranslate = this.popTranslate();\n        this.setCtxTransform(lastTranslate);\n    }\n\n    get translateMatrix(): TransformMatrix2D {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate(): TransformMatrix2D {\n        if (this.translates.length > 1) {\n            // console.log(\"pop translate\");\n            return this.translates.pop() as TransformMatrix2D;\n        }\n        return this.translates[0];\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "export class Values{\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n    public static readonly ON_ENTER = \"onEnter\";\n    public static readonly ON_LEAVE = \"onLeave\";\n\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n}\nexport class LayoutValues{\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}", "import {Point2D} from \"./Datatypes/Point\";\nimport {CubismCanvasState} from \"./State\";\nimport {CubismGlobalEventSystem} from \"./Events/CubismGlobalEventSystem\";\nimport {Values} from \"./Constants/Constants\";\n\n/**\n * Adaptor class for the canvas\n * with the ability to draw on it\n * and handle events\n */\nexport class CanvasDrawer {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n\n    state: CubismCanvasState; // the state of the canvas\n\n    globalEvent: CubismGlobalEventSystem;\n\n    /**\n     * Constructor of the CanvasDrawer\n     * @param canvas the canvas to draw on\n     * @param globalEvent the global event system\n     */\n    constructor(canvas: HTMLCanvasElement, globalEvent: CubismGlobalEventSystem) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.state = new CubismCanvasState(canvas, this.ctx);\n        this.globalEvent = globalEvent;\n        this.registerFrameUpdate();\n    }\n\n    get width() {\n        return this.canvas.width;\n    }\n\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    /**\n     * Register the frame update event\n     * @private\n     */\n    private registerFrameUpdate() {\n        this.globalEvent.registerGlobalEvent(Values.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    /**\n     * Things to do on every frame update\n     * @private\n     */\n    private frameUpdate() {\n        if (this.state.needsRedraw) {\n            this.triggerRedraw();\n            this.state.needsRedraw = false;\n        }\n    }\n\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Set the fill style(color) of the canvas\n     * @param style the style to set\n     */\n    setFillStyle(style: string) {\n        this.ctx.fillStyle = style;\n    }\n\n    /**\n     * Set the stroke style(color) of the canvas\n     * @param style the style to set\n     */\n    setStrokeStyle(style: string) {\n        this.ctx.strokeStyle = style;\n    }\n\n    /**\n     * Set the line width of the canvas\n     * @param width\n     */\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n    }\n\n    /**\n     * Translate the canvas\n     * @param offset\n     */\n    translate(offset: Point2D) {\n        this.state.translate = offset;\n    }\n\n    /**\n     * Restore translation and rotation to previous state\n     */\n    restoreTranslate() {\n        this.state.restoreTranslate();\n    }\n\n    /**\n     * Draw text on the canvas\n     * @param text the text to draw\n     * @param x the x position of the text\n     * @param y the y position of the text\n     */\n    fillText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    /**\n     * Draw a line with two Point2Ds\n     * @param begin the beginning of the line\n     * @param end the end of the line\n     */\n    drawLineWithPoints(begin: Point2D, end: Point2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    /**\n     * Draw a line with four numbers\n     * @param beginX the x position of the beginning of the line\n     * @param beginY the y position of the beginning of the line\n     * @param endX the x position of the end of the line\n     * @param endY the y position of the end of the line\n     */\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawShape(points: Point2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRectWithPoints(p1: Point2D, p2: Point2D | null = null) {\n        if (p2 === null) {\n            this.drawRect(0, 0, p1.x, p1.y);\n        } else {\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\n        }\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    /**\n     * Draw an HTML Canvas Path on the canvas\n     * @param path\n     */\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    /**\n     * Close the drawing path\n     */\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    /**\n     * Set the need redraw flag\n     * @param redraw\n     */\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    /**\n     * Trigger a redraw event\n     * Seems more responsive than setRedraw()\n     */\n    triggerRedraw() {\n        this.globalEvent.triggerGlobalEvent(Values.REDRAW);\n    }\n}\n", "import {Log} from \"../Debug/Log\";\n\n/**\n * System that handles the registration and trigger of global events\n */\nexport class CubismGlobalEventSystem {\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    constructor() {\n    }\n\n    registerGlobalEvent(event: string, callback: Function): void {\n        this.getEvent(event).push(callback);\n    }\n\n    unregisterGlobalEvent(event: string, callback: Function): void {\n        this._globalEventListeners[event].splice(this._globalEventListeners[event].indexOf(callback), 1);\n    }\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n        }\n        return this._globalEventListeners[event];\n    }\n\n    triggerGlobalEvent(event: string, ...args: any[]): void {\n        this.getEvent(event).forEach((callback) => {\n            callback(...args);\n        });\n    }\n}", "import {Values} from \"../Constants/Constants\";\nimport {CubismGlobalEventSystem} from \"./CubismGlobalEventSystem\";\n\nexport class CubismEventManager{\n    globalEvent: CubismGlobalEventSystem;\n    constructor(globalEvent: CubismGlobalEventSystem) {\n        this.globalEvent = globalEvent;\n        this.startFixedUpdate();\n        this.startFrameUpdate();\n    }\n    startFixedUpdate() {\n        setInterval(this.doFixUpdate.bind(this), 1000 / 60);\n    }\n    doFixUpdate() {\n        this.globalEvent.triggerGlobalEvent(Values.FIX_UPDATE);\n    }\n\n    startFrameUpdate() {\n        this.globalEvent.triggerGlobalEvent(Values.FRAME_UPDATE);\n        window.requestAnimationFrame(this.startFrameUpdate.bind(this));\n    }\n}", "/**\n * A representation of a point in 2D space.\n */\nexport class Point2D {\n    arr: number[]\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n    get x() {\n        return this.arr[0];\n    }\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n    get y() {\n        return this.arr[1];\n    }\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    sub(other: Point2D): Point2D {\n        return new Point2D(this.x - other.x, this.y - other.y);\n    }\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n    }\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n    }\n    add(other: Point2D): Point2D {\n        return new Point2D(this.x + other.x, this.y + other.y);\n    }\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n    toString() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\n", "export class Log {\n    static debugFlag: boolean = true;\n\n    static log(message: string, ...args: any[]): void {\n        let s = message;\n        if (args.length !== 0) {\n            s += \": \";\n        }\n\n        // if (args.length > 2) {\n        s += \"\\n\";\n        for (let i = 0; i < args.length; i++) {\n            s += args[i] + \"\\n\";\n        }\n        // } else {\n        //     for (let i = 0; i < args.length; i++) {\n        //         s += args[i] + \" \";\n        //     }\n        // }\n        console.log(s);\n    }\n\n    static logDebug(message: string, ...args: any[]): void {\n        if (Log.debugFlag) {\n            Log.log(message, ...args);\n        }\n    }\n\n    static debug(message: string, ...args: any[]): void {\n        if (Log.debugFlag) {\n            console.log(message, ...args);\n        }\n    }\n}", "import {Point2D} from \"../../Datatypes/Point\";\nimport {CanvasDrawer} from \"../../CanvasDrawer\";\nimport {Log} from \"../../Debug/Log\";\nimport {CubismGlobalEventSystem} from \"../../Events/CubismGlobalEventSystem\";\nimport {LayoutValues} from \"../../Constants/Constants\";\n\n/**\n * Base class for all elements that can be rendered on the canvas\n * With size, position, and global events\n */\nexport class CubismElement implements IRenderable {\n    _position: Point2D;\n    _size: Point2D;\n    _absSize: Point2D; // Absolute size is the size of the element\n    c: CanvasDrawer | null;\n    globalEvent: CubismGlobalEventSystem | null = null;\n\n    needsResize: boolean;\n\n    constructor() {\n        this._position = new Point2D(0, 0);\n        this._size = new Point2D(LayoutValues.MATCH_PARENT, LayoutValues.MATCH_PARENT);\n        this._absSize = new Point2D(0, 0);\n        this.c = null;\n\n        this.needsResize = true;\n    }\n\n    set position(pos: Point2D) {\n        this._position = pos;\n        this.c?.setRedraw(true);\n    }\n\n\n    get position(): Point2D {\n        return this._position;\n    }\n\n    get size(): Point2D {\n        return this._size;\n    }\n\n    set size(size: Point2D) {\n        this._size = size;\n        this.needsResize = true;\n        this.c?.setRedraw(true);\n    }\n\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c?.setRedraw(true);\n    }\n\n    init(c: CanvasDrawer, parentSize: Point2D, globalEvent: CubismGlobalEventSystem) {\n        this.setCanvasDrawer(c);\n        this.updateShape(parentSize.x, parentSize.y);\n        this.setGlobalEventSystem(globalEvent);\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem) {\n        this.globalEvent = globalEvent;\n    }\n\n    updateShape(x: number, y: number) {\n        Log.logDebug(\"Resizing\", this, \"to\", x, y);\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n\n    get height(): number {\n        return this.size.y;\n    }\n\n\n    set height(y) {\n        this.size.y = y;\n        this.needsResize = true;\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.size.x = x;\n        this.needsResize = true;\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        this.c = c;\n    }\n\n    setWidth(width: number) {\n        this.width = width;\n        // this.absWidth = -1;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        // this.absHeight = -1;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D) {\n        this.position = pos;\n        return this;\n    }\n\n    setPosFromXY(x: number, y: number) {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n    render(): void {\n        if (this.c === null) {\n            throw new Error(\"CubismElement.render(): CubismCanvasManager is null\");\n        }\n        Log.logDebug(\"Rendering\", this);\n    }\n\n\n    toString() {\n        return `${this.elementName} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n    get elementName(): string {\n        return this.constructor.name;\n    }\n}\n", "import {PointerPoint} from \"../../Datatypes/PointerPoint\";\n\nimport {CubismElement} from \"./CubismElement\";\n\nexport class InteractiveElement extends CubismElement {\n    private events: { [key: string]: Function[] } = {};\n\n    pushOn(event: string, ...callbacks: Function[]): void {\n        if (this.events[event] === undefined) {\n            this.events[event] = [];\n        }\n        this.events[event].push(...callbacks);\n    }\n\n    getOn(event: string): Function[] {\n        return this.events[event];\n    }\n\n    removeOn(event: string, callback: Function): void {\n        this.events[event].splice(this.events[event].indexOf(callback), 1);\n    }\n}", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Values} from \"../../Constants/Constants\";\n\nexport class PointerHandleableElement extends InteractiveElement {\n    _pointerWasNotInRange: boolean = true;\n    _hovered: boolean = false;\n    _pressed: boolean = false;\n\n    // _lastPoint: PointerPoint | null = null;\n\n    get pressed(): boolean {\n        return this._pressed;\n    }\n\n    set pressed(value: boolean) {\n        this._pressed = value;\n    }\n\n    get hovered(): boolean {\n        return this._hovered;\n    }\n\n    set hovered(value: boolean) {\n        this._hovered = value;\n    }\n\n    constructor() {\n        super();\n        this.pushOnParentMove((point: PointerPoint) => {\n            this.onParentMove(point);\n        });\n        this.pushOnParentDown((point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(Values.ON_MOVE, (point: PointerPoint) => {\n            this.onMove(point);\n        });\n        this.pushOn(Values.ON_PARENT_DOWN, (point: PointerPoint) => {\n            this.onParentDown(point);\n        });\n        this.pushOn(Values.ON_DOWN, (point: PointerPoint) => {\n            this.onDown(point);\n        });\n        this.pushOn(Values.ON_PARENT_UP, (point: PointerPoint) => {\n            this.onParentUp(point);\n        });\n        this.pushOn(Values.ON_UP, (point: PointerPoint) => {\n            this.onUp(point);\n        });\n        this.pushOn(Values.ON_ENTER, (point: PointerPoint) => {\n            this.onEnter(point);\n        });\n        this.pushOn(Values.ON_LEAVE, (point: PointerPoint) => {\n            this.onLeave(point);\n        });\n    }\n\n    public triggerOnParentDown(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentDown(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnDown(point);\n        }\n    }\n\n    public triggerOnParentUp(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onParentUp(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnUp(point);\n        }\n    }\n\n    public triggerOnUp(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_UP);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onUp(point: PointerPoint): void {\n        this.pressed = false;\n    }\n\n    public triggerOnDown(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_DOWN);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onDown(point: PointerPoint): void {\n        this.pressed = true;\n    }\n\n    public triggerOnMove(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    public onMove(point: PointerPoint): void {\n\n    }\n\n    public pushOnMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(Values.ON_MOVE, ...callbacks);\n        return this;\n    }\n\n    public removeOnMove(callback: Function): void {\n        this.removeOn(Values.ON_MOVE, callback);\n    }\n\n    public onParentMove(point: PointerPoint): void {\n        if (this.inRange(point)) {\n            this.triggerOnMove(point);\n        }\n        if (this.inRange(point) && this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = false;\n            this.triggerOnEnter(point);\n\n        }\n        if (!this.inRange(point) && !this._pointerWasNotInRange) {\n            this._pointerWasNotInRange = true;\n            this.triggerOnLeave(point);\n        }\n    }\n\n    pushOnParentMove(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(Values.ON_PARENT_MOVE, ...callbacks);\n        return this;\n    }\n\n    triggerOnParentMove(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_PARENT_MOVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    inRange(point: PointerPoint): boolean {\n        return point.x >= this.position.x &&\n            point.x <= this.position.x + this.absWidth &&\n            point.y >= this.position.y &&\n            point.y <= this.position.y + this.absHeight;\n    }\n\n    public onEnter(point: PointerPoint): void {\n        this.hovered = true;\n    }\n\n    triggerOnEnter(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_ENTER);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    private pushOnParentDown(...callbacks: Function[]): InteractiveElement {\n        this.pushOn(Values.ON_PARENT_DOWN, ...callbacks);\n        return this;\n    }\n\n    triggerOnLeave(point: PointerPoint): void {\n        let e = this.getOn(Values.ON_LEAVE);\n        for (let callback of e) {\n            callback(point);\n        }\n    }\n\n    onLeave(point: PointerPoint): void {\n        this.hovered = false;\n    }\n}", "import {Point2D} from \"./Point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n}", "import {CanvasDrawer} from \"./CanvasDrawer\";\nimport {CubismGlobalEventSystem} from \"./Events/CubismGlobalEventSystem\";\nimport {CubismEventManager} from \"./Events/CubismEventManager\";\nimport {Values} from \"./Constants/Constants\";\nimport {Point2D} from \"./Datatypes/Point\";\nimport {PointerHandleableElement} from \"./UI/Elements/PointerHandleableElement\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\n\n/**\n * Entry point of the application\n */\nexport class Cubism {\n    root: PointerHandleableElement;\n    canvasDrawer: CanvasDrawer;\n    globalEvent: CubismGlobalEventSystem;\n    eventManger: CubismEventManager;\n    canvas: HTMLCanvasElement;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.root = new PointerHandleableElement();\n        this.globalEvent = new CubismGlobalEventSystem();\n        this.canvasDrawer = new CanvasDrawer(canvas, this.globalEvent);\n        this.eventManger = new CubismEventManager(this.globalEvent);\n        this.canvas = canvas;\n        this.registerRedraw();\n        this.registerPointerEvents();\n    }\n\n    /**\n     * Register pointer events\n     */\n    registerPointerEvents() {\n        // on move\n        this.canvas.onpointermove = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_MOVE, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_MOVE, (point: PointerPoint) => {\n            this.root.triggerOnMove(point);\n        });\n        // on down\n        this.canvas.onpointerdown = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_DOWN, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_DOWN, (point: PointerPoint) => {\n            this.root.triggerOnDown(point);\n        });\n        // on up\n        this.canvas.onpointerup = (e) => {\n            this.globalEvent.triggerGlobalEvent(Values.ON_UP, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n\n        this.globalEvent.registerGlobalEvent(Values.ON_UP, (point: PointerPoint) => {\n            this.root.triggerOnUp(point);\n        });\n    }\n\n\n    registerRedraw() {\n        this.globalEvent.registerGlobalEvent(Values.REDRAW, this.redraw.bind(this));\n    }\n\n    registerOnMove() {\n        this.globalEvent.registerGlobalEvent(Values.ON_MOVE, this.registerOnMove.bind(this));\n    }\n\n    /**\n     * Create a new Cubism object from a canvas object\n     * @param canvas the canvas to draw on\n     */\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    /**\n     * Create a new Cubism object from a canvas id\n     * @param id the id of the canvas\n     */\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: PointerHandleableElement) {\n        this.setRootElement(root);\n        this.initRootElement();\n        this.canvasDrawer.setRedraw(true);\n    }\n\n    private initRootElement() {\n        this.root.init(\n            this.canvasDrawer,\n            new Point2D(this.canvas.width, this.canvas.height),\n            this.globalEvent\n        );\n    }\n\n    /**\n     * Set the root element of the application\n     * @param root\n     * @private\n     */\n    private setRootElement(root: PointerHandleableElement) {\n        this.root = root;\n    }\n\n    /**\n     * Redraw the whole canvas from the root element\n     */\n    redraw() {\n        this.canvasDrawer.clear();\n        if (this.root) {\n            this.root.render();\n        }\n    }\n}\n\n", "import {InteractiveElement} from \"./InteractiveElement\";\nimport {CanvasDrawer} from \"../../CanvasDrawer\";\nimport {PointerHandleableElement} from \"./PointerHandleableElement\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Log} from \"../../Debug/Log\";\nimport {Values} from \"../../Constants/Constants\";\n\nexport class InteractiveRect extends PointerHandleableElement {\n    constructor() {\n        super();\n    }\n\n    onMove(point: PointerPoint) {\n        super.onMove(point);\n    }\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        Log.logDebug(\"down on\", this);\n    }\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        // c.setFillStyle(currBackground)\n        // c.setStrokeStyle(this.theme[\"stroke\"]);\n        // c.setStrokeWidth(this.theme[\"strokeWidth\"]);\n        c.translate(this.position);\n        c.drawRectWithPoints(this.absSize);\n        c.restoreTranslate();\n    }\n}", "import {InteractiveRect} from \"./InteractiveRect\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Point2D} from \"../../Datatypes/Point\";\n\nexport class DraggableRect extends InteractiveRect {\n    private pointerRelativePosition: Point2D | null = null;\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.pointerRelativePosition = new Point2D(point.x - this.position.x, point.y - this.position.y);\n        // Log.logDebug(\"down on\", this.pointerRelativePosition);\n    }\n\n    onParentMove(point: PointerPoint) {\n        super.onParentMove(point);\n        if (this.pointerRelativePosition !== null) {\n            this.position = point.sub(this.pointerRelativePosition);\n            this.c?.triggerRedraw();\n        }\n    }\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        // Log.logDebug(\"up on\", this);\n        this.pointerRelativePosition = null;\n    }\n}", "import {CanvasDrawer} from \"../../../CanvasDrawer\";\nimport {PointerPoint} from \"../../../Datatypes/PointerPoint\";\nimport {Log} from \"../../../Debug/Log\";\nimport {LayoutValues} from \"../../../Constants/Constants\";\nimport {PointerHandleableElement} from \"../PointerHandleableElement\";\nimport {CubismGlobalEventSystem} from \"../../../Events/CubismGlobalEventSystem\";\n\nexport class PointerHandleableLayout extends PointerHandleableElement {\n    private _children: PointerHandleableElement[] = [];\n\n    constructor(...children: PointerHandleableElement[]) {\n        super();\n        this._children = children;\n        Log.logDebug(\"Children\", this._children);\n    }\n\n    setGlobalEventSystem(globalEvent: CubismGlobalEventSystem) {\n        super.setGlobalEventSystem(globalEvent);\n        for (let child of this.children) {\n            child.setGlobalEventSystem(globalEvent);\n        }\n    }\n\n    updateShape(x: number, y: number) {\n        super.updateShape(x, y);\n        this.updateChildrenShape()\n    }\n\n    updateChildrenShape() {\n        this.updateChildrenSize();\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenSize() {\n        Log.logDebug(\"absSize\", this.absSize);\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === LayoutValues.MATCH_PARENT) {\n                Log.logDebug(\"Match parent X\", child);\n                x = this.absWidth;\n            }\n            if (y === LayoutValues.MATCH_PARENT) {\n                Log.logDebug(\"Match parent Y\", child);\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.updateShape(x, y);\n        }\n    }\n\n    updateChildrenPosition() {\n\n    }\n\n    get children(): PointerHandleableElement[] {\n        return this._children;\n    }\n\n    set children(children: PointerHandleableElement[]) {\n        this._children = children;\n    }\n\n    pushChildren(...children: PointerHandleableElement[]): PointerHandleableLayout {\n        this.children.push(...children);\n        return this;\n    }\n\n    removeChild(child: PointerHandleableElement): void {\n        this.children.splice(this.children.indexOf(child), 1);\n    }\n\n    render() {\n        super.render();\n        this.c?.translate(this.position);\n        for (let child of this.children) {\n            child.render();\n        }\n        this.c?.restoreTranslate();\n    }\n\n    setCanvasDrawer(c: CanvasDrawer) {\n        super.setCanvasDrawer(c);\n        for (let child of this.children) {\n            child.setCanvasDrawer(c);\n        }\n    }\n\n    triggerOnMove(point: PointerPoint): void {\n        super.triggerOnMove(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentMove(pointInChild);\n        }\n    }\n\n    triggerOnDown(point: PointerPoint): void {\n        super.triggerOnDown(point);\n        let pointInChild = new PointerPoint(point.x - this.position.x, point.y - this.position.y, point.pressure);\n        for (let child of this.children) {\n            child.triggerOnParentDown(pointInChild);\n        }\n    }\n\n    triggerOnUp(point: PointerPoint): void {\n        super.triggerOnUp(point);\n        let pointInChild = point.sub(this.position);\n        for (let child of this.children) {\n            child.triggerOnParentUp(pointInChild);\n        }\n    }\n}", "import {PointerHandleableLayout} from \"./PointerHandleableLayout\";\nimport {Point2D} from \"../../../Datatypes/Point\";\nimport {Orientation} from \"../../../Constants/Orientation\";\n\nexport abstract class LinearLayout extends PointerHandleableLayout {\n}", "import {LinearLayout} from \"./LinearLayout\";\nimport {Point2D} from \"../../../Datatypes/Point\";\n\nexport class VerticalLayout extends LinearLayout {\n    updateChildrenPosition() {\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            y += child.height;\n        }\n    }\n}", "import {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {CanvasDrawer} from \"../../CanvasDrawer\";\nimport {InteractiveRect} from \"./InteractiveRect\";\n\nexport class ButtonElement extends InteractiveRect {\n    text: string;\n\n    constructor(text: string) {\n        super();\n        this.text = text;\n    }\n\n    updateShape(x: number, y: number) {\n        super.updateShape(x, y);\n    }\n\n    onMove(point: PointerPoint) {\n        super.onMove(point);\n        this.c?.setRedraw(true);\n    }\n\n    onEnter(point: PointerPoint) {\n        super.onEnter(point);\n        console.log(\"Enter\" + this.elementName);\n        this.c?.setRedraw(true);\n    }\n\n    //\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.c?.setRedraw(true);\n    }\n\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        this.c?.setRedraw(true);\n    }\n\n    onLeave(point: PointerPoint) {\n        super.onLeave(point);\n        this.c?.setRedraw(true);\n    }\n\n    render(): void {\n        super.render();\n        let c = this.c as CanvasDrawer;\n        c.fillText(this.text, 10, 30);\n    }\n}", "import {InteractiveElement} from \"./UI/Elements/InteractiveElement\";\nimport {Point2D} from \"./Datatypes/Point\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\nimport {Cubism} from \"./Cubism\";\nimport {Log} from \"./Debug/Log\";\nimport {LayoutValues} from \"./Constants/Constants\";\nimport {InteractiveRect} from \"./UI/Elements/InteractiveRect\";\nimport {PointerHandleableLayout} from \"./UI/Elements/Layouts/PointerHandleableLayout\";\nimport {DraggableRect} from \"./UI/Elements/DraggableRect\";\nimport {VerticalLayout} from \"./UI/Elements/Layouts/VerticalLayout\";\nimport {HorizontalLayout} from \"./UI/Elements/Layouts/HorizontalLayout\";\nimport {ButtonElement} from \"./UI/Elements/ButtonElement\";\nimport {RectWithChild} from \"./UI/Elements/RectWithChild\";\nimport {TextElement} from \"./UI/Elements/TextElement\";\nimport {Colors} from \"./Theme/Colors\";\n\nconsole.log(\"loading Index.ts\");\n\n\n/**\n * Demo of a simple layout\n */\nfunction main() {\n    Cubism.createFromId(\"mainCanvas\")\n        .init(\n            new VerticalLayout(\n                new DraggableRect()\n                    .setWidth(100)\n                    .setHeight(100),\n                // .setBackgroundColor(Colors.blue500),\n                new DraggableRect()\n                    .setWidth(100)\n                    .setHeight(100),\n                // .setBackgroundColor(Colors.green200),\n                new ButtonElement(\"Button\")\n                    .setHeight(50)\n                    .setWidth(100)\n            )\n        );\n}\n\nmain()\n"],
  "mappings": "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",
  "names": []
}
